        -:    0:Source:/mnt/c/Users/aschw/CLionProjects/Algoritmos 2/Labo 3/ejercitacion_punteros/tests/gtest-1.8.1/gtest-all.cc
        -:    0:Graph:/mnt/c/Users/aschw/CLionProjects/Algoritmos 2/Labo 3/ejercitacion_punteros/cmake-build-default-wsl-coverage/CMakeFiles/gtest.dir/tests/gtest-1.8.1/gtest-all.cc.gcno
        -:    0:Data:/mnt/c/Users/aschw/CLionProjects/Algoritmos 2/Labo 3/ejercitacion_punteros/cmake-build-default-wsl-coverage/CMakeFiles/gtest.dir/tests/gtest-1.8.1/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// Google C++ Testing and Mocking Framework (Google Test)
        -:   32://
        -:   33:// Sometimes it's desirable to build Google Test by compiling a single file.
        -:   34:// This file serves this purpose.
        -:   35:
        -:   36:// This line ensures that gtest.h can be compiled on its own, even
        -:   37:// when it's fused.
        -:   38:#include "gtest.h"
        -:   39:
        -:   40:// The following lines pull in the real gtest *.cc files.
        -:   41:// Copyright 2005, Google Inc.
        -:   42:// All rights reserved.
        -:   43://
        -:   44:// Redistribution and use in source and binary forms, with or without
        -:   45:// modification, are permitted provided that the following conditions are
        -:   46:// met:
        -:   47://
        -:   48://     * Redistributions of source code must retain the above copyright
        -:   49:// notice, this list of conditions and the following disclaimer.
        -:   50://     * Redistributions in binary form must reproduce the above
        -:   51:// copyright notice, this list of conditions and the following disclaimer
        -:   52:// in the documentation and/or other materials provided with the
        -:   53:// distribution.
        -:   54://     * Neither the name of Google Inc. nor the names of its
        -:   55:// contributors may be used to endorse or promote products derived from
        -:   56:// this software without specific prior written permission.
        -:   57://
        -:   58:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   59:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   60:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   61:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   62:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   63:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   64:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   65:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   66:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   67:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   68:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   69:
        -:   70://
        -:   71:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   72:
        -:   73:// Copyright 2007, Google Inc.
        -:   74:// All rights reserved.
        -:   75://
        -:   76:// Redistribution and use in source and binary forms, with or without
        -:   77:// modification, are permitted provided that the following conditions are
        -:   78:// met:
        -:   79://
        -:   80://     * Redistributions of source code must retain the above copyright
        -:   81:// notice, this list of conditions and the following disclaimer.
        -:   82://     * Redistributions in binary form must reproduce the above
        -:   83:// copyright notice, this list of conditions and the following disclaimer
        -:   84:// in the documentation and/or other materials provided with the
        -:   85:// distribution.
        -:   86://     * Neither the name of Google Inc. nor the names of its
        -:   87:// contributors may be used to endorse or promote products derived from
        -:   88:// this software without specific prior written permission.
        -:   89://
        -:   90:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   91:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   92:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   93:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   94:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   95:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   96:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   97:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   98:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   99:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:  100:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  101:
        -:  102://
        -:  103:// Utilities for testing Google Test itself and code that uses Google Test
        -:  104:// (e.g. frameworks built on top of Google Test).
        -:  105:
        -:  106:// GOOGLETEST_CM0004 DO NOT DELETE
        -:  107:
        -:  108:#ifndef GTEST_INCLUDE_GTEST_GTEST_SPI_H_
        -:  109:#define GTEST_INCLUDE_GTEST_GTEST_SPI_H_
        -:  110:
        -:  111:
        -:  112:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -:  113:/* class A needs to have dll-interface to be used by clients of class B */)
        -:  114:
        -:  115:namespace testing {
        -:  116:
        -:  117:// This helper class can be used to mock out Google Test failure reporting
        -:  118:// so that we can test Google Test or code that builds on Google Test.
        -:  119://
        -:  120:// An object of this class appends a TestPartResult object to the
        -:  121:// TestPartResultArray object given in the constructor whenever a Google Test
        -:  122:// failure is reported. It can either intercept only failures that are
        -:  123:// generated in the same thread that created this object or it can intercept
        -:  124:// all generated failures. The scope of this mock object can be controlled with
        -:  125:// the second argument to the two arguments constructor.
        -:  126:class GTEST_API_ ScopedFakeTestPartResultReporter
        -:  127:    : public TestPartResultReporterInterface {
        -:  128: public:
        -:  129:  // The two possible mocking modes of this object.
        -:  130:  enum InterceptMode {
        -:  131:    INTERCEPT_ONLY_CURRENT_THREAD,  // Intercepts only thread local failures.
        -:  132:    INTERCEPT_ALL_THREADS           // Intercepts all failures.
        -:  133:  };
        -:  134:
        -:  135:  // The c'tor sets this object as the test part result reporter used
        -:  136:  // by Google Test.  The 'result' parameter specifies where to report the
        -:  137:  // results. This reporter will only catch failures generated in the current
        -:  138:  // thread. DEPRECATED
        -:  139:  explicit ScopedFakeTestPartResultReporter(TestPartResultArray* result);
        -:  140:
        -:  141:  // Same as above, but you can choose the interception scope of this object.
        -:  142:  ScopedFakeTestPartResultReporter(InterceptMode intercept_mode,
        -:  143:                                   TestPartResultArray* result);
        -:  144:
        -:  145:  // The d'tor restores the previous test part result reporter.
        -:  146:  virtual ~ScopedFakeTestPartResultReporter();
        -:  147:
        -:  148:  // Appends the TestPartResult object to the TestPartResultArray
        -:  149:  // received in the constructor.
        -:  150:  //
        -:  151:  // This method is from the TestPartResultReporterInterface
        -:  152:  // interface.
        -:  153:  virtual void ReportTestPartResult(const TestPartResult& result);
        -:  154: private:
        -:  155:  void Init();
        -:  156:
        -:  157:  const InterceptMode intercept_mode_;
        -:  158:  TestPartResultReporterInterface* old_reporter_;
        -:  159:  TestPartResultArray* const result_;
        -:  160:
        -:  161:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedFakeTestPartResultReporter);
        -:  162:};
        -:  163:
        -:  164:namespace internal {
        -:  165:
        -:  166:// A helper class for implementing EXPECT_FATAL_FAILURE() and
        -:  167:// EXPECT_NONFATAL_FAILURE().  Its destructor verifies that the given
        -:  168:// TestPartResultArray contains exactly one failure that has the given
        -:  169:// type and contains the given substring.  If that's not the case, a
        -:  170:// non-fatal failure will be generated.
        -:  171:class GTEST_API_ SingleFailureChecker {
        -:  172: public:
        -:  173:  // The constructor remembers the arguments.
        -:  174:  SingleFailureChecker(const TestPartResultArray* results,
        -:  175:                       TestPartResult::Type type, const std::string& substr);
        -:  176:  ~SingleFailureChecker();
        -:  177: private:
        -:  178:  const TestPartResultArray* const results_;
        -:  179:  const TestPartResult::Type type_;
        -:  180:  const std::string substr_;
        -:  181:
        -:  182:  GTEST_DISALLOW_COPY_AND_ASSIGN_(SingleFailureChecker);
        -:  183:};
        -:  184:
        -:  185:}  // namespace internal
        -:  186:
        -:  187:}  // namespace testing
        -:  188:
        -:  189:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251
        -:  190:
        -:  191:// A set of macros for testing Google Test assertions or code that's expected
        -:  192:// to generate Google Test fatal failures.  It verifies that the given
        -:  193:// statement will cause exactly one fatal Google Test failure with 'substr'
        -:  194:// being part of the failure message.
        -:  195://
        -:  196:// There are two different versions of this macro. EXPECT_FATAL_FAILURE only
        -:  197:// affects and considers failures generated in the current thread and
        -:  198:// EXPECT_FATAL_FAILURE_ON_ALL_THREADS does the same but for all threads.
        -:  199://
        -:  200:// The verification of the assertion is done correctly even when the statement
        -:  201:// throws an exception or aborts the current function.
        -:  202://
        -:  203:// Known restrictions:
        -:  204://   - 'statement' cannot reference local non-static variables or
        -:  205://     non-static members of the current object.
        -:  206://   - 'statement' cannot return a value.
        -:  207://   - You cannot stream a failure message to this macro.
        -:  208://
        -:  209:// Note that even though the implementations of the following two
        -:  210:// macros are much alike, we cannot refactor them to use a common
        -:  211:// helper macro, due to some peculiarity in how the preprocessor
        -:  212:// works.  The AcceptsMacroThatExpandsToUnprotectedComma test in
        -:  213:// gtest_unittest.cc will fail to compile if we do that.
        -:  214:#define EXPECT_FATAL_FAILURE(statement, substr) \
        -:  215:  do { \
        -:  216:    class GTestExpectFatalFailureHelper {\
        -:  217:     public:\
        -:  218:      static void Execute() { statement; }\
        -:  219:    };\
        -:  220:    ::testing::TestPartResultArray gtest_failures;\
        -:  221:    ::testing::internal::SingleFailureChecker gtest_checker(\
        -:  222:        &gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));\
        -:  223:    {\
        -:  224:      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
        -:  225:          ::testing::ScopedFakeTestPartResultReporter:: \
        -:  226:          INTERCEPT_ONLY_CURRENT_THREAD, &gtest_failures);\
        -:  227:      GTestExpectFatalFailureHelper::Execute();\
        -:  228:    }\
        -:  229:  } while (::testing::internal::AlwaysFalse())
        -:  230:
        -:  231:#define EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement, substr) \
        -:  232:  do { \
        -:  233:    class GTestExpectFatalFailureHelper {\
        -:  234:     public:\
        -:  235:      static void Execute() { statement; }\
        -:  236:    };\
        -:  237:    ::testing::TestPartResultArray gtest_failures;\
        -:  238:    ::testing::internal::SingleFailureChecker gtest_checker(\
        -:  239:        &gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));\
        -:  240:    {\
        -:  241:      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
        -:  242:          ::testing::ScopedFakeTestPartResultReporter:: \
        -:  243:          INTERCEPT_ALL_THREADS, &gtest_failures);\
        -:  244:      GTestExpectFatalFailureHelper::Execute();\
        -:  245:    }\
        -:  246:  } while (::testing::internal::AlwaysFalse())
        -:  247:
        -:  248:// A macro for testing Google Test assertions or code that's expected to
        -:  249:// generate Google Test non-fatal failures.  It asserts that the given
        -:  250:// statement will cause exactly one non-fatal Google Test failure with 'substr'
        -:  251:// being part of the failure message.
        -:  252://
        -:  253:// There are two different versions of this macro. EXPECT_NONFATAL_FAILURE only
        -:  254:// affects and considers failures generated in the current thread and
        -:  255:// EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS does the same but for all threads.
        -:  256://
        -:  257:// 'statement' is allowed to reference local variables and members of
        -:  258:// the current object.
        -:  259://
        -:  260:// The verification of the assertion is done correctly even when the statement
        -:  261:// throws an exception or aborts the current function.
        -:  262://
        -:  263:// Known restrictions:
        -:  264://   - You cannot stream a failure message to this macro.
        -:  265://
        -:  266:// Note that even though the implementations of the following two
        -:  267:// macros are much alike, we cannot refactor them to use a common
        -:  268:// helper macro, due to some peculiarity in how the preprocessor
        -:  269:// works.  If we do that, the code won't compile when the user gives
        -:  270:// EXPECT_NONFATAL_FAILURE() a statement that contains a macro that
        -:  271:// expands to code containing an unprotected comma.  The
        -:  272:// AcceptsMacroThatExpandsToUnprotectedComma test in gtest_unittest.cc
        -:  273:// catches that.
        -:  274://
        -:  275:// For the same reason, we have to write
        -:  276://   if (::testing::internal::AlwaysTrue()) { statement; }
        -:  277:// instead of
        -:  278://   GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)
        -:  279:// to avoid an MSVC warning on unreachable code.
        -:  280:#define EXPECT_NONFATAL_FAILURE(statement, substr) \
        -:  281:  do {\
        -:  282:    ::testing::TestPartResultArray gtest_failures;\
        -:  283:    ::testing::internal::SingleFailureChecker gtest_checker(\
        -:  284:        &gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \
        -:  285:        (substr));\
        -:  286:    {\
        -:  287:      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
        -:  288:          ::testing::ScopedFakeTestPartResultReporter:: \
        -:  289:          INTERCEPT_ONLY_CURRENT_THREAD, &gtest_failures);\
        -:  290:      if (::testing::internal::AlwaysTrue()) { statement; }\
        -:  291:    }\
        -:  292:  } while (::testing::internal::AlwaysFalse())
        -:  293:
        -:  294:#define EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement, substr) \
        -:  295:  do {\
        -:  296:    ::testing::TestPartResultArray gtest_failures;\
        -:  297:    ::testing::internal::SingleFailureChecker gtest_checker(\
        -:  298:        &gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \
        -:  299:        (substr));\
        -:  300:    {\
        -:  301:      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
        -:  302:          ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \
        -:  303:          &gtest_failures);\
        -:  304:      if (::testing::internal::AlwaysTrue()) { statement; }\
        -:  305:    }\
        -:  306:  } while (::testing::internal::AlwaysFalse())
        -:  307:
        -:  308:#endif  // GTEST_INCLUDE_GTEST_GTEST_SPI_H_
        -:  309:
        -:  310:#include <ctype.h>
        -:  311:#include <math.h>
        -:  312:#include <stdarg.h>
        -:  313:#include <stdio.h>
        -:  314:#include <stdlib.h>
        -:  315:#include <time.h>
        -:  316:#include <wchar.h>
        -:  317:#include <wctype.h>
        -:  318:
        -:  319:#include <algorithm>
        -:  320:#include <iomanip>
        -:  321:#include <limits>
        -:  322:#include <list>
        -:  323:#include <map>
        -:  324:#include <ostream>  // NOLINT
        -:  325:#include <sstream>
        -:  326:#include <vector>
        -:  327:
        -:  328:#if GTEST_OS_LINUX
        -:  329:
        -:  330:// FIXME: Use autoconf to detect availability of
        -:  331:// gettimeofday().
        -:  332:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  333:
        -:  334:# include <fcntl.h>  // NOLINT
        -:  335:# include <limits.h>  // NOLINT
        -:  336:# include <sched.h>  // NOLINT
        -:  337:// Declares vsnprintf().  This header is not available on Windows.
        -:  338:# include <strings.h>  // NOLINT
        -:  339:# include <sys/mman.h>  // NOLINT
        -:  340:# include <sys/time.h>  // NOLINT
        -:  341:# include <unistd.h>  // NOLINT
        -:  342:# include <string>
        -:  343:
        -:  344:#elif GTEST_OS_SYMBIAN
        -:  345:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  346:# include <sys/time.h>  // NOLINT
        -:  347:
        -:  348:#elif GTEST_OS_ZOS
        -:  349:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  350:# include <sys/time.h>  // NOLINT
        -:  351:
        -:  352:// On z/OS we additionally need strings.h for strcasecmp.
        -:  353:# include <strings.h>  // NOLINT
        -:  354:
        -:  355:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:  356:
        -:  357:# include <windows.h>  // NOLINT
        -:  358:# undef min
        -:  359:
        -:  360:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:  361:
        -:  362:# include <io.h>  // NOLINT
        -:  363:# include <sys/timeb.h>  // NOLINT
        -:  364:# include <sys/types.h>  // NOLINT
        -:  365:# include <sys/stat.h>  // NOLINT
        -:  366:
        -:  367:# if GTEST_OS_WINDOWS_MINGW
        -:  368:// MinGW has gettimeofday() but not _ftime64().
        -:  369:// FIXME: Use autoconf to detect availability of
        -:  370://   gettimeofday().
        -:  371:// FIXME: There are other ways to get the time on
        -:  372://   Windows, like GetTickCount() or GetSystemTimeAsFileTime().  MinGW
        -:  373://   supports these.  consider using them instead.
        -:  374:#  define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  375:#  include <sys/time.h>  // NOLINT
        -:  376:# endif  // GTEST_OS_WINDOWS_MINGW
        -:  377:
        -:  378:// cpplint thinks that the header is already included, so we want to
        -:  379:// silence it.
        -:  380:# include <windows.h>  // NOLINT
        -:  381:# undef min
        -:  382:
        -:  383:#else
        -:  384:
        -:  385:// Assume other platforms have gettimeofday().
        -:  386:// FIXME: Use autoconf to detect availability of
        -:  387://   gettimeofday().
        -:  388:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  389:
        -:  390:// cpplint thinks that the header is already included, so we want to
        -:  391:// silence it.
        -:  392:# include <sys/time.h>  // NOLINT
        -:  393:# include <unistd.h>  // NOLINT
        -:  394:
        -:  395:#endif  // GTEST_OS_LINUX
        -:  396:
        -:  397:#if GTEST_HAS_EXCEPTIONS
        -:  398:# include <stdexcept>
        -:  399:#endif
        -:  400:
        -:  401:#if GTEST_CAN_STREAM_RESULTS_
        -:  402:# include <arpa/inet.h>  // NOLINT
        -:  403:# include <netdb.h>  // NOLINT
        -:  404:# include <sys/socket.h>  // NOLINT
        -:  405:# include <sys/types.h>  // NOLINT
        -:  406:#endif
        -:  407:
        -:  408:// Copyright 2005, Google Inc.
        -:  409:// All rights reserved.
        -:  410://
        -:  411:// Redistribution and use in source and binary forms, with or without
        -:  412:// modification, are permitted provided that the following conditions are
        -:  413:// met:
        -:  414://
        -:  415://     * Redistributions of source code must retain the above copyright
        -:  416:// notice, this list of conditions and the following disclaimer.
        -:  417://     * Redistributions in binary form must reproduce the above
        -:  418:// copyright notice, this list of conditions and the following disclaimer
        -:  419:// in the documentation and/or other materials provided with the
        -:  420:// distribution.
        -:  421://     * Neither the name of Google Inc. nor the names of its
        -:  422:// contributors may be used to endorse or promote products derived from
        -:  423:// this software without specific prior written permission.
        -:  424://
        -:  425:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:  426:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:  427:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:  428:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:  429:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:  430:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:  431:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:  432:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:  433:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:  434:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:  435:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  436:
        -:  437:// Utility functions and classes used by the Google C++ testing framework.//
        -:  438:// This file contains purely Google Test's internal implementation.  Please
        -:  439:// DO NOT #INCLUDE IT IN A USER PROGRAM.
        -:  440:
        -:  441:#ifndef GTEST_SRC_GTEST_INTERNAL_INL_H_
        -:  442:#define GTEST_SRC_GTEST_INTERNAL_INL_H_
        -:  443:
        -:  444:#ifndef _WIN32_WCE
        -:  445:# include <errno.h>
        -:  446:#endif  // !_WIN32_WCE
        -:  447:#include <stddef.h>
        -:  448:#include <stdlib.h>  // For strtoll/_strtoul64/malloc/free.
        -:  449:#include <string.h>  // For memmove.
        -:  450:
        -:  451:#include <algorithm>
        -:  452:#include <string>
        -:  453:#include <vector>
        -:  454:
        -:  455:
        -:  456:#if GTEST_CAN_STREAM_RESULTS_
        -:  457:# include <arpa/inet.h>  // NOLINT
        -:  458:# include <netdb.h>  // NOLINT
        -:  459:#endif
        -:  460:
        -:  461:#if GTEST_OS_WINDOWS
        -:  462:# include <windows.h>  // NOLINT
        -:  463:#endif  // GTEST_OS_WINDOWS
        -:  464:
        -:  465:
        -:  466:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -:  467:/* class A needs to have dll-interface to be used by clients of class B */)
        -:  468:
        -:  469:namespace testing {
        -:  470:
        -:  471:// Declares the flags.
        -:  472://
        -:  473:// We don't want the users to modify this flag in the code, but want
        -:  474:// Google Test's own unit tests to be able to access it. Therefore we
        -:  475:// declare it here as opposed to in gtest.h.
        -:  476:GTEST_DECLARE_bool_(death_test_use_fork);
        -:  477:
        -:  478:namespace internal {
        -:  479:
        -:  480:// The value of GetTestTypeId() as seen from within the Google Test
        -:  481:// library.  This is solely for testing GetTestTypeId().
        -:  482:GTEST_API_ extern const TypeId kTestTypeIdInGoogleTest;
        -:  483:
        -:  484:// Names of the flags (needed for parsing Google Test flags).
        -:  485:const char kAlsoRunDisabledTestsFlag[] = "also_run_disabled_tests";
        -:  486:const char kBreakOnFailureFlag[] = "break_on_failure";
        -:  487:const char kCatchExceptionsFlag[] = "catch_exceptions";
        -:  488:const char kColorFlag[] = "color";
        -:  489:const char kFilterFlag[] = "filter";
        -:  490:const char kListTestsFlag[] = "list_tests";
        -:  491:const char kOutputFlag[] = "output";
        -:  492:const char kPrintTimeFlag[] = "print_time";
        -:  493:const char kPrintUTF8Flag[] = "print_utf8";
        -:  494:const char kRandomSeedFlag[] = "random_seed";
        -:  495:const char kRepeatFlag[] = "repeat";
        -:  496:const char kShuffleFlag[] = "shuffle";
        -:  497:const char kStackTraceDepthFlag[] = "stack_trace_depth";
        -:  498:const char kStreamResultToFlag[] = "stream_result_to";
        -:  499:const char kThrowOnFailureFlag[] = "throw_on_failure";
        -:  500:const char kFlagfileFlag[] = "flagfile";
        -:  501:
        -:  502:// A valid random seed must be in [1, kMaxRandomSeed].
        -:  503:const int kMaxRandomSeed = 99999;
        -:  504:
        -:  505:// g_help_flag is true iff the --help flag or an equivalent form is
        -:  506:// specified on the command line.
        -:  507:GTEST_API_ extern bool g_help_flag;
        -:  508:
        -:  509:// Returns the current time in milliseconds.
        -:  510:GTEST_API_ TimeInMillis GetTimeInMillis();
        -:  511:
        -:  512:// Returns true iff Google Test should use colors in the output.
        -:  513:GTEST_API_ bool ShouldUseColor(bool stdout_is_tty);
        -:  514:
        -:  515:// Formats the given time in milliseconds as seconds.
        -:  516:GTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);
        -:  517:
        -:  518:// Converts the given time in milliseconds to a date string in the ISO 8601
        -:  519:// format, without the timezone information.  N.B.: due to the use the
        -:  520:// non-reentrant localtime() function, this function is not thread safe.  Do
        -:  521:// not use it in any code that can be called from multiple threads.
        -:  522:GTEST_API_ std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms);
        -:  523:
        -:  524:// Parses a string for an Int32 flag, in the form of "--flag=value".
        -:  525://
        -:  526:// On success, stores the value of the flag in *value, and returns
        -:  527:// true.  On failure, returns false without changing *value.
        -:  528:GTEST_API_ bool ParseInt32Flag(
        -:  529:    const char* str, const char* flag, Int32* value);
        -:  530:
        -:  531:// Returns a random seed in range [1, kMaxRandomSeed] based on the
        -:  532:// given --gtest_random_seed flag value.
function _ZN7testing8internal21GetRandomSeedFromFlagEi called 0 returned 0% blocks executed 0%
    #####:  533:inline int GetRandomSeedFromFlag(Int32 random_seed_flag) {
    #####:  534:  const unsigned int raw_seed = (random_seed_flag == 0) ?
    %%%%%:  534-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  534-block  1
    #####:  535:      static_cast<unsigned int>(GetTimeInMillis()) :
    %%%%%:  535-block  0
call    0 never executed
    #####:  536:      static_cast<unsigned int>(random_seed_flag);
        -:  537:
        -:  538:  // Normalizes the actual seed to range [1, kMaxRandomSeed] such that
        -:  539:  // it's easy to type.
    #####:  540:  const int normalized_seed =
    #####:  541:      static_cast<int>((raw_seed - 1U) %
        -:  542:                       static_cast<unsigned int>(kMaxRandomSeed)) + 1;
    #####:  543:  return normalized_seed;
    %%%%%:  543-block  0
        -:  544:}
        -:  545:
        -:  546:// Returns the first valid random seed after 'seed'.  The behavior is
        -:  547:// undefined if 'seed' is invalid.  The seed after kMaxRandomSeed is
        -:  548:// considered to be 1.
function _ZN7testing8internal17GetNextRandomSeedEi called 0 returned 0% blocks executed 0%
    #####:  549:inline int GetNextRandomSeed(int seed) {
    #####:  550:  GTEST_CHECK_(1 <= seed && seed <= kMaxRandomSeed)
    %%%%%:  550-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  550-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  550-block  2
    %%%%%:  550-block  3
    %%%%%:  550-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  550-block  5
call    7 never executed
call    8 never executed
    %%%%%:  550-block  6
call    9 never executed
    $$$$$:  550-block  7
call   10 never executed
    #####:  551:      << "Invalid random seed " << seed << " - must be in [1, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  551-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  551-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  551-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  552:      << kMaxRandomSeed << "].";
    %%%%%:  552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  552-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  553:  const int next_seed = seed + 1;
    #####:  554:  return (next_seed > kMaxRandomSeed) ? 1 : next_seed;
    %%%%%:  554-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  554-block  1
    %%%%%:  554-block  2
    %%%%%:  554-block  3
    %%%%%:  554-block  4
        -:  555:}
        -:  556:
        -:  557:// This class saves the values of all Google Test flags in its c'tor, and
        -:  558:// restores them in its d'tor.
        -:  559:class GTestFlagSaver {
        -:  560: public:
        -:  561:  // The c'tor.
function _ZN7testing8internal14GTestFlagSaverC2Ev called 10 returned 100% blocks executed 56%
       10:  562:  GTestFlagSaver() {
       10:  562-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
call    3 returned 10
call    4 returned 10
call    5 returned 10
    $$$$$:  562-block  1
call    6 never executed
    $$$$$:  562-block  2
call    7 never executed
    $$$$$:  562-block  3
call    8 never executed
    $$$$$:  562-block  4
call    9 never executed
    $$$$$:  562-block  5
call   10 never executed
    $$$$$:  562-block  6
call   11 never executed
       10:  563:    also_run_disabled_tests_ = GTEST_FLAG(also_run_disabled_tests);
       10:  564:    break_on_failure_ = GTEST_FLAG(break_on_failure);
       10:  565:    catch_exceptions_ = GTEST_FLAG(catch_exceptions);
       10:  566:    color_ = GTEST_FLAG(color);
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  567:    death_test_style_ = GTEST_FLAG(death_test_style);
       10:  567-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  568:    death_test_use_fork_ = GTEST_FLAG(death_test_use_fork);
       10:  569:    filter_ = GTEST_FLAG(filter);
       10:  569-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  570:    internal_run_death_test_ = GTEST_FLAG(internal_run_death_test);
       10:  570-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  571:    list_tests_ = GTEST_FLAG(list_tests);
       10:  572:    output_ = GTEST_FLAG(output);
       10:  572-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  573:    print_time_ = GTEST_FLAG(print_time);
       10:  574:    print_utf8_ = GTEST_FLAG(print_utf8);
       10:  575:    random_seed_ = GTEST_FLAG(random_seed);
       10:  576:    repeat_ = GTEST_FLAG(repeat);
       10:  577:    shuffle_ = GTEST_FLAG(shuffle);
       10:  578:    stack_trace_depth_ = GTEST_FLAG(stack_trace_depth);
       10:  579:    stream_result_to_ = GTEST_FLAG(stream_result_to);
       10:  579-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  580:    throw_on_failure_ = GTEST_FLAG(throw_on_failure);
       10:  581:  }
       10:  581-block  0
        -:  582:
        -:  583:  // The d'tor is not virtual.  DO NOT INHERIT FROM THIS CLASS.
function _ZN7testing8internal14GTestFlagSaverD2Ev called 10 returned 100% blocks executed 100%
       10:  584:  ~GTestFlagSaver() {
call    0 returned 10
call    1 returned 10
call    2 returned 10
call    3 returned 10
call    4 returned 10
       10:  585:    GTEST_FLAG(also_run_disabled_tests) = also_run_disabled_tests_;
       10:  586:    GTEST_FLAG(break_on_failure) = break_on_failure_;
       10:  587:    GTEST_FLAG(catch_exceptions) = catch_exceptions_;
       10:  588:    GTEST_FLAG(color) = color_;
       10:  588-block  0
call    0 returned 10
       10:  589:    GTEST_FLAG(death_test_style) = death_test_style_;
call    0 returned 10
       10:  590:    GTEST_FLAG(death_test_use_fork) = death_test_use_fork_;
       10:  591:    GTEST_FLAG(filter) = filter_;
call    0 returned 10
       10:  592:    GTEST_FLAG(internal_run_death_test) = internal_run_death_test_;
call    0 returned 10
       10:  593:    GTEST_FLAG(list_tests) = list_tests_;
       10:  594:    GTEST_FLAG(output) = output_;
call    0 returned 10
       10:  595:    GTEST_FLAG(print_time) = print_time_;
       10:  596:    GTEST_FLAG(print_utf8) = print_utf8_;
       10:  597:    GTEST_FLAG(random_seed) = random_seed_;
       10:  598:    GTEST_FLAG(repeat) = repeat_;
       10:  599:    GTEST_FLAG(shuffle) = shuffle_;
       10:  600:    GTEST_FLAG(stack_trace_depth) = stack_trace_depth_;
       10:  601:    GTEST_FLAG(stream_result_to) = stream_result_to_;
call    0 returned 10
       10:  602:    GTEST_FLAG(throw_on_failure) = throw_on_failure_;
call    0 returned 10
       10:  603:  }
        -:  604:
        -:  605: private:
        -:  606:  // Fields for saving the original values of flags.
        -:  607:  bool also_run_disabled_tests_;
        -:  608:  bool break_on_failure_;
        -:  609:  bool catch_exceptions_;
        -:  610:  std::string color_;
        -:  611:  std::string death_test_style_;
        -:  612:  bool death_test_use_fork_;
        -:  613:  std::string filter_;
        -:  614:  std::string internal_run_death_test_;
        -:  615:  bool list_tests_;
        -:  616:  std::string output_;
        -:  617:  bool print_time_;
        -:  618:  bool print_utf8_;
        -:  619:  internal::Int32 random_seed_;
        -:  620:  internal::Int32 repeat_;
        -:  621:  bool shuffle_;
        -:  622:  internal::Int32 stack_trace_depth_;
        -:  623:  std::string stream_result_to_;
        -:  624:  bool throw_on_failure_;
        -:  625:} GTEST_ATTRIBUTE_UNUSED_;
        -:  626:
        -:  627:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -:  628:// code_point parameter is of type UInt32 because wchar_t may not be
        -:  629:// wide enough to contain a code point.
        -:  630:// If the code_point is not a valid Unicode code point
        -:  631:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -:  632:// to "(Invalid Unicode 0xXXXXXXXX)".
        -:  633:GTEST_API_ std::string CodePointToUtf8(UInt32 code_point);
        -:  634:
        -:  635:// Converts a wide string to a narrow string in UTF-8 encoding.
        -:  636:// The wide string is assumed to have the following encoding:
        -:  637://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin, Symbian OS)
        -:  638://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -:  639:// Parameter str points to a null-terminated wide string.
        -:  640:// Parameter num_chars may additionally limit the number
        -:  641:// of wchar_t characters processed. -1 is used when the entire string
        -:  642:// should be processed.
        -:  643:// If the string contains code points that are not valid Unicode code points
        -:  644:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -:  645:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -:  646:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -:  647:// will be encoded as individual Unicode characters from Basic Normal Plane.
        -:  648:GTEST_API_ std::string WideStringToUtf8(const wchar_t* str, int num_chars);
        -:  649:
        -:  650:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -:  651:// if the variable is present. If a file already exists at this location, this
        -:  652:// function will write over it. If the variable is present, but the file cannot
        -:  653:// be created, prints an error and exits.
        -:  654:void WriteToShardStatusFileIfNeeded();
        -:  655:
        -:  656:// Checks whether sharding is enabled by examining the relevant
        -:  657:// environment variable values. If the variables are present,
        -:  658:// but inconsistent (e.g., shard_index >= total_shards), prints
        -:  659:// an error and exits. If in_subprocess_for_death_test, sharding is
        -:  660:// disabled because it must only be applied to the original test
        -:  661:// process. Otherwise, we could filter out death tests we intended to execute.
        -:  662:GTEST_API_ bool ShouldShard(const char* total_shards_str,
        -:  663:                            const char* shard_index_str,
        -:  664:                            bool in_subprocess_for_death_test);
        -:  665:
        -:  666:// Parses the environment variable var as an Int32. If it is unset,
        -:  667:// returns default_val. If it is not an Int32, prints an error and
        -:  668:// and aborts.
        -:  669:GTEST_API_ Int32 Int32FromEnvOrDie(const char* env_var, Int32 default_val);
        -:  670:
        -:  671:// Given the total number of shards, the shard index, and the test id,
        -:  672:// returns true iff the test should be run on this shard. The test id is
        -:  673:// some arbitrary but unique non-negative integer assigned to each test
        -:  674:// method. Assumes that 0 <= shard_index < total_shards.
        -:  675:GTEST_API_ bool ShouldRunTestOnShard(
        -:  676:    int total_shards, int shard_index, int test_id);
        -:  677:
        -:  678:// STL container utilities.
        -:  679:
        -:  680:// Returns the number of elements in the given container that satisfy
        -:  681:// the given predicate.
        -:  682:template <class Container, typename Predicate>
       49:  683:inline int CountIf(const Container& c, Predicate predicate) {
        -:  684:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  685:  // Solaris has a non-standard signature.
       49:  686:  int count = 0;
     177*:  687:  for (typename Container::const_iterator it = c.begin(); it != c.end(); ++it) {
     128*:  688:    if (predicate(*it))
      61*:  689:      ++count;
        -:  690:  }
       49:  691:  return count;
        -:  692:}
------------------
_ZN7testing8internal7CountIfISt6vectorIPNS_8TestInfoESaIS4_EEPFbPKS3_EEEiRKT_T0_:
function _ZN7testing8internal7CountIfISt6vectorIPNS_8TestInfoESaIS4_EEPFbPKS3_EEEiRKT_T0_ called 24 returned 100% blocks executed 100%
       24:  683:inline int CountIf(const Container& c, Predicate predicate) {
        -:  684:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  685:  // Solaris has a non-standard signature.
       24:  686:  int count = 0;
      144:  687:  for (typename Container::const_iterator it = c.begin(); it != c.end(); ++it) {
       24:  687-block  0
call    0 returned 24
      144:  687-block  1
call    1 returned 144
call    2 returned 144
branch  3 taken 120 (fallthrough)
branch  4 taken 24
      120:  687-block  2
call    5 returned 120
      120:  688:    if (predicate(*it))
      120:  688-block  0
call    0 returned 120
call    1 returned 120
branch  2 taken 120 (fallthrough)
branch  3 taken 0 (throw)
      120:  688-block  1
branch  4 taken 55 (fallthrough)
branch  5 taken 65
       55:  689:      ++count;
       55:  689-block  0
        -:  690:  }
       24:  691:  return count;
       24:  691-block  0
       24:  691-block  1
        -:  692:}
------------------
_ZN7testing8internal7CountIfISt6vectorINS_14TestPartResultESaIS3_EEPFbRKS3_EEEiRKT_T0_:
function _ZN7testing8internal7CountIfISt6vectorINS_14TestPartResultESaIS3_EEPFbRKS3_EEEiRKT_T0_ called 21 returned 100% blocks executed 58%
       21:  683:inline int CountIf(const Container& c, Predicate predicate) {
        -:  684:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  685:  // Solaris has a non-standard signature.
       21:  686:  int count = 0;
      21*:  687:  for (typename Container::const_iterator it = c.begin(); it != c.end(); ++it) {
       21:  687-block  0
call    0 returned 21
       21:  687-block  1
call    1 returned 21
call    2 returned 21
branch  3 taken 0 (fallthrough)
branch  4 taken 21
    %%%%%:  687-block  2
call    5 never executed
    #####:  688:    if (predicate(*it))
    %%%%%:  688-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  688-block  1
branch  4 never executed
branch  5 never executed
    #####:  689:      ++count;
    %%%%%:  689-block  0
        -:  690:  }
       21:  691:  return count;
       21:  691-block  0
       21:  691-block  1
        -:  692:}
------------------
_ZN7testing8internal7CountIfISt6vectorIPNS_8TestCaseESaIS4_EEPFbPKS3_EEEiRKT_T0_:
function _ZN7testing8internal7CountIfISt6vectorIPNS_8TestCaseESaIS4_EEPFbPKS3_EEEiRKT_T0_ called 4 returned 100% blocks executed 100%
        4:  683:inline int CountIf(const Container& c, Predicate predicate) {
        -:  684:  // Implemented as an explicit loop since std::count_if() in libCstd on
        -:  685:  // Solaris has a non-standard signature.
        4:  686:  int count = 0;
       12:  687:  for (typename Container::const_iterator it = c.begin(); it != c.end(); ++it) {
        4:  687-block  0
call    0 returned 4
       12:  687-block  1
call    1 returned 12
call    2 returned 12
branch  3 taken 8 (fallthrough)
branch  4 taken 4
        8:  687-block  2
call    5 returned 8
        8:  688:    if (predicate(*it))
        8:  688-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8:  688-block  1
branch  4 taken 6 (fallthrough)
branch  5 taken 2
        6:  689:      ++count;
        6:  689-block  0
        -:  690:  }
        4:  691:  return count;
        4:  691-block  0
        4:  691-block  1
        -:  692:}
------------------
        -:  693:
        -:  694:// Applies a function/functor to each element in the container.
        -:  695:template <class Container, typename Functor>
        9:  696:void ForEach(const Container& c, Functor functor) {
        9:  697:  std::for_each(c.begin(), c.end(), functor);
        9:  698:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_11EnvironmentESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_11EnvironmentESaIS4_EEPFvS4_EEEvRKT_T0_ called 2 returned 100% blocks executed 100%
        2:  696:void ForEach(const Container& c, Functor functor) {
        2:  697:  std::for_each(c.begin(), c.end(), functor);
        2:  697-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  698:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_17TestEventListenerESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_17TestEventListenerESaIS4_EEPFvS4_EEEvRKT_T0_ called 1 returned 100% blocks executed 100%
        1:  696:void ForEach(const Container& c, Functor functor) {
        1:  697:  std::for_each(c.begin(), c.end(), functor);
        1:  697-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:  698:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_8TestInfoESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_8TestInfoESaIS4_EEPFvS4_EEEvRKT_T0_ called 4 returned 100% blocks executed 100%
        4:  696:void ForEach(const Container& c, Functor functor) {
        4:  697:  std::for_each(c.begin(), c.end(), functor);
        4:  697-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
        4:  698:}
------------------
_ZN7testing8internal7ForEachISt6vectorIPNS_8TestCaseESaIS4_EEPFvS4_EEEvRKT_T0_:
function _ZN7testing8internal7ForEachISt6vectorIPNS_8TestCaseESaIS4_EEPFvS4_EEEvRKT_T0_ called 2 returned 100% blocks executed 100%
        2:  696:void ForEach(const Container& c, Functor functor) {
        2:  697:  std::for_each(c.begin(), c.end(), functor);
        2:  697-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  698:}
------------------
        -:  699:
        -:  700:// Returns the i-th element of the vector, or default_value if i is not
        -:  701:// in range [0, v.size()).
        -:  702:template <typename E>
function _ZN7testing8internal12GetElementOrIiEET_RKSt6vectorIS2_SaIS2_EEiS2_ called 16 returned 100% blocks executed 88%
       16:  703:inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {
      16*:  704:  return (i < 0 || i >= static_cast<int>(v.size())) ? default_value : v[i];
       16:  704-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:  704-block  1
call    2 returned 16
branch  3 taken 0 (fallthrough)
branch  4 taken 16
    %%%%%:  704-block  2
       16:  704-block  3
call    5 returned 16
       16:  704-block  4
        -:  705:}
        -:  706:
        -:  707:// Performs an in-place shuffle of a range of the vector's elements.
        -:  708:// 'begin' and 'end' are element indices as an STL-style range;
        -:  709:// i.e. [begin, end) are shuffled, where 'end' == size() means to
        -:  710:// shuffle to the end of the vector.
        -:  711:template <typename E>
function _ZN7testing8internal12ShuffleRangeIiEEvPNS0_6RandomEiiPSt6vectorIT_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####:  712:void ShuffleRange(internal::Random* random, int begin, int end,
        -:  713:                  std::vector<E>* v) {
    #####:  714:  const int size = static_cast<int>(v->size());
    %%%%%:  714-block  0
call    0 never executed
    #####:  715:  GTEST_CHECK_(0 <= begin && begin <= size)
branch  0 never executed
branch  1 never executed
    %%%%%:  715-block  0
branch  2 never executed
branch  3 never executed
    %%%%%:  715-block  1
    %%%%%:  715-block  2
    %%%%%:  715-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  715-block  4
call    7 never executed
call    8 never executed
    %%%%%:  715-block  5
call    9 never executed
    $$$$$:  715-block  6
call   10 never executed
    $$$$$:  715-block  7
call   11 never executed
    #####:  716:      << "Invalid shuffle range start " << begin << ": must be in range [0, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  716-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  716-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  716-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  717:      << size << "].";
    %%%%%:  717-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  717-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  718:  GTEST_CHECK_(begin <= end && end <= size)
    %%%%%:  718-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  718-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  718-block  2
    %%%%%:  718-block  3
    %%%%%:  718-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  718-block  5
call    7 never executed
call    8 never executed
    %%%%%:  718-block  6
call    9 never executed
    $$$$$:  718-block  7
call   10 never executed
    #####:  719:      << "Invalid shuffle range finish " << end << ": must be in range ["
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  719-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  719-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  719-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  720:      << begin << ", " << size << "].";
    %%%%%:  720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  720-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  720-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  721:
        -:  722:  // Fisher-Yates shuffle, from
        -:  723:  // http://en.wikipedia.org/wiki/Fisher-Yates_shuffle
    #####:  724:  for (int range_width = end - begin; range_width >= 2; range_width--) {
    %%%%%:  724-block  0
    %%%%%:  724-block  1
branch  0 never executed
branch  1 never executed
    #####:  725:    const int last_in_range = begin + range_width - 1;
    #####:  726:    const int selected = begin + random->Generate(range_width);
    %%%%%:  726-block  0
call    0 never executed
    #####:  727:    std::swap((*v)[selected], (*v)[last_in_range]);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  728:  }
    #####:  729:}
    %%%%%:  729-block  0
        -:  730:
        -:  731:// Performs an in-place shuffle of the vector's elements.
        -:  732:template <typename E>
function _ZN7testing8internal7ShuffleIiEEvPNS0_6RandomEPSt6vectorIT_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####:  733:inline void Shuffle(internal::Random* random, std::vector<E>* v) {
    #####:  734:  ShuffleRange(random, 0, static_cast<int>(v->size()), v);
    %%%%%:  734-block  0
call    0 never executed
call    1 never executed
    #####:  735:}
        -:  736:
        -:  737:// A function for deleting an object.  Handy for being used as a
        -:  738:// functor.
        -:  739:template <typename T>
      13*:  740:static void Delete(T* x) {
      13*:  741:  delete x;
      13*:  742:}
------------------
_ZN7testing8internalL6DeleteINS_11EnvironmentEEEvPT_:
function _ZN7testing8internalL6DeleteINS_11EnvironmentEEEvPT_ called 0 returned 0% blocks executed 0%
    #####:  740:static void Delete(T* x) {
    #####:  741:  delete x;
    %%%%%:  741-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  741-block  1
call    2 never executed
    #####:  742:}
------------------
_ZN7testing8internalL6DeleteINS_8TestCaseEEEvPT_:
function _ZN7testing8internalL6DeleteINS_8TestCaseEEEvPT_ called 2 returned 100% blocks executed 100%
        2:  740:static void Delete(T* x) {
        2:  741:  delete x;
        2:  741-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  741-block  1
call    2 returned 2
        2:  742:}
------------------
_ZN7testing8internalL6DeleteINS_17TestEventListenerEEEvPT_:
function _ZN7testing8internalL6DeleteINS_17TestEventListenerEEEvPT_ called 1 returned 100% blocks executed 100%
        1:  740:static void Delete(T* x) {
        1:  741:  delete x;
        1:  741-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  741-block  1
call    2 returned 1
        1:  742:}
------------------
_ZN7testing8internalL6DeleteINS_8TestInfoEEEvPT_:
function _ZN7testing8internalL6DeleteINS_8TestInfoEEEvPT_ called 10 returned 100% blocks executed 100%
       10:  740:static void Delete(T* x) {
       10:  741:  delete x;
       10:  741-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:  741-block  1
call    2 returned 10
call    3 returned 10
       10:  742:}
------------------
        -:  743:
        -:  744:// A predicate that checks the key of a TestProperty against a known key.
        -:  745://
        -:  746:// TestPropertyKeyIs is copyable.
        -:  747:class TestPropertyKeyIs {
        -:  748: public:
        -:  749:  // Constructor.
        -:  750:  //
        -:  751:  // TestPropertyKeyIs has NO default constructor.
function _ZN7testing8internal17TestPropertyKeyIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  752:  explicit TestPropertyKeyIs(const std::string& key) : key_(key) {}
    %%%%%:  752-block  0
call    0 never executed
        -:  753:
        -:  754:  // Returns true iff the test name of test property matches on key_.
function _ZNK7testing8internal17TestPropertyKeyIsclERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####:  755:  bool operator()(const TestProperty& test_property) const {
    #####:  756:    return test_property.key() == key_;
    %%%%%:  756-block  0
call    0 never executed
call    1 never executed
        -:  757:  }
        -:  758:
        -:  759: private:
        -:  760:  std::string key_;
        -:  761:};
        -:  762:
        -:  763:// Class UnitTestOptions.
        -:  764://
        -:  765:// This class contains functions for processing options the user
        -:  766:// specifies when running the tests.  It has only static members.
        -:  767://
        -:  768:// In most cases, the user can specify an option using either an
        -:  769:// environment variable or a command line flag.  E.g. you can set the
        -:  770:// test filter using either GTEST_FILTER or --gtest_filter.  If both
        -:  771:// the variable and the flag are present, the latter overrides the
        -:  772:// former.
        -:  773:class GTEST_API_ UnitTestOptions {
        -:  774: public:
        -:  775:  // Functions for processing the gtest_output flag.
        -:  776:
        -:  777:  // Returns the output format, or "" for normal printed output.
        -:  778:  static std::string GetOutputFormat();
        -:  779:
        -:  780:  // Returns the absolute path of the requested output file, or the
        -:  781:  // default (test_detail.xml in the original working directory) if
        -:  782:  // none was explicitly specified.
        -:  783:  static std::string GetAbsolutePathToOutputFile();
        -:  784:
        -:  785:  // Functions for processing the gtest_filter flag.
        -:  786:
        -:  787:  // Returns true iff the wildcard pattern matches the string.  The
        -:  788:  // first ':' or '\0' character in pattern marks the end of it.
        -:  789:  //
        -:  790:  // This recursive algorithm isn't very efficient, but is clear and
        -:  791:  // works well enough for matching test names, which are short.
        -:  792:  static bool PatternMatchesString(const char *pattern, const char *str);
        -:  793:
        -:  794:  // Returns true iff the user-specified filter matches the test case
        -:  795:  // name and the test name.
        -:  796:  static bool FilterMatchesTest(const std::string &test_case_name,
        -:  797:                                const std::string &test_name);
        -:  798:
        -:  799:#if GTEST_OS_WINDOWS
        -:  800:  // Function for supporting the gtest_catch_exception flag.
        -:  801:
        -:  802:  // Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  803:  // given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  804:  // This function is useful as an __except condition.
        -:  805:  static int GTestShouldProcessSEH(DWORD exception_code);
        -:  806:#endif  // GTEST_OS_WINDOWS
        -:  807:
        -:  808:  // Returns true if "name" matches the ':' separated list of glob-style
        -:  809:  // filters in "filter".
        -:  810:  static bool MatchesFilter(const std::string& name, const char* filter);
        -:  811:};
        -:  812:
        -:  813:// Returns the current application's name, removing directory path if that
        -:  814:// is present.  Used by UnitTestOptions::GetOutputFile.
        -:  815:GTEST_API_ FilePath GetCurrentExecutableName();
        -:  816:
        -:  817:// The role interface for getting the OS stack trace as a string.
        -:  818:class OsStackTraceGetterInterface {
        -:  819: public:
function _ZN7testing8internal27OsStackTraceGetterInterfaceC2Ev called 1 returned 100% blocks executed 100%
        1:  820:  OsStackTraceGetterInterface() {}
       1*:  821:  virtual ~OsStackTraceGetterInterface() {}
------------------
_ZN7testing8internal27OsStackTraceGetterInterfaceD0Ev:
function _ZN7testing8internal27OsStackTraceGetterInterfaceD0Ev called 0 returned 0% blocks executed 0%
    #####:  821:  virtual ~OsStackTraceGetterInterface() {}
    %%%%%:  821-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal27OsStackTraceGetterInterfaceD2Ev:
function _ZN7testing8internal27OsStackTraceGetterInterfaceD2Ev called 1 returned 100% blocks executed 100%
        1:  821:  virtual ~OsStackTraceGetterInterface() {}
------------------
        -:  822:
        -:  823:  // Returns the current OS stack trace as an std::string.  Parameters:
        -:  824:  //
        -:  825:  //   max_depth  - the maximum number of stack frames to be included
        -:  826:  //                in the trace.
        -:  827:  //   skip_count - the number of top frames to be skipped; doesn't count
        -:  828:  //                against max_depth.
        -:  829:  virtual std::string CurrentStackTrace(int max_depth, int skip_count) = 0;
        -:  830:
        -:  831:  // UponLeavingGTest() should be called immediately before Google Test calls
        -:  832:  // user code. It saves some information about the current stack that
        -:  833:  // CurrentStackTrace() will use to find and hide Google Test stack frames.
        -:  834:  virtual void UponLeavingGTest() = 0;
        -:  835:
        -:  836:  // This string is inserted in place of stack frames that are part of
        -:  837:  // Google Test's implementation.
        -:  838:  static const char* const kElidedFramesMarker;
        -:  839:
        -:  840: private:
        -:  841:  GTEST_DISALLOW_COPY_AND_ASSIGN_(OsStackTraceGetterInterface);
        -:  842:};
        -:  843:
        -:  844:// A working implementation of the OsStackTraceGetterInterface interface.
        -:  845:class OsStackTraceGetter : public OsStackTraceGetterInterface {
        -:  846: public:
function _ZN7testing8internal18OsStackTraceGetterC2Ev called 1 returned 100% blocks executed 100%
        1:  847:  OsStackTraceGetter() {}
        1:  847-block  0
call    0 returned 1
        -:  848:
        -:  849:  virtual std::string CurrentStackTrace(int max_depth, int skip_count);
        -:  850:  virtual void UponLeavingGTest();
        -:  851:
        -:  852: private:
        -:  853:#if GTEST_HAS_ABSL
        -:  854:  Mutex mutex_;  // Protects all internal state.
        -:  855:
        -:  856:  // We save the stack frame below the frame that calls user code.
        -:  857:  // We do this because the address of the frame immediately below
        -:  858:  // the user code changes between the call to UponLeavingGTest()
        -:  859:  // and any calls to the stack trace code from within the user code.
        -:  860:  void* caller_frame_ = nullptr;
        -:  861:#endif  // GTEST_HAS_ABSL
        -:  862:
        -:  863:  GTEST_DISALLOW_COPY_AND_ASSIGN_(OsStackTraceGetter);
        -:  864:};
        -:  865:
        -:  866:// Information about a Google Test trace point.
        -:  867:struct TraceInfo {
        -:  868:  const char* file;
        -:  869:  int line;
        -:  870:  std::string message;
        -:  871:};
        -:  872:
        -:  873:// This is the default global test part result reporter used in UnitTestImpl.
        -:  874:// This class should only be used by UnitTestImpl.
        -:  875:class DefaultGlobalTestPartResultReporter
        -:  876:  : public TestPartResultReporterInterface {
        -:  877: public:
        -:  878:  explicit DefaultGlobalTestPartResultReporter(UnitTestImpl* unit_test);
        -:  879:  // Implements the TestPartResultReporterInterface. Reports the test part
        -:  880:  // result in the current test.
        -:  881:  virtual void ReportTestPartResult(const TestPartResult& result);
        -:  882:
        -:  883: private:
        -:  884:  UnitTestImpl* const unit_test_;
        -:  885:
        -:  886:  GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultGlobalTestPartResultReporter);
        -:  887:};
        -:  888:
        -:  889:// This is the default per thread test part result reporter used in
        -:  890:// UnitTestImpl. This class should only be used by UnitTestImpl.
        -:  891:class DefaultPerThreadTestPartResultReporter
        -:  892:    : public TestPartResultReporterInterface {
        -:  893: public:
        -:  894:  explicit DefaultPerThreadTestPartResultReporter(UnitTestImpl* unit_test);
        -:  895:  // Implements the TestPartResultReporterInterface. The implementation just
        -:  896:  // delegates to the current global test part result reporter of *unit_test_.
        -:  897:  virtual void ReportTestPartResult(const TestPartResult& result);
        -:  898:
        -:  899: private:
        -:  900:  UnitTestImpl* const unit_test_;
        -:  901:
        -:  902:  GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultPerThreadTestPartResultReporter);
        -:  903:};
        -:  904:
        -:  905:// The private implementation of the UnitTest class.  We don't protect
        -:  906:// the methods under a mutex, as this class is not accessible by a
        -:  907:// user and the UnitTest class that delegates work to this class does
        -:  908:// proper locking.
        -:  909:class GTEST_API_ UnitTestImpl {
        -:  910: public:
        -:  911:  explicit UnitTestImpl(UnitTest* parent);
        -:  912:  virtual ~UnitTestImpl();
        -:  913:
        -:  914:  // There are two different ways to register your own TestPartResultReporter.
        -:  915:  // You can register your own repoter to listen either only for test results
        -:  916:  // from the current thread or for results from all threads.
        -:  917:  // By default, each per-thread test result repoter just passes a new
        -:  918:  // TestPartResult to the global test result reporter, which registers the
        -:  919:  // test part result for the currently running test.
        -:  920:
        -:  921:  // Returns the global test part result reporter.
        -:  922:  TestPartResultReporterInterface* GetGlobalTestPartResultReporter();
        -:  923:
        -:  924:  // Sets the global test part result reporter.
        -:  925:  void SetGlobalTestPartResultReporter(
        -:  926:      TestPartResultReporterInterface* reporter);
        -:  927:
        -:  928:  // Returns the test part result reporter for the current thread.
        -:  929:  TestPartResultReporterInterface* GetTestPartResultReporterForCurrentThread();
        -:  930:
        -:  931:  // Sets the test part result reporter for the current thread.
        -:  932:  void SetTestPartResultReporterForCurrentThread(
        -:  933:      TestPartResultReporterInterface* reporter);
        -:  934:
        -:  935:  // Gets the number of successful test cases.
        -:  936:  int successful_test_case_count() const;
        -:  937:
        -:  938:  // Gets the number of failed test cases.
        -:  939:  int failed_test_case_count() const;
        -:  940:
        -:  941:  // Gets the number of all test cases.
        -:  942:  int total_test_case_count() const;
        -:  943:
        -:  944:  // Gets the number of all test cases that contain at least one test
        -:  945:  // that should run.
        -:  946:  int test_case_to_run_count() const;
        -:  947:
        -:  948:  // Gets the number of successful tests.
        -:  949:  int successful_test_count() const;
        -:  950:
        -:  951:  // Gets the number of failed tests.
        -:  952:  int failed_test_count() const;
        -:  953:
        -:  954:  // Gets the number of disabled tests that will be reported in the XML report.
        -:  955:  int reportable_disabled_test_count() const;
        -:  956:
        -:  957:  // Gets the number of disabled tests.
        -:  958:  int disabled_test_count() const;
        -:  959:
        -:  960:  // Gets the number of tests to be printed in the XML report.
        -:  961:  int reportable_test_count() const;
        -:  962:
        -:  963:  // Gets the number of all tests.
        -:  964:  int total_test_count() const;
        -:  965:
        -:  966:  // Gets the number of tests that should run.
        -:  967:  int test_to_run_count() const;
        -:  968:
        -:  969:  // Gets the time of the test program start, in ms from the start of the
        -:  970:  // UNIX epoch.
function _ZNK7testing8internal12UnitTestImpl15start_timestampEv called 0 returned 0% blocks executed 0%
    #####:  971:  TimeInMillis start_timestamp() const { return start_timestamp_; }
    %%%%%:  971-block  0
        -:  972:
        -:  973:  // Gets the elapsed time, in milliseconds.
function _ZNK7testing8internal12UnitTestImpl12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1:  974:  TimeInMillis elapsed_time() const { return elapsed_time_; }
        1:  974-block  0
        -:  975:
        -:  976:  // Returns true iff the unit test passed (i.e. all test cases passed).
function _ZNK7testing8internal12UnitTestImpl6PassedEv called 2 returned 100% blocks executed 100%
        2:  977:  bool Passed() const { return !Failed(); }
        2:  977-block  0
call    0 returned 2
        -:  978:
        -:  979:  // Returns true iff the unit test failed (i.e. some test case failed
        -:  980:  // or something outside of all tests failed).
function _ZNK7testing8internal12UnitTestImpl6FailedEv called 2 returned 100% blocks executed 56%
        2:  981:  bool Failed() const {
       2*:  982:    return failed_test_case_count() > 0 || ad_hoc_test_result()->Failed();
        2:  982-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%:  982-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        2:  982-block  2
    %%%%%:  982-block  3
        2:  982-block  4
        -:  983:  }
        -:  984:
        -:  985:  // Gets the i-th test case among all the test cases. i can range from 0 to
        -:  986:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8internal12UnitTestImpl11GetTestCaseEi called 2 returned 100% blocks executed 86%
        2:  987:  const TestCase* GetTestCase(int i) const {
        2:  988:    const int index = GetElementOr(test_case_indices_, i, -1);
        2:  988-block  0
call    0 returned 2
       2*:  989:    return index < 0 ? NULL : test_cases_[i];
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  989-block  0
call    2 returned 2
    %%%%%:  989-block  1
        2:  989-block  2
        -:  990:  }
        -:  991:
        -:  992:  // Gets the i-th test case among all the test cases. i can range from 0 to
        -:  993:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8internal12UnitTestImpl18GetMutableTestCaseEi called 2 returned 100% blocks executed 86%
        2:  994:  TestCase* GetMutableTestCase(int i) {
        2:  995:    const int index = GetElementOr(test_case_indices_, i, -1);
        2:  995-block  0
call    0 returned 2
       2*:  996:    return index < 0 ? NULL : test_cases_[index];
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  996-block  0
call    2 returned 2
    %%%%%:  996-block  1
        2:  996-block  2
        -:  997:  }
        -:  998:
        -:  999:  // Provides access to the event listener list.
function _ZN7testing8internal12UnitTestImpl9listenersEv called 15 returned 100% blocks executed 100%
       15: 1000:  TestEventListeners* listeners() { return &listeners_; }
       15: 1000-block  0
        -: 1001:
        -: 1002:  // Returns the TestResult for the test that's currently running, or
        -: 1003:  // the TestResult for the ad hoc test if no test is running.
        -: 1004:  TestResult* current_test_result();
        -: 1005:
        -: 1006:  // Returns the TestResult for the ad hoc test.
function _ZNK7testing8internal12UnitTestImpl18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 1007:  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }
    %%%%%: 1007-block  0
        -: 1008:
        -: 1009:  // Sets the OS stack trace getter.
        -: 1010:  //
        -: 1011:  // Does nothing if the input and the current OS stack trace getter
        -: 1012:  // are the same; otherwise, deletes the old getter and makes the
        -: 1013:  // input the current getter.
        -: 1014:  void set_os_stack_trace_getter(OsStackTraceGetterInterface* getter);
        -: 1015:
        -: 1016:  // Returns the current OS stack trace getter if it is not NULL;
        -: 1017:  // otherwise, creates an OsStackTraceGetter, makes it the current
        -: 1018:  // getter, and returns it.
        -: 1019:  OsStackTraceGetterInterface* os_stack_trace_getter();
        -: 1020:
        -: 1021:  // Returns the current OS stack trace as an std::string.
        -: 1022:  //
        -: 1023:  // The maximum number of stack frames to be included is specified by
        -: 1024:  // the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1025:  // specifies the number of top frames to be skipped, which doesn't
        -: 1026:  // count against the number of frames to be included.
        -: 1027:  //
        -: 1028:  // For example, if Foo() calls Bar(), which in turn calls
        -: 1029:  // CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1030:  // trace but Bar() and CurrentOsStackTraceExceptTop() won't.
        -: 1031:  std::string CurrentOsStackTraceExceptTop(int skip_count) GTEST_NO_INLINE_;
        -: 1032:
        -: 1033:  // Finds and returns a TestCase with the given name.  If one doesn't
        -: 1034:  // exist, creates one and returns it.
        -: 1035:  //
        -: 1036:  // Arguments:
        -: 1037:  //
        -: 1038:  //   test_case_name: name of the test case
        -: 1039:  //   type_param:     the name of the test's type parameter, or NULL if
        -: 1040:  //                   this is not a typed or a type-parameterized test.
        -: 1041:  //   set_up_tc:      pointer to the function that sets up the test case
        -: 1042:  //   tear_down_tc:   pointer to the function that tears down the test case
        -: 1043:  TestCase* GetTestCase(const char* test_case_name,
        -: 1044:                        const char* type_param,
        -: 1045:                        Test::SetUpTestCaseFunc set_up_tc,
        -: 1046:                        Test::TearDownTestCaseFunc tear_down_tc);
        -: 1047:
        -: 1048:  // Adds a TestInfo to the unit test.
        -: 1049:  //
        -: 1050:  // Arguments:
        -: 1051:  //
        -: 1052:  //   set_up_tc:    pointer to the function that sets up the test case
        -: 1053:  //   tear_down_tc: pointer to the function that tears down the test case
        -: 1054:  //   test_info:    the TestInfo object
function _ZN7testing8internal12UnitTestImpl11AddTestInfoEPFvvES3_PNS_8TestInfoE called 10 returned 100% blocks executed 58%
       10: 1055:  void AddTestInfo(Test::SetUpTestCaseFunc set_up_tc,
        -: 1056:                   Test::TearDownTestCaseFunc tear_down_tc,
        -: 1057:                   TestInfo* test_info) {
        -: 1058:    // In order to support thread-safe death tests, we need to
        -: 1059:    // remember the original working directory when the test program
        -: 1060:    // was first invoked.  We cannot do this in RUN_ALL_TESTS(), as
        -: 1061:    // the user may have changed the current directory before calling
        -: 1062:    // RUN_ALL_TESTS().  Therefore we capture the current directory in
        -: 1063:    // AddTestInfo(), which is called to register a TEST or TEST_F
        -: 1064:    // before main() is reached.
       10: 1065:    if (original_working_dir_.IsEmpty()) {
       10: 1065-block  0
call    0 returned 10
branch  1 taken 1 (fallthrough)
branch  2 taken 9
        1: 1066:      original_working_dir_.Set(FilePath::GetCurrentDir());
        1: 1066-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 1066-block  1
call    4 returned 1
    $$$$$: 1066-block  2
call    5 never executed
    $$$$$: 1066-block  3
call    6 never executed
       1*: 1067:      GTEST_CHECK_(!original_working_dir_.IsEmpty())
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 1067-block  0
call    4 never executed
call    5 never executed
    %%%%%: 1067-block  1
call    6 never executed
    $$$$$: 1067-block  2
call    7 never executed
    #####: 1068:          << "Failed to get the current working directory.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1068-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1069:    }
        -: 1070:
        -: 1071:    GetTestCase(test_info->test_case_name(),
        -: 1072:                test_info->type_param(),
        -: 1073:                set_up_tc,
       10: 1074:                tear_down_tc)->AddTestInfo(test_info);
       10: 1074-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
call    3 returned 10
       10: 1075:  }
        -: 1076:
        -: 1077:  // Returns ParameterizedTestCaseRegistry object used to keep track of
        -: 1078:  // value-parameterized tests and instantiate and register them.
function _ZN7testing8internal12UnitTestImpl27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 1079:  internal::ParameterizedTestCaseRegistry& parameterized_test_registry() {
    #####: 1080:    return parameterized_test_registry_;
    %%%%%: 1080-block  0
        -: 1081:  }
        -: 1082:
        -: 1083:  // Sets the TestCase object for the test that's currently running.
function _ZN7testing8internal12UnitTestImpl21set_current_test_caseEPNS_8TestCaseE called 4 returned 100% blocks executed 100%
        4: 1084:  void set_current_test_case(TestCase* a_current_test_case) {
        4: 1085:    current_test_case_ = a_current_test_case;
        4: 1086:  }
        -: 1087:
        -: 1088:  // Sets the TestInfo object for the test that's currently running.  If
        -: 1089:  // current_test_info is NULL, the assertion results will be stored in
        -: 1090:  // ad_hoc_test_result_.
function _ZN7testing8internal12UnitTestImpl21set_current_test_infoEPNS_8TestInfoE called 20 returned 100% blocks executed 100%
       20: 1091:  void set_current_test_info(TestInfo* a_current_test_info) {
       20: 1092:    current_test_info_ = a_current_test_info;
       20: 1093:  }
        -: 1094:
        -: 1095:  // Registers all parameterized tests defined using TEST_P and
        -: 1096:  // INSTANTIATE_TEST_CASE_P, creating regular tests for each test/parameter
        -: 1097:  // combination. This method can be called more then once; it has guards
        -: 1098:  // protecting from registering the tests more then once.  If
        -: 1099:  // value-parameterized tests are disabled, RegisterParameterizedTests is
        -: 1100:  // present but does nothing.
        -: 1101:  void RegisterParameterizedTests();
        -: 1102:
        -: 1103:  // Runs all tests in this UnitTest object, prints the result, and
        -: 1104:  // returns true if all tests are successful.  If any exception is
        -: 1105:  // thrown during a test, this test is considered to be failed, but
        -: 1106:  // the rest of the tests will still be run.
        -: 1107:  bool RunAllTests();
        -: 1108:
        -: 1109:  // Clears the results of all tests, except the ad hoc tests.
function _ZN7testing8internal12UnitTestImpl23ClearNonAdHocTestResultEv called 1 returned 100% blocks executed 100%
        1: 1110:  void ClearNonAdHocTestResult() {
        1: 1111:    ForEach(test_cases_, TestCase::ClearTestCaseResult);
        1: 1111-block  0
call    0 returned 1
        1: 1112:  }
        -: 1113:
        -: 1114:  // Clears the results of ad-hoc test assertions.
        -: 1115:  void ClearAdHocTestResult() {
        -: 1116:    ad_hoc_test_result_.Clear();
        -: 1117:  }
        -: 1118:
        -: 1119:  // Adds a TestProperty to the current TestResult object when invoked in a
        -: 1120:  // context of a test or a test case, or to the global property set. If the
        -: 1121:  // result already contains a property with the same key, the value will be
        -: 1122:  // updated.
        -: 1123:  void RecordProperty(const TestProperty& test_property);
        -: 1124:
        -: 1125:  enum ReactionToSharding {
        -: 1126:    HONOR_SHARDING_PROTOCOL,
        -: 1127:    IGNORE_SHARDING_PROTOCOL
        -: 1128:  };
        -: 1129:
        -: 1130:  // Matches the full name of each test against the user-specified
        -: 1131:  // filter to decide whether the test should run, then records the
        -: 1132:  // result in each TestCase and TestInfo object.
        -: 1133:  // If shard_tests == HONOR_SHARDING_PROTOCOL, further filters tests
        -: 1134:  // based on sharding variables in the environment.
        -: 1135:  // Returns the number of tests that should run.
        -: 1136:  int FilterTests(ReactionToSharding shard_tests);
        -: 1137:
        -: 1138:  // Prints the names of the tests matching the user-specified filter flag.
        -: 1139:  void ListTestsMatchingFilter();
        -: 1140:
function _ZNK7testing8internal12UnitTestImpl17current_test_caseEv called 10 returned 100% blocks executed 100%
       10: 1141:  const TestCase* current_test_case() const { return current_test_case_; }
       10: 1141-block  0
function _ZN7testing8internal12UnitTestImpl17current_test_infoEv called 10 returned 100% blocks executed 100%
       10: 1142:  TestInfo* current_test_info() { return current_test_info_; }
       10: 1142-block  0
function _ZNK7testing8internal12UnitTestImpl17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 1143:  const TestInfo* current_test_info() const { return current_test_info_; }
    %%%%%: 1143-block  0
        -: 1144:
        -: 1145:  // Returns the vector of environments that need to be set-up/torn-down
        -: 1146:  // before/after the tests are run.
function _ZN7testing8internal12UnitTestImpl12environmentsEv called 0 returned 0% blocks executed 0%
    #####: 1147:  std::vector<Environment*>& environments() { return environments_; }
    %%%%%: 1147-block  0
        -: 1148:
        -: 1149:  // Getters for the per-thread Google Test trace stack.
function _ZN7testing8internal12UnitTestImpl17gtest_trace_stackEv called 1 returned 100% blocks executed 100%
        1: 1150:  std::vector<TraceInfo>& gtest_trace_stack() {
        1: 1151:    return *(gtest_trace_stack_.pointer());
        1: 1151-block  0
call    0 returned 1
        -: 1152:  }
        -: 1153:  const std::vector<TraceInfo>& gtest_trace_stack() const {
        -: 1154:    return gtest_trace_stack_.get();
        -: 1155:  }
        -: 1156:
        -: 1157:#if GTEST_HAS_DEATH_TEST
function _ZN7testing8internal12UnitTestImpl34InitDeathTestSubprocessControlInfoEv called 1 returned 100% blocks executed 100%
        1: 1158:  void InitDeathTestSubprocessControlInfo() {
        1: 1159:    internal_run_death_test_flag_.reset(ParseInternalRunDeathTestFlag());
        1: 1159-block  0
call    0 returned 1
call    1 returned 1
        1: 1160:  }
        -: 1161:  // Returns a pointer to the parsed --gtest_internal_run_death_test
        -: 1162:  // flag, or NULL if that flag was not specified.
        -: 1163:  // This information is useful only in a death test child process.
        -: 1164:  // Must not be called before a call to InitGoogleTest.
function _ZNK7testing8internal12UnitTestImpl28internal_run_death_test_flagEv called 0 returned 0% blocks executed 0%
    #####: 1165:  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {
    #####: 1166:    return internal_run_death_test_flag_.get();
    %%%%%: 1166-block  0
call    0 never executed
        -: 1167:  }
        -: 1168:
        -: 1169:  // Returns a pointer to the current death test factory.
function _ZN7testing8internal12UnitTestImpl18death_test_factoryEv called 0 returned 0% blocks executed 0%
    #####: 1170:  internal::DeathTestFactory* death_test_factory() {
    #####: 1171:    return death_test_factory_.get();
    %%%%%: 1171-block  0
call    0 never executed
        -: 1172:  }
        -: 1173:
        -: 1174:  void SuppressTestEventsIfInSubprocess();
        -: 1175:
        -: 1176:  friend class ReplaceDeathTestFactory;
        -: 1177:#endif  // GTEST_HAS_DEATH_TEST
        -: 1178:
        -: 1179:  // Initializes the event listener performing XML output as specified by
        -: 1180:  // UnitTestOptions. Must not be called before InitGoogleTest.
        -: 1181:  void ConfigureXmlOutput();
        -: 1182:
        -: 1183:#if GTEST_CAN_STREAM_RESULTS_
        -: 1184:  // Initializes the event listener for streaming test results to a socket.
        -: 1185:  // Must not be called before InitGoogleTest.
        -: 1186:  void ConfigureStreamingOutput();
        -: 1187:#endif
        -: 1188:
        -: 1189:  // Performs initialization dependent upon flag values obtained in
        -: 1190:  // ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 1191:  // ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 1192:  // this function is also called from RunAllTests.  Since this function can be
        -: 1193:  // called more than once, it has to be idempotent.
        -: 1194:  void PostFlagParsingInit();
        -: 1195:
        -: 1196:  // Gets the random seed used at the start of the current test iteration.
function _ZNK7testing8internal12UnitTestImpl11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 1197:  int random_seed() const { return random_seed_; }
    %%%%%: 1197-block  0
        -: 1198:
        -: 1199:  // Gets the random number generator.
function _ZN7testing8internal12UnitTestImpl6randomEv called 0 returned 0% blocks executed 0%
    #####: 1200:  internal::Random* random() { return &random_; }
    %%%%%: 1200-block  0
        -: 1201:
        -: 1202:  // Shuffles all test cases, and the tests within each test case,
        -: 1203:  // making sure that death tests are still run first.
        -: 1204:  void ShuffleTests();
        -: 1205:
        -: 1206:  // Restores the test cases and tests to their order before the first shuffle.
        -: 1207:  void UnshuffleTests();
        -: 1208:
        -: 1209:  // Returns the value of GTEST_FLAG(catch_exceptions) at the moment
        -: 1210:  // UnitTest::Run() starts.
function _ZNK7testing8internal12UnitTestImpl16catch_exceptionsEv called 55 returned 100% blocks executed 100%
       55: 1211:  bool catch_exceptions() const { return catch_exceptions_; }
       55: 1211-block  0
        -: 1212:
        -: 1213: private:
        -: 1214:  friend class ::testing::UnitTest;
        -: 1215:
        -: 1216:  // Used by UnitTest::Run() to capture the state of
        -: 1217:  // GTEST_FLAG(catch_exceptions) at the moment it starts.
function _ZN7testing8internal12UnitTestImpl20set_catch_exceptionsEb called 1 returned 100% blocks executed 100%
        1: 1218:  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }
        -: 1219:
        -: 1220:  // The UnitTest object that owns this implementation object.
        -: 1221:  UnitTest* const parent_;
        -: 1222:
        -: 1223:  // The working directory when the first TEST() or TEST_F() was
        -: 1224:  // executed.
        -: 1225:  internal::FilePath original_working_dir_;
        -: 1226:
        -: 1227:  // The default test part result reporters.
        -: 1228:  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;
        -: 1229:  DefaultPerThreadTestPartResultReporter
        -: 1230:      default_per_thread_test_part_result_reporter_;
        -: 1231:
        -: 1232:  // Points to (but doesn't own) the global test part result reporter.
        -: 1233:  TestPartResultReporterInterface* global_test_part_result_repoter_;
        -: 1234:
        -: 1235:  // Protects read and write access to global_test_part_result_reporter_.
        -: 1236:  internal::Mutex global_test_part_result_reporter_mutex_;
        -: 1237:
        -: 1238:  // Points to (but doesn't own) the per-thread test part result reporter.
        -: 1239:  internal::ThreadLocal<TestPartResultReporterInterface*>
        -: 1240:      per_thread_test_part_result_reporter_;
        -: 1241:
        -: 1242:  // The vector of environments that need to be set-up/torn-down
        -: 1243:  // before/after the tests are run.
        -: 1244:  std::vector<Environment*> environments_;
        -: 1245:
        -: 1246:  // The vector of TestCases in their original order.  It owns the
        -: 1247:  // elements in the vector.
        -: 1248:  std::vector<TestCase*> test_cases_;
        -: 1249:
        -: 1250:  // Provides a level of indirection for the test case list to allow
        -: 1251:  // easy shuffling and restoring the test case order.  The i-th
        -: 1252:  // element of this vector is the index of the i-th test case in the
        -: 1253:  // shuffled order.
        -: 1254:  std::vector<int> test_case_indices_;
        -: 1255:
        -: 1256:  // ParameterizedTestRegistry object used to register value-parameterized
        -: 1257:  // tests.
        -: 1258:  internal::ParameterizedTestCaseRegistry parameterized_test_registry_;
        -: 1259:
        -: 1260:  // Indicates whether RegisterParameterizedTests() has been called already.
        -: 1261:  bool parameterized_tests_registered_;
        -: 1262:
        -: 1263:  // Index of the last death test case registered.  Initially -1.
        -: 1264:  int last_death_test_case_;
        -: 1265:
        -: 1266:  // This points to the TestCase for the currently running test.  It
        -: 1267:  // changes as Google Test goes through one test case after another.
        -: 1268:  // When no test is running, this is set to NULL and Google Test
        -: 1269:  // stores assertion results in ad_hoc_test_result_.  Initially NULL.
        -: 1270:  TestCase* current_test_case_;
        -: 1271:
        -: 1272:  // This points to the TestInfo for the currently running test.  It
        -: 1273:  // changes as Google Test goes through one test after another.  When
        -: 1274:  // no test is running, this is set to NULL and Google Test stores
        -: 1275:  // assertion results in ad_hoc_test_result_.  Initially NULL.
        -: 1276:  TestInfo* current_test_info_;
        -: 1277:
        -: 1278:  // Normally, a user only writes assertions inside a TEST or TEST_F,
        -: 1279:  // or inside a function called by a TEST or TEST_F.  Since Google
        -: 1280:  // Test keeps track of which test is current running, it can
        -: 1281:  // associate such an assertion with the test it belongs to.
        -: 1282:  //
        -: 1283:  // If an assertion is encountered when no TEST or TEST_F is running,
        -: 1284:  // Google Test attributes the assertion result to an imaginary "ad hoc"
        -: 1285:  // test, and records the result in ad_hoc_test_result_.
        -: 1286:  TestResult ad_hoc_test_result_;
        -: 1287:
        -: 1288:  // The list of event listeners that can be used to track events inside
        -: 1289:  // Google Test.
        -: 1290:  TestEventListeners listeners_;
        -: 1291:
        -: 1292:  // The OS stack trace getter.  Will be deleted when the UnitTest
        -: 1293:  // object is destructed.  By default, an OsStackTraceGetter is used,
        -: 1294:  // but the user can set this field to use a custom getter if that is
        -: 1295:  // desired.
        -: 1296:  OsStackTraceGetterInterface* os_stack_trace_getter_;
        -: 1297:
        -: 1298:  // True iff PostFlagParsingInit() has been called.
        -: 1299:  bool post_flag_parse_init_performed_;
        -: 1300:
        -: 1301:  // The random number seed used at the beginning of the test run.
        -: 1302:  int random_seed_;
        -: 1303:
        -: 1304:  // Our random number generator.
        -: 1305:  internal::Random random_;
        -: 1306:
        -: 1307:  // The time of the test program start, in ms from the start of the
        -: 1308:  // UNIX epoch.
        -: 1309:  TimeInMillis start_timestamp_;
        -: 1310:
        -: 1311:  // How long the test took to run, in milliseconds.
        -: 1312:  TimeInMillis elapsed_time_;
        -: 1313:
        -: 1314:#if GTEST_HAS_DEATH_TEST
        -: 1315:  // The decomposed components of the gtest_internal_run_death_test flag,
        -: 1316:  // parsed when RUN_ALL_TESTS is called.
        -: 1317:  internal::scoped_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;
        -: 1318:  internal::scoped_ptr<internal::DeathTestFactory> death_test_factory_;
        -: 1319:#endif  // GTEST_HAS_DEATH_TEST
        -: 1320:
        -: 1321:  // A per-thread stack of traces created by the SCOPED_TRACE() macro.
        -: 1322:  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;
        -: 1323:
        -: 1324:  // The value of GTEST_FLAG(catch_exceptions) at the moment RunAllTests()
        -: 1325:  // starts.
        -: 1326:  bool catch_exceptions_;
        -: 1327:
        -: 1328:  GTEST_DISALLOW_COPY_AND_ASSIGN_(UnitTestImpl);
        -: 1329:};  // class UnitTestImpl
        -: 1330:
        -: 1331:// Convenience function for accessing the global UnitTest
        -: 1332:// implementation object.
function _ZN7testing8internal15GetUnitTestImplEv called 119 returned 100% blocks executed 100%
      119: 1333:inline UnitTestImpl* GetUnitTestImpl() {
      119: 1334:  return UnitTest::GetInstance()->impl();
      119: 1334-block  0
call    0 returned 119
call    1 returned 119
        -: 1335:}
        -: 1336:
        -: 1337:#if GTEST_USES_SIMPLE_RE
        -: 1338:
        -: 1339:// Internal helper functions for implementing the simple regular
        -: 1340:// expression matcher.
        -: 1341:GTEST_API_ bool IsInSet(char ch, const char* str);
        -: 1342:GTEST_API_ bool IsAsciiDigit(char ch);
        -: 1343:GTEST_API_ bool IsAsciiPunct(char ch);
        -: 1344:GTEST_API_ bool IsRepeat(char ch);
        -: 1345:GTEST_API_ bool IsAsciiWhiteSpace(char ch);
        -: 1346:GTEST_API_ bool IsAsciiWordChar(char ch);
        -: 1347:GTEST_API_ bool IsValidEscape(char ch);
        -: 1348:GTEST_API_ bool AtomMatchesChar(bool escaped, char pattern, char ch);
        -: 1349:GTEST_API_ bool ValidateRegex(const char* regex);
        -: 1350:GTEST_API_ bool MatchRegexAtHead(const char* regex, const char* str);
        -: 1351:GTEST_API_ bool MatchRepetitionAndRegexAtHead(
        -: 1352:    bool escaped, char ch, char repeat, const char* regex, const char* str);
        -: 1353:GTEST_API_ bool MatchRegexAnywhere(const char* regex, const char* str);
        -: 1354:
        -: 1355:#endif  // GTEST_USES_SIMPLE_RE
        -: 1356:
        -: 1357:// Parses the command line for Google Test flags, without initializing
        -: 1358:// other parts of Google Test.
        -: 1359:GTEST_API_ void ParseGoogleTestFlagsOnly(int* argc, char** argv);
        -: 1360:GTEST_API_ void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv);
        -: 1361:
        -: 1362:#if GTEST_HAS_DEATH_TEST
        -: 1363:
        -: 1364:// Returns the message describing the last system error, regardless of the
        -: 1365:// platform.
        -: 1366:GTEST_API_ std::string GetLastErrnoDescription();
        -: 1367:
        -: 1368:// Attempts to parse a string into a positive integer pointed to by the
        -: 1369:// number parameter.  Returns true if that is possible.
        -: 1370:// GTEST_HAS_DEATH_TEST implies that we have ::std::string, so we can use
        -: 1371:// it here.
        -: 1372:template <typename Integer>
function _ZN7testing8internal18ParseNaturalNumberIiEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPT_ called 0 returned 0% blocks executed 0%
    #####: 1373:bool ParseNaturalNumber(const ::std::string& str, Integer* number) {
        -: 1374:  // Fail fast if the given string does not begin with a digit;
        -: 1375:  // this bypasses strtoXXX's "optional leading whitespace and plus
        -: 1376:  // or minus sign" semantics, which are undesirable here.
    #####: 1377:  if (str.empty() || !IsDigit(str[0])) {
    %%%%%: 1377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1377-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1377-block  2
    %%%%%: 1377-block  3
    %%%%%: 1377-block  4
branch  7 never executed
branch  8 never executed
    #####: 1378:    return false;
    %%%%%: 1378-block  0
        -: 1379:  }
    #####: 1380:  errno = 0;
        -: 1381:
        -: 1382:  char* end;
        -: 1383:  // BiggestConvertible is the largest integer type that system-provided
        -: 1384:  // string-to-number conversion routines can return.
        -: 1385:
        -: 1386:# if GTEST_OS_WINDOWS && !defined(__GNUC__)
        -: 1387:
        -: 1388:  // MSVC and C++ Builder define __int64 instead of the standard long long.
        -: 1389:  typedef unsigned __int64 BiggestConvertible;
        -: 1390:  const BiggestConvertible parsed = _strtoui64(str.c_str(), &end, 10);
        -: 1391:
        -: 1392:# else
        -: 1393:
        -: 1394:  typedef unsigned long long BiggestConvertible;  // NOLINT
    #####: 1395:  const BiggestConvertible parsed = strtoull(str.c_str(), &end, 10);
    %%%%%: 1395-block  0
call    0 never executed
call    1 never executed
        -: 1396:
        -: 1397:# endif  // GTEST_OS_WINDOWS && !defined(__GNUC__)
        -: 1398:
    #####: 1399:  const bool parse_success = *end == '\0' && errno == 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1399-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1399-block  1
    %%%%%: 1399-block  2
        -: 1400:
        -: 1401:  // FIXME: Convert this to compile time assertion when it is
        -: 1402:  // available.
    #####: 1403:  GTEST_CHECK_(sizeof(Integer) <= sizeof(parsed));
    %%%%%: 1403-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1403-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1403-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1403-block  3
call   10 never executed
    $$$$$: 1403-block  4
call   11 never executed
    $$$$$: 1403-block  5
        -: 1404:
    #####: 1405:  const Integer result = static_cast<Integer>(parsed);
    #####: 1406:  if (parse_success && static_cast<BiggestConvertible>(result) == parsed) {
    %%%%%: 1406-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1406-block  1
branch  2 never executed
branch  3 never executed
    #####: 1407:    *number = result;
    #####: 1408:    return true;
    %%%%%: 1408-block  0
        -: 1409:  }
    #####: 1410:  return false;
    %%%%%: 1410-block  0
        -: 1411:}
        -: 1412:#endif  // GTEST_HAS_DEATH_TEST
        -: 1413:
        -: 1414:// TestResult contains some private methods that should be hidden from
        -: 1415:// Google Test user but are required for testing. This class allow our tests
        -: 1416:// to access them.
        -: 1417://
        -: 1418:// This class is supplied only for the purpose of testing Google Test's own
        -: 1419:// constructs. Do not use it in user tests, either directly or indirectly.
        -: 1420:class TestResultAccessor {
        -: 1421: public:
        -: 1422:  static void RecordProperty(TestResult* test_result,
        -: 1423:                             const std::string& xml_element,
        -: 1424:                             const TestProperty& property) {
        -: 1425:    test_result->RecordProperty(xml_element, property);
        -: 1426:  }
        -: 1427:
        -: 1428:  static void ClearTestPartResults(TestResult* test_result) {
        -: 1429:    test_result->ClearTestPartResults();
        -: 1430:  }
        -: 1431:
        -: 1432:  static const std::vector<testing::TestPartResult>& test_part_results(
        -: 1433:      const TestResult& test_result) {
        -: 1434:    return test_result.test_part_results();
        -: 1435:  }
        -: 1436:};
        -: 1437:
        -: 1438:#if GTEST_CAN_STREAM_RESULTS_
        -: 1439:
        -: 1440:// Streams test results to the given port on the given host machine.
        -: 1441:class StreamingListener : public EmptyTestEventListener {
        -: 1442: public:
        -: 1443:  // Abstract base class for writing strings to a socket.
        -: 1444:  class AbstractSocketWriter {
        -: 1445:   public:
    #####: 1446:    virtual ~AbstractSocketWriter() {}
------------------
_ZN7testing8internal17StreamingListener20AbstractSocketWriterD0Ev:
function _ZN7testing8internal17StreamingListener20AbstractSocketWriterD0Ev called 0 returned 0% blocks executed 0%
    #####: 1446:    virtual ~AbstractSocketWriter() {}
    %%%%%: 1446-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17StreamingListener20AbstractSocketWriterD2Ev:
function _ZN7testing8internal17StreamingListener20AbstractSocketWriterD2Ev called 0 returned 0% blocks executed 0%
    #####: 1446:    virtual ~AbstractSocketWriter() {}
------------------
        -: 1447:
        -: 1448:    // Sends a string to the socket.
        -: 1449:    virtual void Send(const std::string& message) = 0;
        -: 1450:
        -: 1451:    // Closes the socket.
function _ZN7testing8internal17StreamingListener20AbstractSocketWriter15CloseConnectionEv called 0 returned 0% blocks executed 0%
    #####: 1452:    virtual void CloseConnection() {}
        -: 1453:
        -: 1454:    // Sends a string and a newline to the socket.
function _ZN7testing8internal17StreamingListener20AbstractSocketWriter6SendLnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1455:    void SendLn(const std::string& message) { Send(message + "\n"); }
    %%%%%: 1455-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1455-block  1
call    4 never executed
    $$$$$: 1455-block  2
call    5 never executed
        -: 1456:  };
        -: 1457:
        -: 1458:  // Concrete class for actually writing strings to a socket.
        -: 1459:  class SocketWriter : public AbstractSocketWriter {
        -: 1460:   public:
function _ZN7testing8internal17StreamingListener12SocketWriterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####: 1461:    SocketWriter(const std::string& host, const std::string& port)
    #####: 1462:        : sockfd_(-1), host_name_(host), port_num_(port) {
    %%%%%: 1462-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1462-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 1462-block  2
call    7 never executed
    $$$$$: 1462-block  3
call    8 never executed
    $$$$$: 1462-block  4
call    9 never executed
    #####: 1463:      MakeConnection();
    %%%%%: 1463-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1464:    }
    %%%%%: 1464-block  0
        -: 1465:
    #####: 1466:    virtual ~SocketWriter() {
    #####: 1467:      if (sockfd_ != -1)
    #####: 1468:        CloseConnection();
    #####: 1469:    }
------------------
_ZN7testing8internal17StreamingListener12SocketWriterD0Ev:
function _ZN7testing8internal17StreamingListener12SocketWriterD0Ev called 0 returned 0% blocks executed 0%
    #####: 1466:    virtual ~SocketWriter() {
        -: 1467:      if (sockfd_ != -1)
        -: 1468:        CloseConnection();
    #####: 1469:    }
    %%%%%: 1469-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17StreamingListener12SocketWriterD2Ev:
function _ZN7testing8internal17StreamingListener12SocketWriterD2Ev called 0 returned 0% blocks executed 0%
    #####: 1466:    virtual ~SocketWriter() {
    %%%%%: 1466-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1467:      if (sockfd_ != -1)
    %%%%%: 1467-block  0
branch  0 never executed
branch  1 never executed
    #####: 1468:        CloseConnection();
    %%%%%: 1468-block  0
call    0 never executed
    #####: 1469:    }
------------------
        -: 1470:
        -: 1471:    // Sends a string to the socket.
function _ZN7testing8internal17StreamingListener12SocketWriter4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1472:    virtual void Send(const std::string& message) {
    #####: 1473:      GTEST_CHECK_(sockfd_ != -1)
    %%%%%: 1473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1473-block  1
call    3 never executed
call    4 never executed
    %%%%%: 1473-block  2
call    5 never executed
    $$$$$: 1473-block  3
call    6 never executed
    $$$$$: 1473-block  4
call    7 never executed
    #####: 1474:          << "Send() can be called only when there is a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1474-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1475:
    #####: 1476:      const int len = static_cast<int>(message.length());
    %%%%%: 1476-block  0
call    0 never executed
    #####: 1477:      if (write(sockfd_, message.c_str(), len) != len) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1478:        GTEST_LOG_(WARNING)
    %%%%%: 1478-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1478-block  1
call    2 never executed
    $$$$$: 1478-block  2
call    3 never executed
        -: 1479:            << "stream_result_to: failed to stream to "
    #####: 1480:            << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1480-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1480-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1480-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 1481:      }
    #####: 1482:    }
    %%%%%: 1482-block  0
        -: 1483:
        -: 1484:   private:
        -: 1485:    // Creates a client socket and connects to the server.
        -: 1486:    void MakeConnection();
        -: 1487:
        -: 1488:    // Closes the socket.
function _ZN7testing8internal17StreamingListener12SocketWriter15CloseConnectionEv called 0 returned 0% blocks executed 0%
    #####: 1489:    void CloseConnection() {
    #####: 1490:      GTEST_CHECK_(sockfd_ != -1)
    %%%%%: 1490-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1490-block  1
call    3 never executed
call    4 never executed
    %%%%%: 1490-block  2
call    5 never executed
    $$$$$: 1490-block  3
call    6 never executed
    #####: 1491:          << "CloseConnection() can be called only when there is a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1491-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1492:
    #####: 1493:      close(sockfd_);
    %%%%%: 1493-block  0
call    0 never executed
    #####: 1494:      sockfd_ = -1;
    #####: 1495:    }
        -: 1496:
        -: 1497:    int sockfd_;  // socket file descriptor
        -: 1498:    const std::string host_name_;
        -: 1499:    const std::string port_num_;
        -: 1500:
        -: 1501:    GTEST_DISALLOW_COPY_AND_ASSIGN_(SocketWriter);
        -: 1502:  };  // class SocketWriter
        -: 1503:
        -: 1504:  // Escapes '=', '&', '%', and '\n' characters in str as "%xx".
        -: 1505:  static std::string UrlEncode(const char* str);
        -: 1506:
function _ZN7testing8internal17StreamingListenerC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1507:  StreamingListener(const std::string& host, const std::string& port)
    #####: 1508:      : socket_writer_(new SocketWriter(host, port)) {
    %%%%%: 1508-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1508-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1508-block  2
call    7 never executed
    $$$$$: 1508-block  3
call    8 never executed
    $$$$$: 1508-block  4
call    9 never executed
    $$$$$: 1508-block  5
call   10 never executed
    #####: 1509:    Start();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1510:  }
    %%%%%: 1510-block  0
        -: 1511:
        -: 1512:  explicit StreamingListener(AbstractSocketWriter* socket_writer)
        -: 1513:      : socket_writer_(socket_writer) { Start(); }
        -: 1514:
function _ZN7testing8internal17StreamingListener18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 1515:  void OnTestProgramStart(const UnitTest& /* unit_test */) {
    #####: 1516:    SendLn("event=TestProgramStart");
    %%%%%: 1516-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1516-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1516-block  2
call    7 never executed
call    8 never executed
    $$$$$: 1516-block  3
call    9 never executed
    $$$$$: 1516-block  4
    $$$$$: 1516-block  5
call   10 never executed
    #####: 1517:  }
        -: 1518:
function _ZN7testing8internal17StreamingListener16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 1519:  void OnTestProgramEnd(const UnitTest& unit_test) {
        -: 1520:    // Note that Google Test current only report elapsed time for each
        -: 1521:    // test iteration, not for the entire test program.
    #####: 1522:    SendLn("event=TestProgramEnd&passed=" + FormatBool(unit_test.Passed()));
    %%%%%: 1522-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1522-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1522-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1522-block  3
call   10 never executed
    $$$$$: 1522-block  4
    $$$$$: 1522-block  5
call   11 never executed
        -: 1523:
        -: 1524:    // Notify the streaming server to stop.
    #####: 1525:    socket_writer_->CloseConnection();
call    0 never executed
call    1 never executed
    #####: 1526:  }
        -: 1527:
function _ZN7testing8internal17StreamingListener20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 1528:  void OnTestIterationStart(const UnitTest& /* unit_test */, int iteration) {
    #####: 1529:    SendLn("event=TestIterationStart&iteration=" +
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1529-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1529-block  1
call    6 never executed
    $$$$$: 1529-block  2
call    7 never executed
    $$$$$: 1529-block  3
    #####: 1530:           StreamableToString(iteration));
    %%%%%: 1530-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1530-block  1
call    2 never executed
    #####: 1531:  }
        -: 1532:
function _ZN7testing8internal17StreamingListener18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 1533:  void OnTestIterationEnd(const UnitTest& unit_test, int /* iteration */) {
    #####: 1534:    SendLn("event=TestIterationEnd&passed=" +
    %%%%%: 1534-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1534-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1534-block  2
call    6 never executed
    $$$$$: 1534-block  3
    #####: 1535:           FormatBool(unit_test.Passed()) + "&elapsed_time=" +
    %%%%%: 1535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1535-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1535-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1535-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 1535-block  4
call   15 never executed
    $$$$$: 1535-block  5
    $$$$$: 1535-block  6
call   16 never executed
    $$$$$: 1535-block  7
    $$$$$: 1535-block  8
call   17 never executed
    $$$$$: 1535-block  9
    #####: 1536:           StreamableToString(unit_test.elapsed_time()) + "ms");
    %%%%%: 1536-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1536-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1536-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 1536-block  3
call   10 never executed
    $$$$$: 1536-block  4
    $$$$$: 1536-block  5
call   11 never executed
    $$$$$: 1536-block  6
    #####: 1537:  }
        -: 1538:
function _ZN7testing8internal17StreamingListener15OnTestCaseStartERKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 1539:  void OnTestCaseStart(const TestCase& test_case) {
    #####: 1540:    SendLn(std::string("event=TestCaseStart&name=") + test_case.name());
    %%%%%: 1540-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1540-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1540-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1540-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1540-block  4
call   14 never executed
    $$$$$: 1540-block  5
    $$$$$: 1540-block  6
call   15 never executed
    $$$$$: 1540-block  7
    $$$$$: 1540-block  8
call   16 never executed
    #####: 1541:  }
        -: 1542:
function _ZN7testing8internal17StreamingListener13OnTestCaseEndERKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 1543:  void OnTestCaseEnd(const TestCase& test_case) {
    #####: 1544:    SendLn("event=TestCaseEnd&passed=" + FormatBool(test_case.Passed())
    %%%%%: 1544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1544-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1544-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1544-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1544-block  4
call   13 never executed
    $$$$$: 1544-block  5
    $$$$$: 1544-block  6
call   14 never executed
    $$$$$: 1544-block  7
    #####: 1545:           + "&elapsed_time=" + StreamableToString(test_case.elapsed_time())
    %%%%%: 1545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1545-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1545-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1545-block  3
call   13 never executed
    $$$$$: 1545-block  4
    $$$$$: 1545-block  5
call   14 never executed
    $$$$$: 1545-block  6
    $$$$$: 1545-block  7
call   15 never executed
    $$$$$: 1545-block  8
    #####: 1546:           + "ms");
    %%%%%: 1546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1546-block  1
call    3 never executed
call    4 never executed
    $$$$$: 1546-block  2
call    5 never executed
    $$$$$: 1546-block  3
    #####: 1547:  }
        -: 1548:
function _ZN7testing8internal17StreamingListener11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 1549:  void OnTestStart(const TestInfo& test_info) {
    #####: 1550:    SendLn(std::string("event=TestStart&name=") + test_info.name());
    %%%%%: 1550-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1550-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1550-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1550-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1550-block  4
call   14 never executed
    $$$$$: 1550-block  5
    $$$$$: 1550-block  6
call   15 never executed
    $$$$$: 1550-block  7
    $$$$$: 1550-block  8
call   16 never executed
    #####: 1551:  }
        -: 1552:
function _ZN7testing8internal17StreamingListener9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 1553:  void OnTestEnd(const TestInfo& test_info) {
    #####: 1554:    SendLn("event=TestEnd&passed=" +
    %%%%%: 1554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1554-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1554-block  2
call    6 never executed
    $$$$$: 1554-block  3
    #####: 1555:           FormatBool((test_info.result())->Passed()) +
    %%%%%: 1555-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1555-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1555-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 1555-block  3
call   12 never executed
    $$$$$: 1555-block  4
    $$$$$: 1555-block  5
call   13 never executed
    $$$$$: 1555-block  6
    #####: 1556:           "&elapsed_time=" +
    %%%%%: 1556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1556-block  1
call    4 never executed
    $$$$$: 1556-block  2
    #####: 1557:           StreamableToString((test_info.result())->elapsed_time()) + "ms");
    %%%%%: 1557-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1557-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1557-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 1557-block  3
call   11 never executed
    $$$$$: 1557-block  4
    $$$$$: 1557-block  5
call   12 never executed
    $$$$$: 1557-block  6
    #####: 1558:  }
        -: 1559:
function _ZN7testing8internal17StreamingListener16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1560:  void OnTestPartResult(const TestPartResult& test_part_result) {
    #####: 1561:    const char* file_name = test_part_result.file_name();
    %%%%%: 1561-block  0
call    0 never executed
    #####: 1562:    if (file_name == NULL)
branch  0 never executed
branch  1 never executed
    #####: 1563:      file_name = "";
    %%%%%: 1563-block  0
    #####: 1564:    SendLn("event=TestPartResult&file=" + UrlEncode(file_name) +
    %%%%%: 1564-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1564-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1564-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1564-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1564-block  4
call   14 never executed
    $$$$$: 1564-block  5
    $$$$$: 1564-block  6
call   15 never executed
    $$$$$: 1564-block  7
    $$$$$: 1564-block  8
call   16 never executed
    $$$$$: 1564-block  9
    #####: 1565:           "&line=" + StreamableToString(test_part_result.line_number()) +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1565-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1565-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1565-block  2
call   13 never executed
    $$$$$: 1565-block  3
    $$$$$: 1565-block  4
call   14 never executed
    $$$$$: 1565-block  5
    $$$$$: 1565-block  6
call   15 never executed
    $$$$$: 1565-block  7
    $$$$$: 1565-block  8
    #####: 1566:           "&message=" + UrlEncode(test_part_result.message()));
    %%%%%: 1566-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1566-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1566-block  2
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 1566-block  3
call    8 never executed
    $$$$$: 1566-block  4
    $$$$$: 1566-block  5
call    9 never executed
    #####: 1567:  }
        -: 1568:
        -: 1569: private:
        -: 1570:  // Sends the given message and a newline to the socket.
function _ZN7testing8internal17StreamingListener6SendLnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1571:  void SendLn(const std::string& message) { socket_writer_->SendLn(message); }
    %%%%%: 1571-block  0
call    0 never executed
call    1 never executed
        -: 1572:
        -: 1573:  // Called at the start of streaming to notify the receiver what
        -: 1574:  // protocol we are using.
function _ZN7testing8internal17StreamingListener5StartEv called 0 returned 0% blocks executed 0%
    #####: 1575:  void Start() { SendLn("gtest_streaming_protocol_version=1.0"); }
    %%%%%: 1575-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1575-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1575-block  2
call    7 never executed
call    8 never executed
    $$$$$: 1575-block  3
call    9 never executed
    $$$$$: 1575-block  4
    $$$$$: 1575-block  5
call   10 never executed
        -: 1576:
function _ZN7testing8internal17StreamingListener10FormatBoolB5cxx11Eb called 0 returned 0% blocks executed 0%
    #####: 1577:  std::string FormatBool(bool value) { return value ? "1" : "0"; }
    %%%%%: 1577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1577-block  1
    %%%%%: 1577-block  2
    %%%%%: 1577-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1577-block  4
call    6 never executed
    %%%%%: 1577-block  5
    $$$$$: 1577-block  6
call    7 never executed
        -: 1578:
        -: 1579:  const scoped_ptr<AbstractSocketWriter> socket_writer_;
        -: 1580:
        -: 1581:  GTEST_DISALLOW_COPY_AND_ASSIGN_(StreamingListener);
        -: 1582:};  // class StreamingListener
        -: 1583:
        -: 1584:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 1585:
        -: 1586:}  // namespace internal
        -: 1587:}  // namespace testing
        -: 1588:
        -: 1589:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251
        -: 1590:
        -: 1591:#endif  // GTEST_SRC_GTEST_INTERNAL_INL_H_
        -: 1592:
        -: 1593:#if GTEST_OS_WINDOWS
        -: 1594:# define vsnprintf _vsnprintf
        -: 1595:#endif  // GTEST_OS_WINDOWS
        -: 1596:
        -: 1597:#if GTEST_OS_MAC
        -: 1598:#ifndef GTEST_OS_IOS
        -: 1599:#include <crt_externs.h>
        -: 1600:#endif
        -: 1601:#endif
        -: 1602:
        -: 1603:#if GTEST_HAS_ABSL
        -: 1604:#include "absl/debugging/failure_signal_handler.h"
        -: 1605:#include "absl/debugging/stacktrace.h"
        -: 1606:#include "absl/debugging/symbolize.h"
        -: 1607:#include "absl/strings/str_cat.h"
        -: 1608:#endif  // GTEST_HAS_ABSL
        -: 1609:
        -: 1610:namespace testing {
        -: 1611:
        -: 1612:using internal::CountIf;
        -: 1613:using internal::ForEach;
        -: 1614:using internal::GetElementOr;
        -: 1615:using internal::Shuffle;
        -: 1616:
        -: 1617:// Constants.
        -: 1618:
        -: 1619:// A test whose test case name or test name matches this filter is
        -: 1620:// disabled and not run.
        -: 1621:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -: 1622:
        -: 1623:// A test case whose name matches this filter is considered a death
        -: 1624:// test case and will be run before test cases whose name doesn't
        -: 1625:// match this filter.
        -: 1626:static const char kDeathTestCaseFilter[] = "*DeathTest:*DeathTest/*";
        -: 1627:
        -: 1628:// A test filter that matches everything.
        -: 1629:static const char kUniversalFilter[] = "*";
        -: 1630:
        -: 1631:// The default output format.
        -: 1632:static const char kDefaultOutputFormat[] = "xml";
        -: 1633:// The default output file.
        -: 1634:static const char kDefaultOutputFile[] = "test_detail";
        -: 1635:
        -: 1636:// The environment variable name for the test shard index.
        -: 1637:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -: 1638:// The environment variable name for the total number of test shards.
        -: 1639:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -: 1640:// The environment variable name for the test shard status file.
        -: 1641:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -: 1642:
        -: 1643:namespace internal {
        -: 1644:
        -: 1645:// The text used in failure messages to indicate the start of the
        -: 1646:// stack trace.
        -: 1647:const char kStackTraceMarker[] = "\nStack trace:\n";
        -: 1648:
        -: 1649:// g_help_flag is true iff the --help flag or an equivalent form is
        -: 1650:// specified on the command line.
        -: 1651:bool g_help_flag = false;
        -: 1652:
        -: 1653:// Utilty function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1654:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####: 1655:  FILE* fileout = NULL;
    #####: 1656:  FilePath output_file_path(output_file);
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1656-block  1
call    4 never executed
    #####: 1657:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1657-block  1
call    3 never executed
        -: 1658:
    #####: 1659:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%: 1659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1659-block  1
branch  3 never executed
branch  4 never executed
    #####: 1660:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%: 1660-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1660-block  1
        -: 1661:  }
    #####: 1662:  if (fileout == NULL) {
    %%%%%: 1662-block  0
branch  0 never executed
branch  1 never executed
    #####: 1663:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%: 1663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1663-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1663-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1663-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1663-block  4
call   13 never executed
    $$$$$: 1663-block  5
call   14 never executed
    $$$$$: 1663-block  6
        -: 1664:  }
    #####: 1665:  return fileout;
    %%%%%: 1665-block  0
call    0 never executed
    %%%%%: 1665-block  1
        -: 1666:}
        -: 1667:
        -: 1668:}  // namespace internal
        -: 1669:
        -: 1670:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -: 1671:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1: 1672:static const char* GetDefaultFilter() {
        -: 1673:  const char* const testbridge_test_only =
        1: 1674:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1: 1674-block  0
call    0 returned 1
        1: 1675:  if (testbridge_test_only != NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1676:    return testbridge_test_only;
    %%%%%: 1676-block  0
        -: 1677:  }
        1: 1678:  return kUniversalFilter;
        1: 1678-block  0
        -: 1679:}
        -: 1680:
        -: 1681:GTEST_DEFINE_bool_(
        -: 1682:    also_run_disabled_tests,
        -: 1683:    internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -: 1684:    "Run disabled tests too, in addition to the tests normally being run.");
        -: 1685:
        -: 1686:GTEST_DEFINE_bool_(
        -: 1687:    break_on_failure,
        -: 1688:    internal::BoolFromGTestEnv("break_on_failure", false),
        -: 1689:    "True iff a failed assertion should be a debugger break-point.");
        -: 1690:
        -: 1691:GTEST_DEFINE_bool_(
        -: 1692:    catch_exceptions,
        -: 1693:    internal::BoolFromGTestEnv("catch_exceptions", true),
        -: 1694:    "True iff " GTEST_NAME_
        -: 1695:    " should catch exceptions and treat them as test failures.");
        -: 1696:
        -: 1697:GTEST_DEFINE_string_(
        -: 1698:    color,
        -: 1699:    internal::StringFromGTestEnv("color", "auto"),
        -: 1700:    "Whether to use colors in the output.  Valid values: yes, no, "
        -: 1701:    "and auto.  'auto' means to use colors if the output is "
        -: 1702:    "being sent to a terminal and the TERM environment variable "
        -: 1703:    "is set to a terminal type that supports colors.");
        -: 1704:
        -: 1705:GTEST_DEFINE_string_(
        -: 1706:    filter,
        -: 1707:    internal::StringFromGTestEnv("filter", GetDefaultFilter()),
        -: 1708:    "A colon-separated list of glob (not regex) patterns "
        -: 1709:    "for filtering the tests to run, optionally followed by a "
        -: 1710:    "'-' and a : separated list of negative patterns (tests to "
        -: 1711:    "exclude).  A test is run if it matches one of the positive "
        -: 1712:    "patterns and does not match any of the negative patterns.");
        -: 1713:
        -: 1714:GTEST_DEFINE_bool_(
        -: 1715:    install_failure_signal_handler,
        -: 1716:    internal::BoolFromGTestEnv("install_failure_signal_handler", false),
        -: 1717:    "If true and supported on the current platform, " GTEST_NAME_ " should "
        -: 1718:    "install a signal handler that dumps debugging information when fatal "
        -: 1719:    "signals are raised.");
        -: 1720:
        -: 1721:GTEST_DEFINE_bool_(list_tests, false,
        -: 1722:                   "List all tests without running them.");
        -: 1723:
        -: 1724:// The net priority order after flag processing is thus:
        -: 1725://   --gtest_output command line flag
        -: 1726://   GTEST_OUTPUT environment variable
        -: 1727://   XML_OUTPUT_FILE environment variable
        -: 1728://   ''
        -: 1729:GTEST_DEFINE_string_(
        -: 1730:    output,
        -: 1731:    internal::StringFromGTestEnv("output",
        -: 1732:      internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -: 1733:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -: 1734:    "optionally followed by a colon and an output file name or directory. "
        -: 1735:    "A directory is indicated by a trailing pathname separator. "
        -: 1736:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -: 1737:    "If a directory is specified, output files will be created "
        -: 1738:    "within that directory, with file-names based on the test "
        -: 1739:    "executable's name and, if necessary, made unique by adding "
        -: 1740:    "digits.");
        -: 1741:
        -: 1742:GTEST_DEFINE_bool_(
        -: 1743:    print_time,
        -: 1744:    internal::BoolFromGTestEnv("print_time", true),
        -: 1745:    "True iff " GTEST_NAME_
        -: 1746:    " should display elapsed time in text output.");
        -: 1747:
        -: 1748:GTEST_DEFINE_bool_(
        -: 1749:    print_utf8,
        -: 1750:    internal::BoolFromGTestEnv("print_utf8", true),
        -: 1751:    "True iff " GTEST_NAME_
        -: 1752:    " prints UTF8 characters as text.");
        -: 1753:
        -: 1754:GTEST_DEFINE_int32_(
        -: 1755:    random_seed,
        -: 1756:    internal::Int32FromGTestEnv("random_seed", 0),
        -: 1757:    "Random number seed to use when shuffling test orders.  Must be in range "
        -: 1758:    "[1, 99999], or 0 to use a seed based on the current time.");
        -: 1759:
        -: 1760:GTEST_DEFINE_int32_(
        -: 1761:    repeat,
        -: 1762:    internal::Int32FromGTestEnv("repeat", 1),
        -: 1763:    "How many times to repeat each test.  Specify a negative number "
        -: 1764:    "for repeating forever.  Useful for shaking out flaky tests.");
        -: 1765:
        -: 1766:GTEST_DEFINE_bool_(
        -: 1767:    show_internal_stack_frames, false,
        -: 1768:    "True iff " GTEST_NAME_ " should include internal stack frames when "
        -: 1769:    "printing test failure stack traces.");
        -: 1770:
        -: 1771:GTEST_DEFINE_bool_(
        -: 1772:    shuffle,
        -: 1773:    internal::BoolFromGTestEnv("shuffle", false),
        -: 1774:    "True iff " GTEST_NAME_
        -: 1775:    " should randomize tests' order on every run.");
        -: 1776:
        -: 1777:GTEST_DEFINE_int32_(
        -: 1778:    stack_trace_depth,
        -: 1779:    internal::Int32FromGTestEnv("stack_trace_depth", kMaxStackTraceDepth),
        -: 1780:    "The maximum number of stack frames to print when an "
        -: 1781:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -: 1782:
        -: 1783:GTEST_DEFINE_string_(
        -: 1784:    stream_result_to,
        -: 1785:    internal::StringFromGTestEnv("stream_result_to", ""),
        -: 1786:    "This flag specifies the host name and the port number on which to stream "
        -: 1787:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -: 1788:    "Linux.");
        -: 1789:
        -: 1790:GTEST_DEFINE_bool_(
        -: 1791:    throw_on_failure,
        -: 1792:    internal::BoolFromGTestEnv("throw_on_failure", false),
        -: 1793:    "When this flag is specified, a failed assertion will throw an exception "
        -: 1794:    "if exceptions are enabled or exit the program with a non-zero code "
        -: 1795:    "otherwise. For use with an external test framework.");
        -: 1796:
        -: 1797:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 1798:GTEST_DEFINE_string_(
        -: 1799:    flagfile,
        -: 1800:    internal::StringFromGTestEnv("flagfile", ""),
        -: 1801:    "This flag specifies the flagfile to read command-line flags from.");
        -: 1802:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 1803:
        -: 1804:namespace internal {
        -: 1805:
        -: 1806:// Generates a random number from [0, range), using a Linear
        -: 1807:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -: 1808:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####: 1809:UInt32 Random::Generate(UInt32 range) {
        -: 1810:  // These constants are the same as are used in glibc's rand(3).
        -: 1811:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####: 1812:  state_ = static_cast<UInt32>(1103515245ULL*state_ + 12345U) % kMaxRange;
        -: 1813:
    #####: 1814:  GTEST_CHECK_(range > 0)
    %%%%%: 1814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1814-block  1
call    3 never executed
call    4 never executed
    %%%%%: 1814-block  2
call    5 never executed
    $$$$$: 1814-block  3
call    6 never executed
    $$$$$: 1814-block  4
call    7 never executed
    #####: 1815:      << "Cannot generate a number in the range [0, 0).";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1815-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1816:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%: 1816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1816-block  1
call    3 never executed
call    4 never executed
    %%%%%: 1816-block  2
call    5 never executed
    $$$$$: 1816-block  3
call    6 never executed
    #####: 1817:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1817-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1817-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1818:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%: 1818-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1818-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1818-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1818-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 1819:
        -: 1820:  // Converting via modulus introduces a bit of downward bias, but
        -: 1821:  // it's simple, and a linear congruential generator isn't too good
        -: 1822:  // to begin with.
    #####: 1823:  return state_ % range;
    %%%%%: 1823-block  0
    %%%%%: 1823-block  1
        -: 1824:}
        -: 1825:
        -: 1826:// GTestIsInitialized() returns true iff the user has initialized
        -: 1827:// Google Test.  Useful for catching the user mistake of not initializing
        -: 1828:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2: 1829:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2: 1829-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -: 1830:
        -: 1831:// Iterates over a vector of TestCases, keeping a running sum of the
        -: 1832:// results of calling a given int-returning method on each.
        -: 1833:// Returns the sum.
function _ZN7testing8internalL19SumOverTestCaseListERKSt6vectorIPNS_8TestCaseESaIS3_EEMS2_KFivE called 7 returned 100% blocks executed 91%
        7: 1834:static int SumOverTestCaseList(const std::vector<TestCase*>& case_list,
        -: 1835:                               int (TestCase::*method)() const) {
        7: 1836:  int sum = 0;
       21: 1837:  for (size_t i = 0; i < case_list.size(); i++) {
        7: 1837-block  0
       21: 1837-block  1
call    0 returned 21
branch  1 taken 14 (fallthrough)
branch  2 taken 7
      14*: 1838:    sum += (case_list[i]->*method)();
       14: 1838-block  0
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
    %%%%%: 1838-block  1
       14: 1838-block  2
       14: 1838-block  3
call    3 returned 14
        -: 1839:  }
        7: 1840:  return sum;
        7: 1840-block  0
        -: 1841:}
        -: 1842:
        -: 1843:// Returns true iff the test case passed.
function _ZN7testing8internalL14TestCasePassedEPKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 1844:static bool TestCasePassed(const TestCase* test_case) {
    #####: 1845:  return test_case->should_run() && test_case->Passed();
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1845-block  2
    %%%%%: 1845-block  3
    %%%%%: 1845-block  4
        -: 1846:}
        -: 1847:
        -: 1848:// Returns true iff the test case failed.
function _ZN7testing8internalL14TestCaseFailedEPKNS_8TestCaseE called 4 returned 100% blocks executed 100%
        4: 1849:static bool TestCaseFailed(const TestCase* test_case) {
        4: 1850:  return test_case->should_run() && test_case->Failed();
        4: 1850-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4: 1850-block  1
call    3 returned 4
branch  4 taken 2 (fallthrough)
branch  5 taken 2
        2: 1850-block  2
        2: 1850-block  3
        4: 1850-block  4
        -: 1851:}
        -: 1852:
        -: 1853:// Returns true iff test_case contains at least one test that should
        -: 1854:// run.
function _ZN7testing8internalL17ShouldRunTestCaseEPKNS_8TestCaseE called 4 returned 100% blocks executed 100%
        4: 1855:static bool ShouldRunTestCase(const TestCase* test_case) {
        4: 1856:  return test_case->should_run();
        4: 1856-block  0
call    0 returned 4
        -: 1857:}
        -: 1858:
        -: 1859:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 1 returned 100% blocks executed 80%
        1: 1860:AssertHelper::AssertHelper(TestPartResult::Type type,
        -: 1861:                           const char* file,
        -: 1862:                           int line,
        1: 1863:                           const char* message)
        1: 1864:    : data_(new AssertHelperData(type, file, line, message)) {
        1: 1864-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1864-block  1
call    4 never executed
        1: 1865:}
        1: 1865-block  0
        -: 1866:
function _ZN7testing8internal12AssertHelperD2Ev called 1 returned 100% blocks executed 100%
        2: 1867:AssertHelper::~AssertHelper() {
        1: 1868:  delete data_;
        1: 1868-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1868-block  1
call    2 returned 1
call    3 returned 1
        1: 1869:}
        -: 1870:
        -: 1871:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 1 returned 100% blocks executed 67%
        1: 1872:void AssertHelper::operator=(const Message& message) const {
        -: 1873:  UnitTest::GetInstance()->
        2: 1874:    AddTestPartResult(data_->type, data_->file, data_->line,
        1: 1874-block  0
call    0 returned 1
        1: 1874-block  1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 1875:                      AppendUserMessage(data_->message, message),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1875-block  0
call    3 returned 1
    $$$$$: 1875-block  1
call    4 never executed
    $$$$$: 1875-block  2
        -: 1876:                      UnitTest::GetInstance()->impl()
        2: 1877:                      ->CurrentOsStackTraceExceptTop(1)
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    $$$$$: 1877-block  0
call    4 never executed
        -: 1878:                      // Skips the stack frame for this function itself.
        -: 1879:                      );  // NOLINT
        1: 1880:}
        -: 1881:
        -: 1882:// Mutex for linked pointers.
        -: 1883:GTEST_API_ GTEST_DEFINE_STATIC_MUTEX_(g_linked_ptr_mutex);
        -: 1884:
        -: 1885:// A copy of all command line arguments.  Set by InitGoogleTest().
        -: 1886:static ::std::vector<std::string> g_argvs;
        -: 1887:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2: 1888:::std::vector<std::string> GetArgvs() {
        -: 1889:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -: 1890:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -: 1891:  // ::string. This code converts it to the appropriate type.
        -: 1892:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -: 1893:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -: 1894:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2: 1895:  return g_argvs;
        2: 1895-block  0
call    0 returned 2
        -: 1896:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -: 1897:}
        -: 1898:
        -: 1899:// Returns the current application's name, removing directory path if that
        -: 1900:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####: 1901:FilePath GetCurrentExecutableName() {
    #####: 1902:  FilePath result;
    %%%%%: 1902-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1902-block  1
call    3 never executed
    $$$$$: 1902-block  2
call    4 never executed
        -: 1903:
        -: 1904:#if GTEST_OS_WINDOWS
        -: 1905:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -: 1906:#else
    #####: 1907:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%: 1907-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1907-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1907-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1907-block  3
call   10 never executed
call   11 never executed
    $$$$$: 1907-block  4
call   12 never executed
    $$$$$: 1907-block  5
    $$$$$: 1907-block  6
call   13 never executed
    $$$$$: 1907-block  7
        -: 1908:#endif  // GTEST_OS_WINDOWS
        -: 1909:
    #####: 1910:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1910-block  0
    %%%%%: 1910-block  1
        -: 1911:}
        -: 1912:
        -: 1913:// Functions for processing the gtest_output flag.
        -: 1914:
        -: 1915:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 52%
        1: 1916:std::string UnitTestOptions::GetOutputFormat() {
        1: 1917:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
        1: 1917-block  0
call    0 returned 1
        1: 1918:  const char* const colon = strchr(gtest_output_flag, ':');
        -: 1919:  return (colon == NULL) ?
        -: 1920:      std::string(gtest_output_flag) :
       2*: 1921:      std::string(gtest_output_flag, colon - gtest_output_flag);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1921-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%: 1921-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1: 1921-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%: 1921-block  3
call   12 never executed
        1: 1921-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1: 1921-block  5
call   15 returned 1
        1: 1921-block  6
        1: 1921-block  7
    $$$$$: 1921-block  8
branch 16 never executed
branch 17 never executed
    $$$$$: 1921-block  9
call   18 never executed
    $$$$$: 1921-block 10
    $$$$$: 1921-block 11
branch 19 never executed
branch 20 never executed
    $$$$$: 1921-block 12
call   21 never executed
        -: 1922:}
        -: 1923:
        -: 1924:// Returns the name of the requested output file, or the default if none
        -: 1925:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1926:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####: 1927:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
    %%%%%: 1927-block  0
call    0 never executed
        -: 1928:
    #####: 1929:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1929-block  0
call    3 never executed
    $$$$$: 1929-block  1
call    4 never executed
    #####: 1930:  if (format.empty())
    %%%%%: 1930-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1931:    format = std::string(kDefaultOutputFormat);
    %%%%%: 1931-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1931-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 1931-block  2
call    7 never executed
    $$$$$: 1931-block  3
        -: 1932:
    #####: 1933:  const char* const colon = strchr(gtest_output_flag, ':');
    #####: 1934:  if (colon == NULL)
    %%%%%: 1934-block  0
branch  0 never executed
branch  1 never executed
    #####: 1935:    return internal::FilePath::MakeFileName(
    %%%%%: 1935-block  0
call    0 never executed
    %%%%%: 1935-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1935-block  2
call    4 never executed
    $$$$$: 1935-block  3
call    5 never executed
    $$$$$: 1935-block  4
    #####: 1936:        internal::FilePath(
    %%%%%: 1936-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1936-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1936-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1936-block  3
call   14 never executed
    $$$$$: 1936-block  4
    $$$$$: 1936-block  5
call   15 never executed
    $$$$$: 1936-block  6
    $$$$$: 1936-block  7
call   16 never executed
    $$$$$: 1936-block  8
        -: 1937:            UnitTest::GetInstance()->original_working_dir()),
    #####: 1938:        internal::FilePath(kDefaultOutputFile), 0,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1938-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 1938-block  1
call   10 never executed
    $$$$$: 1938-block  2
    $$$$$: 1938-block  3
call   11 never executed
    $$$$$: 1938-block  4
    $$$$$: 1938-block  5
call   12 never executed
    $$$$$: 1938-block  6
    #####: 1939:        format.c_str()).string();
    %%%%%: 1939-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1939-block  1
        -: 1940:
    #####: 1941:  internal::FilePath output_name(colon + 1);
    %%%%%: 1941-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1941-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 1941-block  2
call    8 never executed
    $$$$$: 1941-block  3
    $$$$$: 1941-block  4
    $$$$$: 1941-block  5
call    9 never executed
    #####: 1942:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1943:    // FIXME: on Windows \some\path is not an absolute
        -: 1944:    // path (as its meaning depends on the current drive), yet the
        -: 1945:    // following logic for turning it into an absolute path is wrong.
        -: 1946:    // Fix it.
    #####: 1947:    output_name = internal::FilePath::ConcatPaths(
    %%%%%: 1947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1947-block  1
call    3 never executed
    $$$$$: 1947-block  2
call    4 never executed
    $$$$$: 1947-block  3
    #####: 1948:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%: 1948-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1948-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1948-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 1948-block  3
call   14 never executed
    $$$$$: 1948-block  4
    $$$$$: 1948-block  5
call   15 never executed
    $$$$$: 1948-block  6
    $$$$$: 1948-block  7
call   16 never executed
    $$$$$: 1948-block  8
    #####: 1949:        internal::FilePath(colon + 1));
    %%%%%: 1949-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1949-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1949-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1949-block  3
call   13 never executed
    $$$$$: 1949-block  4
    $$$$$: 1949-block  5
call   14 never executed
    $$$$$: 1949-block  6
    $$$$$: 1949-block  7
call   15 never executed
    $$$$$: 1949-block  8
        -: 1950:
    #####: 1951:  if (!output_name.IsDirectory())
    %%%%%: 1951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1952:    return output_name.string();
    %%%%%: 1952-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1952-block  1
        -: 1953:
        -: 1954:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####: 1955:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1955-block  0
    #####: 1956:      GetOutputFormat().c_str()));
    %%%%%: 1956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1956-block  1
call    3 never executed
    %%%%%: 1956-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1956-block  3
call    7 never executed
    $$$$$: 1956-block  4
    $$$$$: 1956-block  5
call    8 never executed
    #####: 1957:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1957-block  0
        -: 1958:}
        -: 1959:
        -: 1960:// Returns true iff the wildcard pattern matches the string.  The
        -: 1961:// first ':' or '\0' character in pattern marks the end of it.
        -: 1962://
        -: 1963:// This recursive algorithm isn't very efficient, but is clear and
        -: 1964:// works well enough for matching test names, which are short.
function _ZN7testing8internal15UnitTestOptions20PatternMatchesStringEPKcS3_ called 1046 returned 100% blocks executed 70%
     1046: 1965:bool UnitTestOptions::PatternMatchesString(const char *pattern,
        -: 1966:                                           const char *str) {
     1046: 1967:  switch (*pattern) {
     1046: 1967-block  0
branch  0 taken 20
branch  1 taken 0
branch  2 taken 652
branch  3 taken 374
       20: 1968:    case '\0':
        -: 1969:    case ':':  // Either ':' or '\0' marks the end of the pattern.
       20: 1970:      return *str == '\0';
       20: 1970-block  0
    #####: 1971:    case '?':  // Matches any single character.
    #####: 1972:      return *str != '\0' && PatternMatchesString(pattern + 1, str + 1);
    %%%%%: 1972-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1972-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1972-block  2
    %%%%%: 1972-block  3
    %%%%%: 1972-block  4
      652: 1973:    case '*':  // Matches any string (possibly empty) of characters.
     1012: 1974:      return (*str != '\0' && PatternMatchesString(pattern, str + 1)) ||
      652: 1974-block  0
branch  0 taken 618 (fallthrough)
branch  1 taken 34
      618: 1974-block  1
call    2 returned 618
branch  3 taken 326 (fallthrough)
branch  4 taken 292
      302: 1974-block  2
      350: 1974-block  3
     1012: 1975:          PatternMatchesString(pattern + 1, str);
      360: 1975-block  0
call    0 returned 360
branch  1 taken 10 (fallthrough)
branch  2 taken 350
      652: 1975-block  1
      374: 1976:    default:  // Non-special character.  Matches itself.
     378*: 1977:      return *pattern == *str &&
      374: 1977-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 370
    %%%%%: 1977-block  1
      374: 1977-block  2
      378: 1978:          PatternMatchesString(pattern + 1, str + 1);
        4: 1978-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
      374: 1978-block  1
        -: 1979:  }
        -: 1980:}
        -: 1981:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 42 returned 100% blocks executed 100%
       42: 1982:bool UnitTestOptions::MatchesFilter(
        -: 1983:    const std::string& name, const char* filter) {
       42: 1984:  const char *cur_pattern = filter;
       42: 1984-block  0
        -: 1985:  for (;;) {
       64: 1986:    if (PatternMatchesString(cur_pattern, name.c_str())) {
       64: 1986-block  0
call    0 returned 64
call    1 returned 64
branch  2 taken 10 (fallthrough)
branch  3 taken 54
       10: 1987:      return true;
       10: 1987-block  0
        -: 1988:    }
        -: 1989:
        -: 1990:    // Finds the next pattern in the filter.
       54: 1991:    cur_pattern = strchr(cur_pattern, ':');
        -: 1992:
        -: 1993:    // Returns if no more pattern can be found.
       54: 1994:    if (cur_pattern == NULL) {
       54: 1994-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 22
       32: 1995:      return false;
       32: 1995-block  0
        -: 1996:    }
        -: 1997:
        -: 1998:    // Skips the pattern separater (the ':' character).
       22: 1999:    cur_pattern++;
       22: 1999-block  0
        -: 2000:  }
        -: 2001:}
        -: 2002:
        -: 2003:// Returns true iff the user-specified filter matches the test case
        -: 2004:// name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 10 returned 100% blocks executed 45%
       10: 2005:bool UnitTestOptions::FilterMatchesTest(const std::string &test_case_name,
        -: 2006:                                        const std::string &test_name) {
       20: 2007:  const std::string& full_name = test_case_name + "." + test_name.c_str();
       10: 2007-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 2007-block  1
call    4 returned 10
branch  5 taken 10 (fallthrough)
branch  6 taken 0 (throw)
       10: 2007-block  2
call    7 returned 10
call    8 returned 10
    $$$$$: 2007-block  3
call    9 never executed
    $$$$$: 2007-block  4
    $$$$$: 2007-block  5
call   10 never executed
        -: 2008:
        -: 2009:  // Split --gtest_filter at '-', if there is one, to separate into
        -: 2010:  // positive filter and negative filter portions
       10: 2011:  const char* const p = GTEST_FLAG(filter).c_str();
call    0 returned 10
       10: 2012:  const char* const dash = strchr(p, '-');
       20: 2013:  std::string positive;
call    0 returned 10
call    1 returned 10
    $$$$$: 2013-block  0
call    2 never executed
       10: 2014:  std::string negative;
call    0 returned 10
    $$$$$: 2014-block  0
call    1 never executed
       10: 2015:  if (dash == NULL) {
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 2016:    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter
       10: 2016-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 2017:    negative = "";
       10: 2017-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 2018:  } else {
    #####: 2019:    positive = std::string(p, dash);   // Everything up to the dash
    %%%%%: 2019-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2019-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 2019-block  2
call    7 never executed
    $$$$$: 2019-block  3
    #####: 2020:    negative = std::string(dash + 1);  // Everything after the dash
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2020-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 2020-block  1
call    7 never executed
    $$$$$: 2020-block  2
    #####: 2021:    if (positive.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2022:      // Treat '-test1' as the same as '*-test1'
    #####: 2023:      positive = kUniversalFilter;
    %%%%%: 2023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2024:    }
        -: 2025:  }
        -: 2026:
        -: 2027:  // A filter is a colon-separated list of patterns.  It matches a
        -: 2028:  // test if any pattern in it matches the test.
      20*: 2029:  return (MatchesFilter(full_name, positive.c_str()) &&
       10: 2029-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 2029-block  1
branch  4 taken 10 (fallthrough)
branch  5 taken 0
       10: 2029-block  2
    %%%%%: 2029-block  3
       30: 2030:          !MatchesFilter(full_name, negative.c_str()));
       10: 2030-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 2030-block  1
branch  4 taken 10 (fallthrough)
branch  5 taken 0
       10: 2030-block  2
call    6 returned 10
       10: 2030-block  3
        -: 2031:}
        -: 2032:
        -: 2033:#if GTEST_HAS_SEH
        -: 2034:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -: 2035:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -: 2036:// This function is useful as an __except condition.
        -: 2037:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -: 2038:  // Google Test should handle a SEH exception if:
        -: 2039:  //   1. the user wants it to, AND
        -: 2040:  //   2. this is not a breakpoint exception, AND
        -: 2041:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -: 2042:  //      apparently).
        -: 2043:  //
        -: 2044:  // SEH exception code for C++ exceptions.
        -: 2045:  // (see http://support.microsoft.com/kb/185294 for more information).
        -: 2046:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -: 2047:
        -: 2048:  bool should_handle = true;
        -: 2049:
        -: 2050:  if (!GTEST_FLAG(catch_exceptions))
        -: 2051:    should_handle = false;
        -: 2052:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -: 2053:    should_handle = false;
        -: 2054:  else if (exception_code == kCxxExceptionCode)
        -: 2055:    should_handle = false;
        -: 2056:
        -: 2057:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -: 2058:}
        -: 2059:#endif  // GTEST_HAS_SEH
        -: 2060:
        -: 2061:}  // namespace internal
        -: 2062:
        -: 2063:// The c'tor sets this object as the test part result reporter used by
        -: 2064:// Google Test.  The 'result' parameter specifies where to report the
        -: 2065:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####: 2066:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####: 2067:    TestPartResultArray* result)
        -: 2068:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),
    #####: 2069:      result_(result) {
    %%%%%: 2069-block  0
call    0 never executed
    $$$$$: 2069-block  1
call    1 never executed
    #####: 2070:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2071:}
    %%%%%: 2071-block  0
        -: 2072:
        -: 2073:// The c'tor sets this object as the test part result reporter used by
        -: 2074:// Google Test.  The 'result' parameter specifies where to report the
        -: 2075:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####: 2076:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####: 2077:    InterceptMode intercept_mode, TestPartResultArray* result)
        -: 2078:    : intercept_mode_(intercept_mode),
    #####: 2079:      result_(result) {
    %%%%%: 2079-block  0
call    0 never executed
    $$$$$: 2079-block  1
call    1 never executed
    #####: 2080:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2081:}
    %%%%%: 2081-block  0
        -: 2082:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####: 2083:void ScopedFakeTestPartResultReporter::Init() {
    #####: 2084:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2084-block  0
call    0 never executed
    #####: 2085:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####: 2086:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%: 2086-block  0
call    0 never executed
    #####: 2087:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -: 2088:  } else {
    #####: 2089:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%: 2089-block  0
call    0 never executed
    #####: 2090:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -: 2091:  }
    #####: 2092:}
        -: 2093:
        -: 2094:// The d'tor restores the test part result reporter used by Google Test
        -: 2095:// before.
    #####: 2096:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####: 2097:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####: 2098:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####: 2099:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -: 2100:  } else {
    #####: 2101:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -: 2102:  }
    #####: 2103:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####: 2096:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -: 2097:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -: 2098:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -: 2099:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -: 2100:  } else {
        -: 2101:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -: 2102:  }
    #####: 2103:}
    %%%%%: 2103-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####: 2096:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%: 2096-block  0
call    0 never executed
    #####: 2097:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2097-block  0
call    0 never executed
    #####: 2098:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####: 2099:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%: 2099-block  0
call    0 never executed
        -: 2100:  } else {
    #####: 2101:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%: 2101-block  0
call    0 never executed
        -: 2102:  }
    #####: 2103:}
------------------
        -: 2104:
        -: 2105:// Increments the test part result count and remembers the result.
        -: 2106:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2107:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -: 2108:    const TestPartResult& result) {
    #####: 2109:  result_->Append(result);
    %%%%%: 2109-block  0
call    0 never executed
    #####: 2110:}
        -: 2111:
        -: 2112:namespace internal {
        -: 2113:
        -: 2114:// Returns the type ID of ::testing::Test.  We should always call this
        -: 2115:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -: 2116:// testing::Test.  This is to work around a suspected linker bug when
        -: 2117:// using Google Test as a framework on Mac OS X.  The bug causes
        -: 2118:// GetTypeId< ::testing::Test>() to return different values depending
        -: 2119:// on whether the call is from the Google Test framework itself or
        -: 2120:// from user test code.  GetTestTypeId() is guaranteed to always
        -: 2121:// return the same value, as it always calls GetTypeId<>() from the
        -: 2122:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 11 returned 100% blocks executed 100%
       11: 2123:TypeId GetTestTypeId() {
       11: 2124:  return GetTypeId<Test>();
       11: 2124-block  0
call    0 returned 11
        -: 2125:}
        -: 2126:
        -: 2127:// The value of GetTestTypeId() as seen from within the Google Test
        -: 2128:// library.  This is solely for testing GetTestTypeId().
        -: 2129:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -: 2130:
        -: 2131:// This predicate-formatter checks that 'results' contains a test part
        -: 2132:// failure of the given type and that the failure message contains the
        -: 2133:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2134:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -: 2135:                                     const char* /* type_expr */,
        -: 2136:                                     const char* /* substr_expr */,
        -: 2137:                                     const TestPartResultArray& results,
        -: 2138:                                     TestPartResult::Type type,
        -: 2139:                                     const std::string& substr) {
        -: 2140:  const std::string expected(type == TestPartResult::kFatalFailure ?
        -: 2141:                        "1 fatal failure" :
    #####: 2142:                        "1 non-fatal failure");
    %%%%%: 2142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2142-block  1
    %%%%%: 2142-block  2
    %%%%%: 2142-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 2142-block  4
    $$$$$: 2142-block  5
call    7 never executed
    #####: 2143:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2143-block  0
call    3 never executed
    $$$$$: 2143-block  1
call    4 never executed
    #####: 2144:  if (results.size() != 1) {
    %%%%%: 2144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2145:    msg << "Expected: " << expected << "\n"
    %%%%%: 2145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2145-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2145-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2146:        << "  Actual: " << results.size() << " failures";
    %%%%%: 2146-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2146-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2146-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 2146-block  3
    #####: 2147:    for (int i = 0; i < results.size(); i++) {
    %%%%%: 2147-block  0
    %%%%%: 2147-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2147-block  2
    #####: 2148:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%: 2148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2148-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2148-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2149:    }
    #####: 2150:    return AssertionFailure() << msg;
    %%%%%: 2150-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2150-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2150-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2150-block  3
    %%%%%: 2150-block  4
call    9 never executed
    $$$$$: 2150-block  5
call   10 never executed
    $$$$$: 2150-block  6
        -: 2151:  }
        -: 2152:
    #####: 2153:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%: 2153-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2154:  if (r.type() != type) {
    %%%%%: 2154-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2155:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%: 2155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2155-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2155-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2155-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2155-block  4
call   12 never executed
    $$$$$: 2155-block  5
call   13 never executed
    $$$$$: 2155-block  6
    #####: 2156:                              << "  Actual:\n"
    %%%%%: 2156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2157:                              << r;
    %%%%%: 2157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2157-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2157-block  2
        -: 2158:  }
        -: 2159:
    #####: 2160:  if (strstr(r.message(), substr.c_str()) == NULL) {
    %%%%%: 2160-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2161:    return AssertionFailure() << "Expected: " << expected << " containing \""
    %%%%%: 2161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2161-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2161-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2161-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2161-block  4
call   12 never executed
    $$$$$: 2161-block  5
call   13 never executed
    $$$$$: 2161-block  6
    #####: 2162:                              << substr << "\"\n"
    %%%%%: 2162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2162-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2163:                              << "  Actual:\n"
    %%%%%: 2163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2164:                              << r;
    %%%%%: 2164-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2164-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2164-block  2
        -: 2165:  }
        -: 2166:
    #####: 2167:  return AssertionSuccess();
    %%%%%: 2167-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2167-block  1
        -: 2168:}
        -: 2169:
        -: 2170:// The constructor of SingleFailureChecker remembers where to look up
        -: 2171:// test part results, what type of failure we expect, and what
        -: 2172:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2173:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -: 2174:                                           TestPartResult::Type type,
    #####: 2175:                                           const std::string& substr)
    #####: 2176:    : results_(results), type_(type), substr_(substr) {}
    %%%%%: 2176-block  0
call    0 never executed
        -: 2177:
        -: 2178:// The destructor of SingleFailureChecker verifies that the given
        -: 2179:// TestPartResultArray contains exactly one failure that has the given
        -: 2180:// type and contains the given substring.  If that's not the case, a
        -: 2181:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####: 2182:SingleFailureChecker::~SingleFailureChecker() {
call    0 never executed
    #####: 2183:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 2183-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2183-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 2183-block  2
call   10 never executed
    #####: 2184:}
        -: 2185:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 2186:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1: 2187:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1: 2187-block  0
call    0 returned 1
        -: 2188:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        1: 2189:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 2190:    const TestPartResult& result) {
        1: 2191:  unit_test_->current_test_result()->AddTestPartResult(result);
        1: 2191-block  0
call    0 returned 1
call    1 returned 1
        1: 2192:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1: 2193:}
        -: 2194:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 2195:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1: 2196:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1: 2196-block  0
call    0 returned 1
        -: 2197:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        1: 2198:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 2199:    const TestPartResult& result) {
        1: 2200:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
        1: 2200-block  0
call    0 returned 1
call    1 returned 1
        1: 2201:}
        -: 2202:
        -: 2203:// Returns the global test part result reporter.
        -: 2204:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 1 returned 100% blocks executed 100%
        1: 2205:UnitTestImpl::GetGlobalTestPartResultReporter() {
        1: 2206:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
        1: 2206-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 2207:  return global_test_part_result_repoter_;
        1: 2207-block  0
call    0 returned 1
        1: 2207-block  1
        -: 2208:}
        -: 2209:
        -: 2210:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 2211:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 2212:    TestPartResultReporterInterface* reporter) {
    #####: 2213:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 2213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2214:  global_test_part_result_repoter_ = reporter;
    %%%%%: 2214-block  0
call    0 never executed
    #####: 2215:}
        -: 2216:
        -: 2217:// Returns the test part result reporter for the current thread.
        -: 2218:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 1 returned 100% blocks executed 100%
        1: 2219:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
        1: 2220:  return per_thread_test_part_result_reporter_.get();
        1: 2220-block  0
call    0 returned 1
        -: 2221:}
        -: 2222:
        -: 2223:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 2224:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 2225:    TestPartResultReporterInterface* reporter) {
    #####: 2226:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 2226-block  0
call    0 never executed
    #####: 2227:}
        -: 2228:
        -: 2229:// Gets the number of successful test cases.
function _ZNK7testing8internal12UnitTestImpl26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 2230:int UnitTestImpl::successful_test_case_count() const {
    #####: 2231:  return CountIf(test_cases_, TestCasePassed);
    %%%%%: 2231-block  0
call    0 never executed
        -: 2232:}
        -: 2233:
        -: 2234:// Gets the number of failed test cases.
function _ZNK7testing8internal12UnitTestImpl22failed_test_case_countEv called 2 returned 100% blocks executed 100%
        2: 2235:int UnitTestImpl::failed_test_case_count() const {
        2: 2236:  return CountIf(test_cases_, TestCaseFailed);
        2: 2236-block  0
call    0 returned 2
        -: 2237:}
        -: 2238:
        -: 2239:// Gets the number of all test cases.
function _ZNK7testing8internal12UnitTestImpl21total_test_case_countEv called 6 returned 100% blocks executed 100%
        6: 2240:int UnitTestImpl::total_test_case_count() const {
        6: 2241:  return static_cast<int>(test_cases_.size());
        6: 2241-block  0
call    0 returned 6
        -: 2242:}
        -: 2243:
        -: 2244:// Gets the number of all test cases that contain at least one test
        -: 2245:// that should run.
function _ZNK7testing8internal12UnitTestImpl22test_case_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 2246:int UnitTestImpl::test_case_to_run_count() const {
        2: 2247:  return CountIf(test_cases_, ShouldRunTestCase);
        2: 2247-block  0
call    0 returned 2
        -: 2248:}
        -: 2249:
        -: 2250:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2251:int UnitTestImpl::successful_test_count() const {
        1: 2252:  return SumOverTestCaseList(test_cases_, &TestCase::successful_test_count);
        1: 2252-block  0
call    0 returned 1
        -: 2253:}
        -: 2254:
        -: 2255:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 3 returned 100% blocks executed 100%
        3: 2256:int UnitTestImpl::failed_test_count() const {
        3: 2257:  return SumOverTestCaseList(test_cases_, &TestCase::failed_test_count);
        3: 2257-block  0
call    0 returned 3
        -: 2258:}
        -: 2259:
        -: 2260:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2261:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 2262:  return SumOverTestCaseList(test_cases_,
        1: 2262-block  0
call    0 returned 1
        1: 2263:                             &TestCase::reportable_disabled_test_count);
        -: 2264:}
        -: 2265:
        -: 2266:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2267:int UnitTestImpl::disabled_test_count() const {
    #####: 2268:  return SumOverTestCaseList(test_cases_, &TestCase::disabled_test_count);
    %%%%%: 2268-block  0
call    0 never executed
        -: 2269:}
        -: 2270:
        -: 2271:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2272:int UnitTestImpl::reportable_test_count() const {
    #####: 2273:  return SumOverTestCaseList(test_cases_, &TestCase::reportable_test_count);
    %%%%%: 2273-block  0
call    0 never executed
        -: 2274:}
        -: 2275:
        -: 2276:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2277:int UnitTestImpl::total_test_count() const {
    #####: 2278:  return SumOverTestCaseList(test_cases_, &TestCase::total_test_count);
    %%%%%: 2278-block  0
call    0 never executed
        -: 2279:}
        -: 2280:
        -: 2281:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 2282:int UnitTestImpl::test_to_run_count() const {
        2: 2283:  return SumOverTestCaseList(test_cases_, &TestCase::test_to_run_count);
        2: 2283-block  0
call    0 returned 2
        -: 2284:}
        -: 2285:
        -: 2286:// Returns the current OS stack trace as an std::string.
        -: 2287://
        -: 2288:// The maximum number of stack frames to be included is specified by
        -: 2289:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 2290:// specifies the number of top frames to be skipped, which doesn't
        -: 2291:// count against the number of frames to be included.
        -: 2292://
        -: 2293:// For example, if Foo() calls Bar(), which in turn calls
        -: 2294:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 2295:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 1 returned 100% blocks executed 100%
        1: 2296:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
        1: 2297:  return os_stack_trace_getter()->CurrentStackTrace(
        1: 2297-block  0
call    0 returned 1
        -: 2298:      static_cast<int>(GTEST_FLAG(stack_trace_depth)),
        -: 2299:      skip_count + 1
        -: 2300:      // Skips the user-specified number of frames plus this function
        -: 2301:      // itself.
        1: 2302:      );  // NOLINT
call    0 returned 1
        -: 2303:}
        -: 2304:
        -: 2305:// Returns the current time in milliseconds.
function _ZN7testing8internal15GetTimeInMillisEv called 27 returned 100% blocks executed 100%
       27: 2306:TimeInMillis GetTimeInMillis() {
        -: 2307:#if GTEST_OS_WINDOWS_MOBILE || defined(__BORLANDC__)
        -: 2308:  // Difference between 1970-01-01 and 1601-01-01 in milliseconds.
        -: 2309:  // http://analogous.blogspot.com/2005/04/epoch.html
        -: 2310:  const TimeInMillis kJavaEpochToWinFileTimeDelta =
        -: 2311:    static_cast<TimeInMillis>(116444736UL) * 100000UL;
        -: 2312:  const DWORD kTenthMicrosInMilliSecond = 10000;
        -: 2313:
        -: 2314:  SYSTEMTIME now_systime;
        -: 2315:  FILETIME now_filetime;
        -: 2316:  ULARGE_INTEGER now_int64;
        -: 2317:  // FIXME: Shouldn't this just use
        -: 2318:  //   GetSystemTimeAsFileTime()?
        -: 2319:  GetSystemTime(&now_systime);
        -: 2320:  if (SystemTimeToFileTime(&now_systime, &now_filetime)) {
        -: 2321:    now_int64.LowPart = now_filetime.dwLowDateTime;
        -: 2322:    now_int64.HighPart = now_filetime.dwHighDateTime;
        -: 2323:    now_int64.QuadPart = (now_int64.QuadPart / kTenthMicrosInMilliSecond) -
        -: 2324:      kJavaEpochToWinFileTimeDelta;
        -: 2325:    return now_int64.QuadPart;
        -: 2326:  }
        -: 2327:  return 0;
        -: 2328:#elif GTEST_OS_WINDOWS && !GTEST_HAS_GETTIMEOFDAY_
        -: 2329:  __timeb64 now;
        -: 2330:
        -: 2331:  // MSVC 8 deprecates _ftime64(), so we want to suppress warning 4996
        -: 2332:  // (deprecated function) there.
        -: 2333:  // FIXME: Use GetTickCount()?  Or use
        -: 2334:  //   SystemTimeToFileTime()
        -: 2335:  GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
        -: 2336:  _ftime64(&now);
        -: 2337:  GTEST_DISABLE_MSC_DEPRECATED_POP_()
        -: 2338:
        -: 2339:  return static_cast<TimeInMillis>(now.time) * 1000 + now.millitm;
        -: 2340:#elif GTEST_HAS_GETTIMEOFDAY_
        -: 2341:  struct timeval now;
       27: 2342:  gettimeofday(&now, NULL);
       27: 2342-block  0
call    0 returned 27
       27: 2343:  return static_cast<TimeInMillis>(now.tv_sec) * 1000 + now.tv_usec / 1000;
        -: 2344:#else
        -: 2345:# error "Don't know how to get the current time on your system."
        -: 2346:#endif
        -: 2347:}
        -: 2348:
        -: 2349:// Utilities
        -: 2350:
        -: 2351:// class String.
        -: 2352:
        -: 2353:#if GTEST_OS_WINDOWS_MOBILE
        -: 2354:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 2355:// memory using new. The caller is responsible for deleting the return
        -: 2356:// value using delete[]. Returns the wide string, or NULL if the
        -: 2357:// input is NULL.
        -: 2358:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 2359:  if (!ansi) return NULL;
        -: 2360:  const int length = strlen(ansi);
        -: 2361:  const int unicode_length =
        -: 2362:      MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -: 2363:                          NULL, 0);
        -: 2364:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 2365:  MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -: 2366:                      unicode, unicode_length);
        -: 2367:  unicode[unicode_length] = 0;
        -: 2368:  return unicode;
        -: 2369:}
        -: 2370:
        -: 2371:// Creates an ANSI string from the given wide string, allocating
        -: 2372:// memory using new. The caller is responsible for deleting the return
        -: 2373:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 2374:// input is NULL.
        -: 2375:const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {
        -: 2376:  if (!utf16_str) return NULL;
        -: 2377:  const int ansi_length =
        -: 2378:      WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
        -: 2379:                          NULL, 0, NULL, NULL);
        -: 2380:  char* ansi = new char[ansi_length + 1];
        -: 2381:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
        -: 2382:                      ansi, ansi_length, NULL, NULL);
        -: 2383:  ansi[ansi_length] = 0;
        -: 2384:  return ansi;
        -: 2385:}
        -: 2386:
        -: 2387:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2388:
        -: 2389:// Compares two C strings.  Returns true iff they have the same content.
        -: 2390://
        -: 2391:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 2392:// C string is considered different to any non-NULL C string,
        -: 2393:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 2394:bool String::CStringEquals(const char * lhs, const char * rhs) {
       2*: 2395:  if ( lhs == NULL ) return rhs == NULL;
        2: 2395-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2395-block  1
        -: 2396:
       2*: 2397:  if ( rhs == NULL ) return false;
        2: 2397-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2397-block  1
        -: 2398:
        2: 2399:  return strcmp(lhs, rhs) == 0;
        2: 2399-block  0
        -: 2400:}
        -: 2401:
        -: 2402:#if GTEST_HAS_STD_WSTRING || GTEST_HAS_GLOBAL_WSTRING
        -: 2403:
        -: 2404:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 2405:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2406:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 2407:                                     Message* msg) {
    #####: 2408:  for (size_t i = 0; i != length; ) {  // NOLINT
    %%%%%: 2408-block  0
    %%%%%: 2408-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 2408-block  2
    #####: 2409:    if (wstr[i] != L'\0') {
    %%%%%: 2409-block  0
branch  0 never executed
branch  1 never executed
    #####: 2410:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 2410-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2410-block  1
call    4 never executed
    $$$$$: 2410-block  2
call    5 never executed
    $$$$$: 2410-block  3
call    6 never executed
    #####: 2411:      while (i != length && wstr[i] != L'\0')
    %%%%%: 2411-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2411-block  1
branch  2 never executed
branch  3 never executed
    #####: 2412:        i++;
    %%%%%: 2412-block  0
        -: 2413:    } else {
    #####: 2414:      *msg << '\0';
    %%%%%: 2414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2415:      i++;
    %%%%%: 2415-block  0
        -: 2416:    }
        -: 2417:  }
    #####: 2418:}
    %%%%%: 2418-block  0
        -: 2419:
        -: 2420:#endif  // GTEST_HAS_STD_WSTRING || GTEST_HAS_GLOBAL_WSTRING
        -: 2421:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2422:void SplitString(const ::std::string& str, char delimiter,
        -: 2423:                 ::std::vector< ::std::string>* dest) {
    #####: 2424:  ::std::vector< ::std::string> parsed;
    %%%%%: 2424-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2424-block  1
call    2 never executed
    #####: 2425:  ::std::string::size_type pos = 0;
    #####: 2426:  while (::testing::internal::AlwaysTrue()) {
    %%%%%: 2426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2426-block  1
branch  3 never executed
branch  4 never executed
    #####: 2427:    const ::std::string::size_type colon = str.find(delimiter, pos);
    %%%%%: 2427-block  0
call    0 never executed
    #####: 2428:    if (colon == ::std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 2429:      parsed.push_back(str.substr(pos));
    %%%%%: 2429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2429-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2429-block  2
call    6 never executed
    $$$$$: 2429-block  3
call    7 never executed
    $$$$$: 2429-block  4
    #####: 2430:      break;
        -: 2431:    } else {
    #####: 2432:      parsed.push_back(str.substr(pos, colon - pos));
    %%%%%: 2432-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2432-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2432-block  2
call    6 never executed
    $$$$$: 2432-block  3
call    7 never executed
    $$$$$: 2432-block  4
    #####: 2433:      pos = colon + 1;
        -: 2434:    }
        -: 2435:  }
    #####: 2436:  dest->swap(parsed);
    %%%%%: 2436-block  0
call    0 never executed
    #####: 2437:}
        -: 2438:
        -: 2439:}  // namespace internal
        -: 2440:
        -: 2441:// Constructs an empty Message.
        -: 2442:// We allocate the stringstream separately because otherwise each use of
        -: 2443:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 2444:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 2445:// the stack space.
function _ZN7testing7MessageC2Ev called 68 returned 100% blocks executed 75%
       68: 2446:Message::Message() : ss_(new ::std::stringstream) {
       68: 2446-block  0
call    0 returned 68
call    1 returned 68
call    2 returned 68
branch  3 taken 68 (fallthrough)
branch  4 taken 0 (throw)
       68: 2446-block  1
call    5 returned 68
    $$$$$: 2446-block  2
call    6 never executed
    $$$$$: 2446-block  3
call    7 never executed
        -: 2447:  // By default, we want there to be enough precision when printing
        -: 2448:  // a double to a Message.
       68: 2449:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 68
call    1 returned 68
call    2 returned 68
branch  3 taken 68 (fallthrough)
branch  4 taken 0 (throw)
       68: 2450:}
       68: 2450-block  0
        -: 2451:
        -: 2452:// These two overloads allow streaming a wide C string to a Message
        -: 2453:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 2454:Message& Message::operator <<(const wchar_t* wide_c_str) {
    #####: 2455:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 2455-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2455-block  1
call    4 never executed
    %%%%%: 2455-block  2
    $$$$$: 2455-block  3
call    5 never executed
        -: 2456:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 2457:Message& Message::operator <<(wchar_t* wide_c_str) {
    #####: 2458:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 2458-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2458-block  1
call    4 never executed
    %%%%%: 2458-block  2
    $$$$$: 2458-block  3
call    5 never executed
        -: 2459:}
        -: 2460:
        -: 2461:#if GTEST_HAS_STD_WSTRING
        -: 2462:// Converts the given wide string to a narrow string using the UTF-8
        -: 2463:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 2464:Message& Message::operator <<(const ::std::wstring& wstr) {
    #####: 2465:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 2465-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2466:  return *this;
        -: 2467:}
        -: 2468:#endif  // GTEST_HAS_STD_WSTRING
        -: 2469:
        -: 2470:#if GTEST_HAS_GLOBAL_WSTRING
        -: 2471:// Converts the given wide string to a narrow string using the UTF-8
        -: 2472:// encoding, and streams the result to this Message object.
        -: 2473:Message& Message::operator <<(const ::wstring& wstr) {
        -: 2474:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
        -: 2475:  return *this;
        -: 2476:}
        -: 2477:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -: 2478:
        -: 2479:// Gets the text streamed to this object so far as an std::string.
        -: 2480:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 68 returned 100% blocks executed 100%
       68: 2481:std::string Message::GetString() const {
       68: 2482:  return internal::StringStreamToString(ss_.get());
       68: 2482-block  0
call    0 returned 68
call    1 returned 68
        -: 2483:}
        -: 2484:
        -: 2485:// AssertionResult constructors.
        -: 2486:// Used in EXPECT_TRUE/FALSE(assertion_result).
function _ZN7testing15AssertionResultC2ERKS0_ called 1 returned 100% blocks executed 82%
        1: 2487:AssertionResult::AssertionResult(const AssertionResult& other)
        1: 2488:    : success_(other.success_),
        1: 2489:      message_(other.message_.get() != NULL ?
        1: 2490:               new ::std::string(*other.message_) :
        1: 2490-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 2490-block  1
call    5 never executed
       2*: 2491:               static_cast< ::std::string*>(NULL)) {
        1: 2491-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 2491-block  1
    %%%%%: 2491-block  2
        1: 2491-block  3
call    3 returned 1
        1: 2492:}
        -: 2493:
        -: 2494:// Swaps two AssertionResults.
function _ZN7testing15AssertionResult4swapERS0_ called 0 returned 0% blocks executed 0%
    #####: 2495:void AssertionResult::swap(AssertionResult& other) {
        -: 2496:  using std::swap;
    #####: 2497:  swap(success_, other.success_);
    %%%%%: 2497-block  0
call    0 never executed
    #####: 2498:  swap(message_, other.message_);
call    0 never executed
    #####: 2499:}
        -: 2500:
        -: 2501:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
function _ZNK7testing15AssertionResultntEv called 0 returned 0% blocks executed 0%
    #####: 2502:AssertionResult AssertionResult::operator!() const {
    #####: 2503:  AssertionResult negation(!success_);
    %%%%%: 2503-block  0
call    0 never executed
    #####: 2504:  if (message_.get() != NULL)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2505:    negation << *message_;
    %%%%%: 2505-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2506:  return negation;
    %%%%%: 2506-block  0
    %%%%%: 2506-block  1
        -: 2507:}
        -: 2508:
        -: 2509:// Makes a successful assertion result.
function _ZN7testing16AssertionSuccessEv called 10 returned 100% blocks executed 100%
       10: 2510:AssertionResult AssertionSuccess() {
       10: 2511:  return AssertionResult(true);
       10: 2511-block  0
call    0 returned 10
        -: 2512:}
        -: 2513:
        -: 2514:// Makes a failed assertion result.
function _ZN7testing16AssertionFailureEv called 1 returned 100% blocks executed 100%
        1: 2515:AssertionResult AssertionFailure() {
        1: 2516:  return AssertionResult(false);
        1: 2516-block  0
call    0 returned 1
        -: 2517:}
        -: 2518:
        -: 2519:// Makes a failed assertion result with the given failure message.
        -: 2520:// Deprecated; use AssertionFailure() << message.
function _ZN7testing16AssertionFailureERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2521:AssertionResult AssertionFailure(const Message& message) {
    #####: 2522:  return AssertionFailure() << message;
    %%%%%: 2522-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2522-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2522-block  2
    %%%%%: 2522-block  3
call    7 never executed
    %%%%%: 2522-block  4
    $$$$$: 2522-block  5
call    8 never executed
        -: 2523:}
        -: 2524:
        -: 2525:namespace internal {
        -: 2526:
        -: 2527:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 2528:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 2529:                                            const std::vector<size_t>& right) {
        -: 2530:  std::vector<std::vector<double> > costs(
    #####: 2531:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 2531-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2531-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 2531-block  2
    $$$$$: 2531-block  3
    $$$$$: 2531-block  4
    $$$$$: 2531-block  5
call   13 never executed
        -: 2532:  std::vector<std::vector<EditType> > best_move(
    #####: 2533:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2533-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 2533-block  1
call   12 never executed
    $$$$$: 2533-block  2
    $$$$$: 2533-block  3
    $$$$$: 2533-block  4
    $$$$$: 2533-block  5
call   13 never executed
        -: 2534:
        -: 2535:  // Populate for empty right.
    #####: 2536:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 2536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2537:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 2537-block  0
call    0 never executed
call    1 never executed
    #####: 2538:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 2539:  }
        -: 2540:  // Populate for empty left.
    #####: 2541:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 2541-block  0
    %%%%%: 2541-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2542:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 2542-block  0
call    0 never executed
call    1 never executed
    #####: 2543:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 2544:  }
        -: 2545:
    #####: 2546:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 2546-block  0
    %%%%%: 2546-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2546-block  2
    #####: 2547:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 2547-block  0
    %%%%%: 2547-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2547-block  2
    #####: 2548:      if (left[l_i] == right[r_i]) {
    %%%%%: 2548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2549:        // Found a match. Consume it.
    #####: 2550:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 2550-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2551:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 2552:        continue;
        -: 2553:      }
        -: 2554:
    #####: 2555:      const double add = costs[l_i + 1][r_i];
    %%%%%: 2555-block  0
call    0 never executed
call    1 never executed
    #####: 2556:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 2557:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 2558:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 2558-block  0
branch  2 never executed
branch  3 never executed
    #####: 2559:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 2559-block  0
call    0 never executed
call    1 never executed
    #####: 2560:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 2561:      } else if (remove < add && remove < replace) {
    %%%%%: 2561-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2561-block  1
branch  2 never executed
branch  3 never executed
    #####: 2562:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 2562-block  0
call    0 never executed
call    1 never executed
    #####: 2563:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 2564:      } else {
        -: 2565:        // We make replace a little more expensive than add/remove to lower
        -: 2566:        // their priority.
    #####: 2567:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 2567-block  0
call    0 never executed
call    1 never executed
    #####: 2568:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 2569:      }
        -: 2570:    }
        -: 2571:  }
        -: 2572:
        -: 2573:  // Reconstruct the best path. We do it in reverse order.
    #####: 2574:  std::vector<EditType> best_path;
    %%%%%: 2574-block  0
call    0 never executed
    #####: 2575:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 2575-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 2575-block  1
branch  4 never executed
branch  5 never executed
    #####: 2576:    EditType move = best_move[l_i][r_i];
    %%%%%: 2576-block  0
call    0 never executed
call    1 never executed
    #####: 2577:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2578:    l_i -= move != kAdd;
    #####: 2579:    r_i -= move != kRemove;
    %%%%%: 2579-block  0
        -: 2580:  }
    #####: 2581:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 2581-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2582:  return best_path;
    %%%%%: 2582-block  0
    %%%%%: 2582-block  1
        -: 2583:}
        -: 2584:
        -: 2585:namespace {
        -: 2586:
        -: 2587:// Helper class to convert string into ids with deduplication.
        -: 2588:class InternalStrings {
        -: 2589: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2590:  size_t GetId(const std::string& str) {
    #####: 2591:    IdMap::iterator it = ids_.find(str);
    %%%%%: 2591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2592:    if (it != ids_.end()) return it->second;
    %%%%%: 2592-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2592-block  1
call    4 never executed
    #####: 2593:    size_t id = ids_.size();
    %%%%%: 2593-block  0
call    0 never executed
    #####: 2594:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2594-block  0
        -: 2595:  }
        -: 2596:
        -: 2597: private:
        -: 2598:  typedef std::map<std::string, size_t> IdMap;
        -: 2599:  IdMap ids_;
        -: 2600:};
        -: 2601:
        -: 2602:}  // namespace
        -: 2603:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 2604:std::vector<EditType> CalculateOptimalEdits(
        -: 2605:    const std::vector<std::string>& left,
        -: 2606:    const std::vector<std::string>& right) {
    #####: 2607:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 2607-block  0
call    0 never executed
call    1 never executed
    %%%%%: 2607-block  1
call    2 never executed
call    3 never executed
    $$$$$: 2607-block  2
call    4 never executed
    $$$$$: 2607-block  3
call    5 never executed
        -: 2608:  {
    #####: 2609:    InternalStrings intern_table;
call    0 never executed
    %%%%%: 2609-block  0
call    1 never executed
    $$$$$: 2609-block  1
call    2 never executed
    #####: 2610:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 2610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2611:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 2611-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2611-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2611-block  2
    $$$$$: 2611-block  3
        -: 2612:    }
    #####: 2613:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 2613-block  0
    %%%%%: 2613-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2614:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 2614-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2614-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2614-block  2
    $$$$$: 2614-block  3
        -: 2615:    }
        -: 2616:  }
    #####: 2617:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2617-block  0
    %%%%%: 2617-block  1
        -: 2618:}
        -: 2619:
        -: 2620:namespace {
        -: 2621:
        -: 2622:// Helper class that holds the state for one hunk and prints it out to the
        -: 2623:// stream.
        -: 2624:// It reorders adds/removes when possible to group all removes before all
        -: 2625:// adds. It also adds the hunk header before printint into the stream.
        -: 2626:class Hunk {
        -: 2627: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Emm called 0 returned 0% blocks executed 0%
    #####: 2628:  Hunk(size_t left_start, size_t right_start)
    #####: 2629:      : left_start_(left_start),
        -: 2630:        right_start_(right_start),
        -: 2631:        adds_(),
        -: 2632:        removes_(),
    #####: 2633:        common_() {}
    %%%%%: 2633-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2634:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 2635:  void PushLine(char edit, const char* line) {
    #####: 2636:    switch (edit) {
    %%%%%: 2636-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2637:      case ' ':
    #####: 2638:        ++common_;
    #####: 2639:        FlushEdits();
    %%%%%: 2639-block  0
call    0 never executed
    #####: 2640:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2640-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2640-block  1
    $$$$$: 2640-block  2
call    6 never executed
    #####: 2641:        break;
    %%%%%: 2641-block  0
    #####: 2642:      case '-':
    #####: 2643:        ++removes_;
    #####: 2644:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 2644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2644-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  2
    $$$$$: 2644-block  3
call    6 never executed
    #####: 2645:        break;
    %%%%%: 2645-block  0
    #####: 2646:      case '+':
    #####: 2647:        ++adds_;
    #####: 2648:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 2648-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2648-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2648-block  2
    #####: 2649:        break;
    %%%%%: 2649-block  0
        -: 2650:    }
    #####: 2651:  }
    %%%%%: 2651-block  0
        -: 2652:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 2653:  void PrintTo(std::ostream* os) {
    #####: 2654:    PrintHeader(os);
    %%%%%: 2654-block  0
call    0 never executed
    #####: 2655:    FlushEdits();
call    0 never executed
    #####: 2656:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 2657:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 2658:         it != hunk_.end(); ++it) {
    %%%%%: 2658-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2658-block  1
call    5 never executed
    #####: 2659:      *os << it->first << it->second << "\n";
    %%%%%: 2659-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2659-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2659-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 2660:    }
    #####: 2661:  }
    %%%%%: 2661-block  0
        -: 2662:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 2663:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 2663-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2663-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2663-block  2
    %%%%%: 2663-block  3
    %%%%%: 2663-block  4
        -: 2664:
        -: 2665: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 2666:  void FlushEdits() {
    #####: 2667:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 2667-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2668:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2669:  }
        -: 2670:
        -: 2671:  // Print a unified diff header for one hunk.
        -: 2672:  // The format is
        -: 2673:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 2674:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 2675:  void PrintHeader(std::ostream* ss) const {
    #####: 2676:    *ss << "@@ ";
    %%%%%: 2676-block  0
call    0 never executed
    #####: 2677:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 2678:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 2678-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2679:    }
    #####: 2680:    if (removes_ && adds_) {
    %%%%%: 2680-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2680-block  1
branch  2 never executed
branch  3 never executed
    #####: 2681:      *ss << " ";
    %%%%%: 2681-block  0
call    0 never executed
        -: 2682:    }
    #####: 2683:    if (adds_) {
    %%%%%: 2683-block  0
branch  0 never executed
branch  1 never executed
    #####: 2684:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 2684-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2685:    }
    #####: 2686:    *ss << " @@\n";
    %%%%%: 2686-block  0
call    0 never executed
    #####: 2687:  }
        -: 2688:
        -: 2689:  size_t left_start_, right_start_;
        -: 2690:  size_t adds_, removes_, common_;
        -: 2691:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 2692:};
        -: 2693:
        -: 2694:}  // namespace
        -: 2695:
        -: 2696:// Create a list of diff hunks in Unified diff format.
        -: 2697:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 2698:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 2699:// addition.
        -: 2700:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 2701:// If two hunks are close enough that their contexts overlap, then they are
        -: 2702:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 2703:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 2704:                              const std::vector<std::string>& right,
        -: 2705:                              size_t context) {
    #####: 2706:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 2706-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 2706-block  1
call    4 never executed
        -: 2707:
    #####: 2708:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 2709:  std::stringstream ss;
    %%%%%: 2709-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2709-block  1
call    4 never executed
    $$$$$: 2709-block  2
call    5 never executed
    #####: 2710:  while (edit_i < edits.size()) {
    %%%%%: 2710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2710-block  1
        -: 2711:    // Find first edit.
    #####: 2712:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 2712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2712-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2712-block  2
    %%%%%: 2712-block  3
    %%%%%: 2712-block  4
branch  6 never executed
branch  7 never executed
    #####: 2713:      ++l_i;
    #####: 2714:      ++r_i;
    #####: 2715:      ++edit_i;
    %%%%%: 2715-block  0
        -: 2716:    }
        -: 2717:
        -: 2718:    // Find the first line to include in the hunk.
    #####: 2719:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 2719-block  0
call    0 never executed
    #####: 2720:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    $$$$$: 2720-block  0
call    1 never executed
    #####: 2721:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 2721-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2721-block  1
    #####: 2722:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 2722-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2723:    }
        -: 2724:
        -: 2725:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 2726:    // is over.
    #####: 2727:    size_t n_suffix = 0;
    %%%%%: 2727-block  0
    #####: 2728:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 2728-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2729:      if (n_suffix >= context) {
    %%%%%: 2729-block  0
branch  0 never executed
branch  1 never executed
        -: 2730:        // Continue only if the next hunk is very close.
    #####: 2731:        std::vector<EditType>::const_iterator it = edits.begin() + edit_i;
    %%%%%: 2731-block  0
call    0 never executed
call    1 never executed
    #####: 2732:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 2732-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2732-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2732-block  2
    %%%%%: 2732-block  3
    %%%%%: 2732-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 2732-block  5
call    9 never executed
    #####: 2733:        if (it == edits.end() || (it - edits.begin()) - edit_i >= context) {
    %%%%%: 2733-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2733-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2733-block  2
    %%%%%: 2733-block  3
    %%%%%: 2733-block  4
branch  8 never executed
branch  9 never executed
        -: 2734:          // There is no next edit or it is too far away.
    #####: 2735:          break;
    %%%%%: 2735-block  0
        -: 2736:        }
        -: 2737:      }
        -: 2738:
    #####: 2739:      EditType edit = edits[edit_i];
    %%%%%: 2739-block  0
call    0 never executed
        -: 2740:      // Reset count when a non match is found.
    #####: 2741:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 2741-block  0
    %%%%%: 2741-block  1
        -: 2742:
    #####: 2743:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 2743-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2743-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2743-block  2
branch  4 never executed
branch  5 never executed
    #####: 2744:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 2744-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2744-block  1
    %%%%%: 2744-block  2
    %%%%%: 2744-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2745:      }
    #####: 2746:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 2746-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2746-block  1
branch  2 never executed
branch  3 never executed
    #####: 2747:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 2747-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2748:      }
        -: 2749:
        -: 2750:      // Advance indices, depending on edit type.
    #####: 2751:      l_i += edit != kAdd;
    #####: 2752:      r_i += edit != kRemove;
    %%%%%: 2752-block  0
        -: 2753:    }
        -: 2754:
    #####: 2755:    if (!hunk.has_edits()) {
    %%%%%: 2755-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2756:      // We are done. We don't want this hunk.
    #####: 2757:      break;
    %%%%%: 2757-block  0
        -: 2758:    }
        -: 2759:
    #####: 2760:    hunk.PrintTo(&ss);
    %%%%%: 2760-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2761:  }
    #####: 2762:  return ss.str();
    %%%%%: 2762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2762-block  1
    %%%%%: 2762-block  2
        -: 2763:}
        -: 2764:
        -: 2765:}  // namespace edit_distance
        -: 2766:
        -: 2767:namespace {
        -: 2768:
        -: 2769:// The string representation of the values received in EqFailure() are already
        -: 2770:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 2771:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 53%
        2: 2772:std::vector<std::string> SplitEscapedString(const std::string& str) {
        2: 2773:  std::vector<std::string> lines;
        2: 2773-block  0
call    0 returned 2
        2: 2774:  size_t start = 0, end = str.size();
call    0 returned 2
       2*: 2775:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2775-block  0
call    2 returned 2
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 2775-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2775-block  2
        2: 2775-block  3
        2: 2775-block  4
branch  8 taken 0 (fallthrough)
branch  9 taken 2
    #####: 2776:    ++start;
    #####: 2777:    --end;
    %%%%%: 2777-block  0
        -: 2778:  }
        2: 2779:  bool escaped = false;
      106: 2780:  for (size_t i = start; i + 1 < end; ++i) {
        2: 2780-block  0
      106: 2780-block  1
branch  0 taken 104 (fallthrough)
branch  1 taken 2
      104: 2780-block  2
      104: 2781:    if (escaped) {
      104: 2781-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 104
    #####: 2782:      escaped = false;
    #####: 2783:      if (str[i] == 'n') {
    %%%%%: 2783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2784:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 2784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2784-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2784-block  2
call    6 never executed
    $$$$$: 2784-block  3
call    7 never executed
    $$$$$: 2784-block  4
    #####: 2785:        start = i + 1;
        -: 2786:      }
        -: 2787:    } else {
      104: 2788:      escaped = str[i] == '\\';
      104: 2788-block  0
call    0 returned 104
        -: 2789:    }
        -: 2790:  }
        2: 2791:  lines.push_back(str.substr(start, end - start));
        2: 2791-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2791-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 2791-block  2
call    6 returned 2
    $$$$$: 2791-block  3
call    7 never executed
    $$$$$: 2791-block  4
        2: 2792:  return lines;
        2: 2792-block  0
        -: 2793:}
        -: 2794:
        -: 2795:}  // namespace
        -: 2796:
        -: 2797:// Constructs and returns the message for an equality assertion
        -: 2798:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 2799://
        -: 2800:// The first four parameters are the expressions used in the assertion
        -: 2801:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 2802:// where foo is 5 and bar is 6, we have:
        -: 2803://
        -: 2804://   lhs_expression: "foo"
        -: 2805://   rhs_expression: "bar"
        -: 2806://   lhs_value:      "5"
        -: 2807://   rhs_value:      "6"
        -: 2808://
        -: 2809:// The ignoring_case parameter is true iff the assertion is a
        -: 2810:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 2811:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 1 returned 100% blocks executed 66%
        1: 2812:AssertionResult EqFailure(const char* lhs_expression,
        -: 2813:                          const char* rhs_expression,
        -: 2814:                          const std::string& lhs_value,
        -: 2815:                          const std::string& rhs_value,
        -: 2816:                          bool ignoring_case) {
        1: 2817:  Message msg;
        1: 2817-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 2817-block  1
call    3 never executed
        1: 2818:  msg << "Expected equality of these values:";
        1: 2818-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2819:  msg << "\n  " << lhs_expression;
        1: 2819-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2819-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2820:  if (lhs_value != lhs_expression) {
        1: 2820-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2820-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 2821:    msg << "\n    Which is: " << lhs_value;
        1: 2821-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2821-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 2822:  }
        1: 2823:  msg << "\n  " << rhs_expression;
        1: 2823-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2823-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2824:  if (rhs_value != rhs_expression) {
        1: 2824-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2824-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 2825:    msg << "\n    Which is: " << rhs_value;
        1: 2825-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2825-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 2826:  }
        -: 2827:
        1: 2828:  if (ignoring_case) {
        1: 2828-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2829:    msg << "\nIgnoring case";
    %%%%%: 2829-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2830:  }
        -: 2831:
       1*: 2832:  if (!lhs_value.empty() && !rhs_value.empty()) {
        1: 2832-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 2832-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1: 2832-block  2
    %%%%%: 2832-block  3
        1: 2832-block  4
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -: 2833:    const std::vector<std::string> lhs_lines =
        2: 2834:        SplitEscapedString(lhs_value);
        1: 2834-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$: 2834-block  1
call    4 never executed
        -: 2835:    const std::vector<std::string> rhs_lines =
        2: 2836:        SplitEscapedString(rhs_value);
        1: 2836-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2836-block  1
call    3 returned 1
    $$$$$: 2836-block  2
call    4 never executed
       1*: 2837:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
        1: 2837-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 2837-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 2837-block  2
        1: 2837-block  3
        1: 2837-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    #####: 2838:      msg << "\nWith diff:\n"
    %%%%%: 2838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2839:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 2839-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2839-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2839-block  2
call    6 never executed
    $$$$$: 2839-block  3
call    7 never executed
    $$$$$: 2839-block  4
        -: 2840:    }
        -: 2841:  }
        -: 2842:
        2: 2843:  return AssertionFailure() << msg;
        1: 2843-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2843-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2843-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 2843-block  3
        1: 2843-block  4
call    9 returned 1
call   10 returned 1
        1: 2843-block  5
    $$$$$: 2843-block  6
call   11 never executed
    $$$$$: 2843-block  7
        -: 2844:}
        -: 2845:
        -: 2846:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 2847:std::string GetBoolAssertionFailureMessage(
        -: 2848:    const AssertionResult& assertion_result,
        -: 2849:    const char* expression_text,
        -: 2850:    const char* actual_predicate_value,
        -: 2851:    const char* expected_predicate_value) {
    #####: 2852:  const char* actual_message = assertion_result.message();
    %%%%%: 2852-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2853:  Message msg;
    %%%%%: 2853-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2853-block  1
call    3 never executed
    $$$$$: 2853-block  2
call    4 never executed
    #####: 2854:  msg << "Value of: " << expression_text
    %%%%%: 2854-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2854-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2855:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 2855-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2855-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2856:  if (actual_message[0] != '\0')
    %%%%%: 2856-block  0
branch  0 never executed
branch  1 never executed
    #####: 2857:    msg << " (" << actual_message << ")";
    %%%%%: 2857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2857-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2857-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2858:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 2858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2858-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2859:  return msg.GetString();
    %%%%%: 2859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2859-block  1
    %%%%%: 2859-block  2
        -: 2860:}
        -: 2861:
        -: 2862:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 2863:AssertionResult DoubleNearPredFormat(const char* expr1,
        -: 2864:                                     const char* expr2,
        -: 2865:                                     const char* abs_error_expr,
        -: 2866:                                     double val1,
        -: 2867:                                     double val2,
        -: 2868:                                     double abs_error) {
    #####: 2869:  const double diff = fabs(val1 - val2);
    #####: 2870:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 2870-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2870-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2870-block  2
        -: 2871:
        -: 2872:  // FIXME: do not print the value of an expression if it's
        -: 2873:  // already a literal.
    #####: 2874:  return AssertionFailure()
    %%%%%: 2874-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2874-block  1
call    3 never executed
    $$$$$: 2874-block  2
call    4 never executed
    $$$$$: 2874-block  3
    #####: 2875:      << "The difference between " << expr1 << " and " << expr2
    %%%%%: 2875-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2875-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2875-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2875-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2876:      << " is " << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 2876-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2876-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2876-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2876-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2876-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 2877:      << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 2877-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2877-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2877-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2877-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2878:      << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 2878-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2878-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2878-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2878-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2879:      << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 2879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2879-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2879-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2879-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2879-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2879-block  5
        -: 2880:}
        -: 2881:
        -: 2882:
        -: 2883:// Helper template for implementing FloatLE() and DoubleLE().
        -: 2884:template <typename RawType>
    #####: 2885:AssertionResult FloatingPointLE(const char* expr1,
        -: 2886:                                const char* expr2,
        -: 2887:                                RawType val1,
        -: 2888:                                RawType val2) {
        -: 2889:  // Returns success if val1 is less than val2,
    #####: 2890:  if (val1 < val2) {
    #####: 2891:    return AssertionSuccess();
        -: 2892:  }
        -: 2893:
        -: 2894:  // or if val1 is almost equal to val2.
    #####: 2895:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 2896:  if (lhs.AlmostEquals(rhs)) {
    #####: 2897:    return AssertionSuccess();
        -: 2898:  }
        -: 2899:
        -: 2900:  // Note that the above two checks will both fail if either val1 or
        -: 2901:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 2902:  // any predicate involving a NaN must return false.
        -: 2903:
    #####: 2904:  ::std::stringstream val1_ss;
    #####: 2905:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 2906:          << val1;
        -: 2907:
    #####: 2908:  ::std::stringstream val2_ss;
    #####: 2909:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 2910:          << val2;
        -: 2911:
        -: 2912:  return AssertionFailure()
    #####: 2913:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 2914:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 2915:      << StringStreamToString(&val2_ss);
        -: 2916:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 2885:AssertionResult FloatingPointLE(const char* expr1,
        -: 2886:                                const char* expr2,
        -: 2887:                                RawType val1,
        -: 2888:                                RawType val2) {
        -: 2889:  // Returns success if val1 is less than val2,
    #####: 2890:  if (val1 < val2) {
    %%%%%: 2890-block  0
branch  0 never executed
branch  1 never executed
    #####: 2891:    return AssertionSuccess();
    %%%%%: 2891-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2891-block  1
        -: 2892:  }
        -: 2893:
        -: 2894:  // or if val1 is almost equal to val2.
    #####: 2895:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 2895-block  0
call    0 never executed
call    1 never executed
    #####: 2896:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2896-block  0
branch  3 never executed
branch  4 never executed
    #####: 2897:    return AssertionSuccess();
    %%%%%: 2897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2897-block  1
        -: 2898:  }
        -: 2899:
        -: 2900:  // Note that the above two checks will both fail if either val1 or
        -: 2901:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 2902:  // any predicate involving a NaN must return false.
        -: 2903:
    #####: 2904:  ::std::stringstream val1_ss;
    %%%%%: 2904-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2904-block  1
call    5 never executed
    #####: 2905:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 2905-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2906:          << val1;
    %%%%%: 2906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2907:
    #####: 2908:  ::std::stringstream val2_ss;
    %%%%%: 2908-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2908-block  1
call    4 never executed
    #####: 2909:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 2909-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2910:          << val2;
    %%%%%: 2910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2911:
        -: 2912:  return AssertionFailure()
    #####: 2913:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 2913-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2913-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2913-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2913-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2913-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2913-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 2913-block  6
call   19 never executed
    $$$$$: 2913-block  7
    #####: 2914:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 2914-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2914-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2914-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2914-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 2914-block  4
call   13 never executed
    $$$$$: 2914-block  5
    #####: 2915:      << StringStreamToString(&val2_ss);
    %%%%%: 2915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2915-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2915-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2915-block  3
    %%%%%: 2915-block  4
call    9 never executed
call   10 never executed
    $$$$$: 2915-block  5
call   11 never executed
    $$$$$: 2915-block  6
        -: 2916:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 2885:AssertionResult FloatingPointLE(const char* expr1,
        -: 2886:                                const char* expr2,
        -: 2887:                                RawType val1,
        -: 2888:                                RawType val2) {
        -: 2889:  // Returns success if val1 is less than val2,
    #####: 2890:  if (val1 < val2) {
    %%%%%: 2890-block  0
branch  0 never executed
branch  1 never executed
    #####: 2891:    return AssertionSuccess();
    %%%%%: 2891-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2891-block  1
        -: 2892:  }
        -: 2893:
        -: 2894:  // or if val1 is almost equal to val2.
    #####: 2895:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 2895-block  0
call    0 never executed
call    1 never executed
    #####: 2896:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2896-block  0
branch  3 never executed
branch  4 never executed
    #####: 2897:    return AssertionSuccess();
    %%%%%: 2897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2897-block  1
        -: 2898:  }
        -: 2899:
        -: 2900:  // Note that the above two checks will both fail if either val1 or
        -: 2901:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 2902:  // any predicate involving a NaN must return false.
        -: 2903:
    #####: 2904:  ::std::stringstream val1_ss;
    %%%%%: 2904-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2904-block  1
call    5 never executed
    #####: 2905:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 2905-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2906:          << val1;
    %%%%%: 2906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2907:
    #####: 2908:  ::std::stringstream val2_ss;
    %%%%%: 2908-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2908-block  1
call    4 never executed
    #####: 2909:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 2909-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2910:          << val2;
    %%%%%: 2910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2911:
        -: 2912:  return AssertionFailure()
    #####: 2913:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 2913-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2913-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2913-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2913-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2913-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2913-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 2913-block  6
call   19 never executed
    $$$$$: 2913-block  7
    #####: 2914:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 2914-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2914-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2914-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2914-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 2914-block  4
call   13 never executed
    $$$$$: 2914-block  5
    #####: 2915:      << StringStreamToString(&val2_ss);
    %%%%%: 2915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2915-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2915-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2915-block  3
    %%%%%: 2915-block  4
call    9 never executed
call   10 never executed
    $$$$$: 2915-block  5
call   11 never executed
    $$$$$: 2915-block  6
        -: 2916:}
------------------
        -: 2917:
        -: 2918:}  // namespace internal
        -: 2919:
        -: 2920:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 2921:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 2922:AssertionResult FloatLE(const char* expr1, const char* expr2,
        -: 2923:                        float val1, float val2) {
    #####: 2924:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 2924-block  0
call    0 never executed
        -: 2925:}
        -: 2926:
        -: 2927:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 2928:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 2929:AssertionResult DoubleLE(const char* expr1, const char* expr2,
        -: 2930:                         double val1, double val2) {
    #####: 2931:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 2931-block  0
call    0 never executed
        -: 2932:}
        -: 2933:
        -: 2934:namespace internal {
        -: 2935:
        -: 2936:// The helper function for {ASSERT|EXPECT}_EQ with int or enum
        -: 2937:// arguments.
function _ZN7testing8internal11CmpHelperEQEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 2938:AssertionResult CmpHelperEQ(const char* lhs_expression,
        -: 2939:                            const char* rhs_expression,
        -: 2940:                            BiggestInt lhs,
        -: 2941:                            BiggestInt rhs) {
    #####: 2942:  if (lhs == rhs) {
    %%%%%: 2942-block  0
branch  0 never executed
branch  1 never executed
    #####: 2943:    return AssertionSuccess();
    %%%%%: 2943-block  0
call    0 never executed
        -: 2944:  }
        -: 2945:
        -: 2946:  return EqFailure(lhs_expression,
        -: 2947:                   rhs_expression,
    #####: 2948:                   FormatForComparisonFailureMessage(lhs, rhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2948-block  0
call    3 never executed
    $$$$$: 2948-block  1
call    4 never executed
    $$$$$: 2948-block  2
    #####: 2949:                   FormatForComparisonFailureMessage(rhs, lhs),
    %%%%%: 2949-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2949-block  1
call    2 never executed
    #####: 2950:                   false);
    %%%%%: 2950-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2950-block  1
        -: 2951:}
        -: 2952:
        -: 2953:// A macro for implementing the helper functions needed to implement
        -: 2954:// ASSERT_?? and EXPECT_?? with integer or enum arguments.  It is here
        -: 2955:// just to avoid copy-and-paste of similar code.
        -: 2956:#define GTEST_IMPL_CMP_HELPER_(op_name, op)\
        -: 2957:AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
        -: 2958:                                   BiggestInt val1, BiggestInt val2) {\
        -: 2959:  if (val1 op val2) {\
        -: 2960:    return AssertionSuccess();\
        -: 2961:  } else {\
        -: 2962:    return AssertionFailure() \
        -: 2963:        << "Expected: (" << expr1 << ") " #op " (" << expr2\
        -: 2964:        << "), actual: " << FormatForComparisonFailureMessage(val1, val2)\
        -: 2965:        << " vs " << FormatForComparisonFailureMessage(val2, val1);\
        -: 2966:  }\
        -: 2967:}
        -: 2968:
        -: 2969:// Implements the helper function for {ASSERT|EXPECT}_NE with int or
        -: 2970:// enum arguments.
function _ZN7testing8internal11CmpHelperNEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 2971:GTEST_IMPL_CMP_HELPER_(NE, !=)
    %%%%%: 2971-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2971-block  1
call    2 never executed
    %%%%%: 2971-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2971-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2971-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2971-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2971-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 2971-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2971-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 2971-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 2971-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 2971-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 2971-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 2971-block 13
    %%%%%: 2971-block 14
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 2971-block 15
call   40 never executed
    $$$$$: 2971-block 16
    $$$$$: 2971-block 17
call   41 never executed
    $$$$$: 2971-block 18
    $$$$$: 2971-block 19
call   42 never executed
        -: 2972:// Implements the helper function for {ASSERT|EXPECT}_LE with int or
        -: 2973:// enum arguments.
function _ZN7testing8internal11CmpHelperLEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 2974:GTEST_IMPL_CMP_HELPER_(LE, <=)
    %%%%%: 2974-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2974-block  1
call    2 never executed
    %%%%%: 2974-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2974-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2974-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2974-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2974-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 2974-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2974-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 2974-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 2974-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 2974-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 2974-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 2974-block 13
    %%%%%: 2974-block 14
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 2974-block 15
call   40 never executed
    $$$$$: 2974-block 16
    $$$$$: 2974-block 17
call   41 never executed
    $$$$$: 2974-block 18
    $$$$$: 2974-block 19
call   42 never executed
        -: 2975:// Implements the helper function for {ASSERT|EXPECT}_LT with int or
        -: 2976:// enum arguments.
function _ZN7testing8internal11CmpHelperLTEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 2977:GTEST_IMPL_CMP_HELPER_(LT, < )
    %%%%%: 2977-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2977-block  1
call    2 never executed
    %%%%%: 2977-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2977-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2977-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2977-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2977-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 2977-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2977-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 2977-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 2977-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 2977-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 2977-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 2977-block 13
    %%%%%: 2977-block 14
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 2977-block 15
call   40 never executed
    $$$$$: 2977-block 16
    $$$$$: 2977-block 17
call   41 never executed
    $$$$$: 2977-block 18
    $$$$$: 2977-block 19
call   42 never executed
        -: 2978:// Implements the helper function for {ASSERT|EXPECT}_GE with int or
        -: 2979:// enum arguments.
function _ZN7testing8internal11CmpHelperGEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 2980:GTEST_IMPL_CMP_HELPER_(GE, >=)
    %%%%%: 2980-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2980-block  1
call    2 never executed
    %%%%%: 2980-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2980-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2980-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2980-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2980-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 2980-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2980-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 2980-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 2980-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 2980-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 2980-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 2980-block 13
    %%%%%: 2980-block 14
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 2980-block 15
call   40 never executed
    $$$$$: 2980-block 16
    $$$$$: 2980-block 17
call   41 never executed
    $$$$$: 2980-block 18
    $$$$$: 2980-block 19
call   42 never executed
        -: 2981:// Implements the helper function for {ASSERT|EXPECT}_GT with int or
        -: 2982:// enum arguments.
function _ZN7testing8internal11CmpHelperGTEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 2983:GTEST_IMPL_CMP_HELPER_(GT, > )
    %%%%%: 2983-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2983-block  1
call    2 never executed
    %%%%%: 2983-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2983-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2983-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2983-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2983-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 2983-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 2983-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 2983-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 2983-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 2983-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 2983-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 2983-block 13
    %%%%%: 2983-block 14
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 2983-block 15
call   40 never executed
    $$$$$: 2983-block 16
    $$$$$: 2983-block 17
call   41 never executed
    $$$$$: 2983-block 18
    $$$$$: 2983-block 19
call   42 never executed
        -: 2984:
        -: 2985:#undef GTEST_IMPL_CMP_HELPER_
        -: 2986:
        -: 2987:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 2988:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2989:                               const char* rhs_expression,
        -: 2990:                               const char* lhs,
        -: 2991:                               const char* rhs) {
    #####: 2992:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 2992-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2993:    return AssertionSuccess();
    %%%%%: 2993-block  0
call    0 never executed
        -: 2994:  }
        -: 2995:
        -: 2996:  return EqFailure(lhs_expression,
        -: 2997:                   rhs_expression,
    #####: 2998:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2998-block  0
call    3 never executed
    $$$$$: 2998-block  1
call    4 never executed
    $$$$$: 2998-block  2
    #####: 2999:                   PrintToString(rhs),
    %%%%%: 2999-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2999-block  1
call    2 never executed
    #####: 3000:                   false);
    %%%%%: 3000-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3000-block  1
        -: 3001:}
        -: 3002:
        -: 3003:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 3004:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 3005:                                   const char* rhs_expression,
        -: 3006:                                   const char* lhs,
        -: 3007:                                   const char* rhs) {
    #####: 3008:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 3008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3009:    return AssertionSuccess();
    %%%%%: 3009-block  0
call    0 never executed
        -: 3010:  }
        -: 3011:
        -: 3012:  return EqFailure(lhs_expression,
        -: 3013:                   rhs_expression,
    #####: 3014:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3014-block  0
call    3 never executed
    $$$$$: 3014-block  1
call    4 never executed
    $$$$$: 3014-block  2
    #####: 3015:                   PrintToString(rhs),
    %%%%%: 3015-block  0
call    0 never executed
call    1 never executed
    $$$$$: 3015-block  1
call    2 never executed
    #####: 3016:                   true);
    %%%%%: 3016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3016-block  1
        -: 3017:}
        -: 3018:
        -: 3019:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 3020:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 3021:                               const char* s2_expression,
        -: 3022:                               const char* s1,
        -: 3023:                               const char* s2) {
    #####: 3024:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 3024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3025:    return AssertionSuccess();
    %%%%%: 3025-block  0
call    0 never executed
        -: 3026:  } else {
    #####: 3027:    return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 3027-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3027-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3027-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3027-block  3
call   10 never executed
    $$$$$: 3027-block  4
call   11 never executed
    #####: 3028:                              << s2_expression << "), actual: \""
    %%%%%: 3028-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3028-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3029:                              << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 3029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3029-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3029-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3029-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3029-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3029-block  5
        -: 3030:  }
        -: 3031:}
        -: 3032:
        -: 3033:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 3034:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 3035:                                   const char* s2_expression,
        -: 3036:                                   const char* s1,
        -: 3037:                                   const char* s2) {
    #####: 3038:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 3038-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3039:    return AssertionSuccess();
    %%%%%: 3039-block  0
call    0 never executed
        -: 3040:  } else {
    #####: 3041:    return AssertionFailure()
    %%%%%: 3041-block  0
call    0 never executed
    %%%%%: 3041-block  1
call    1 never executed
    $$$$$: 3041-block  2
call    2 never executed
    #####: 3042:        << "Expected: (" << s1_expression << ") != ("
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3042-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3042-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3043:        << s2_expression << ") (ignoring case), actual: \""
    %%%%%: 3043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3043-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3044:        << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 3044-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3044-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3044-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3044-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3044-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3044-block  5
        -: 3045:  }
        -: 3046:}
        -: 3047:
        -: 3048:}  // namespace internal
        -: 3049:
        -: 3050:namespace {
        -: 3051:
        -: 3052:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 3053:
        -: 3054:// This group of overloaded functions return true iff needle is a
        -: 3055:// substring of haystack.  NULL is considered a substring of itself
        -: 3056:// only.
        -: 3057:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 3058:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 3059:  if (needle == NULL || haystack == NULL)
    %%%%%: 3059-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3059-block  1
branch  2 never executed
branch  3 never executed
    #####: 3060:    return needle == haystack;
    %%%%%: 3060-block  0
        -: 3061:
    #####: 3062:  return strstr(haystack, needle) != NULL;
    %%%%%: 3062-block  0
        -: 3063:}
        -: 3064:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 3065:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 3066:  if (needle == NULL || haystack == NULL)
    %%%%%: 3066-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3066-block  1
branch  2 never executed
branch  3 never executed
    #####: 3067:    return needle == haystack;
    %%%%%: 3067-block  0
        -: 3068:
    #####: 3069:  return wcsstr(haystack, needle) != NULL;
    %%%%%: 3069-block  0
        -: 3070:}
        -: 3071:
        -: 3072:// StringType here can be either ::std::string or ::std::wstring.
        -: 3073:template <typename StringType>
    #####: 3074:bool IsSubstringPred(const StringType& needle,
        -: 3075:                     const StringType& haystack) {
    #####: 3076:  return haystack.find(needle) != StringType::npos;
        -: 3077:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 3074:bool IsSubstringPred(const StringType& needle,
        -: 3075:                     const StringType& haystack) {
    #####: 3076:  return haystack.find(needle) != StringType::npos;
    %%%%%: 3076-block  0
call    0 never executed
        -: 3077:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 3074:bool IsSubstringPred(const StringType& needle,
        -: 3075:                     const StringType& haystack) {
    #####: 3076:  return haystack.find(needle) != StringType::npos;
    %%%%%: 3076-block  0
call    0 never executed
        -: 3077:}
------------------
        -: 3078:
        -: 3079:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 3080:// depending on the value of the expected_to_be_substring parameter.
        -: 3081:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 3082:// or ::std::wstring.
        -: 3083:template <typename StringType>
    #####: 3084:AssertionResult IsSubstringImpl(
        -: 3085:    bool expected_to_be_substring,
        -: 3086:    const char* needle_expr, const char* haystack_expr,
        -: 3087:    const StringType& needle, const StringType& haystack) {
    #####: 3088:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 3089:    return AssertionSuccess();
        -: 3090:
    #####: 3091:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 3092:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 3093:  return AssertionFailure()
    #####: 3094:      << "Value of: " << needle_expr << "\n"
    #####: 3095:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 3096:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 3097:      << "a substring of " << haystack_expr << "\n"
    #####: 3098:      << "Which is: " << begin_string_quote << haystack << "\"";
        -: 3099:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 3084:AssertionResult IsSubstringImpl(
        -: 3085:    bool expected_to_be_substring,
        -: 3086:    const char* needle_expr, const char* haystack_expr,
        -: 3087:    const StringType& needle, const StringType& haystack) {
    #####: 3088:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 3088-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3089:    return AssertionSuccess();
    %%%%%: 3089-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3089-block  1
        -: 3090:
    #####: 3091:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 3092:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 3093:  return AssertionFailure()
    #####: 3094:      << "Value of: " << needle_expr << "\n"
    %%%%%: 3094-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3094-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3094-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3094-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3094-block  4
call   12 never executed
    $$$$$: 3094-block  5
    #####: 3095:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 3095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3095-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3095-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3095-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3096:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 3096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3096-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3096-block  2
    %%%%%: 3096-block  3
    %%%%%: 3096-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3096-block  5
call    8 never executed
    $$$$$: 3096-block  6
    #####: 3097:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 3097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3097-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3097-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3098:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 3098-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3098-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3098-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3098-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3098-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3098-block  5
        -: 3099:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 3084:AssertionResult IsSubstringImpl(
        -: 3085:    bool expected_to_be_substring,
        -: 3086:    const char* needle_expr, const char* haystack_expr,
        -: 3087:    const StringType& needle, const StringType& haystack) {
    #####: 3088:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 3088-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3089:    return AssertionSuccess();
    %%%%%: 3089-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3089-block  1
        -: 3090:
    #####: 3091:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 3092:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 3093:  return AssertionFailure()
    #####: 3094:      << "Value of: " << needle_expr << "\n"
    %%%%%: 3094-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3094-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3094-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3094-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3094-block  4
call   12 never executed
    $$$$$: 3094-block  5
    #####: 3095:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 3095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3095-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3095-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3095-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3096:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 3096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3096-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3096-block  2
    %%%%%: 3096-block  3
    %%%%%: 3096-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3096-block  5
call    8 never executed
    $$$$$: 3096-block  6
    #####: 3097:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 3097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3097-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3097-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3098:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 3098-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3098-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3098-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3098-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3098-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3098-block  5
        -: 3099:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 3084:AssertionResult IsSubstringImpl(
        -: 3085:    bool expected_to_be_substring,
        -: 3086:    const char* needle_expr, const char* haystack_expr,
        -: 3087:    const StringType& needle, const StringType& haystack) {
    #####: 3088:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 3088-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3089:    return AssertionSuccess();
    %%%%%: 3089-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3089-block  1
        -: 3090:
    #####: 3091:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 3092:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 3093:  return AssertionFailure()
    #####: 3094:      << "Value of: " << needle_expr << "\n"
    %%%%%: 3094-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3094-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3094-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3094-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3094-block  4
call   12 never executed
    $$$$$: 3094-block  5
    #####: 3095:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 3095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3095-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3095-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3095-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3096:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 3096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3096-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3096-block  2
    %%%%%: 3096-block  3
    %%%%%: 3096-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3096-block  5
call    8 never executed
    $$$$$: 3096-block  6
    #####: 3097:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 3097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3097-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3097-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3098:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 3098-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3098-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3098-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3098-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3098-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3098-block  5
        -: 3099:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 3084:AssertionResult IsSubstringImpl(
        -: 3085:    bool expected_to_be_substring,
        -: 3086:    const char* needle_expr, const char* haystack_expr,
        -: 3087:    const StringType& needle, const StringType& haystack) {
    #####: 3088:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 3088-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3089:    return AssertionSuccess();
    %%%%%: 3089-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3089-block  1
        -: 3090:
    #####: 3091:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 3092:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 3093:  return AssertionFailure()
    #####: 3094:      << "Value of: " << needle_expr << "\n"
    %%%%%: 3094-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3094-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3094-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3094-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 3094-block  4
call   12 never executed
    $$$$$: 3094-block  5
    #####: 3095:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 3095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3095-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3095-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3095-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3096:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 3096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3096-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3096-block  2
    %%%%%: 3096-block  3
    %%%%%: 3096-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3096-block  5
call    8 never executed
    $$$$$: 3096-block  6
    #####: 3097:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 3097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3097-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3097-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3098:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 3098-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3098-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3098-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3098-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3098-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3098-block  5
        -: 3099:}
------------------
        -: 3100:
        -: 3101:}  // namespace
        -: 3102:
        -: 3103:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 3104:// substring of haystack (NULL is considered a substring of itself
        -: 3105:// only), and return an appropriate error message when they fail.
        -: 3106:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 3107:AssertionResult IsSubstring(
        -: 3108:    const char* needle_expr, const char* haystack_expr,
        -: 3109:    const char* needle, const char* haystack) {
    #####: 3110:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3110-block  0
call    0 never executed
        -: 3111:}
        -: 3112:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 3113:AssertionResult IsSubstring(
        -: 3114:    const char* needle_expr, const char* haystack_expr,
        -: 3115:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 3116:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3116-block  0
call    0 never executed
        -: 3117:}
        -: 3118:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 3119:AssertionResult IsNotSubstring(
        -: 3120:    const char* needle_expr, const char* haystack_expr,
        -: 3121:    const char* needle, const char* haystack) {
    #####: 3122:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3122-block  0
call    0 never executed
        -: 3123:}
        -: 3124:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 3125:AssertionResult IsNotSubstring(
        -: 3126:    const char* needle_expr, const char* haystack_expr,
        -: 3127:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 3128:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3128-block  0
call    0 never executed
        -: 3129:}
        -: 3130:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 3131:AssertionResult IsSubstring(
        -: 3132:    const char* needle_expr, const char* haystack_expr,
        -: 3133:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 3134:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3134-block  0
call    0 never executed
        -: 3135:}
        -: 3136:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 3137:AssertionResult IsNotSubstring(
        -: 3138:    const char* needle_expr, const char* haystack_expr,
        -: 3139:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 3140:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3140-block  0
call    0 never executed
        -: 3141:}
        -: 3142:
        -: 3143:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 3144:AssertionResult IsSubstring(
        -: 3145:    const char* needle_expr, const char* haystack_expr,
        -: 3146:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 3147:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3147-block  0
call    0 never executed
        -: 3148:}
        -: 3149:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 3150:AssertionResult IsNotSubstring(
        -: 3151:    const char* needle_expr, const char* haystack_expr,
        -: 3152:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 3153:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 3153-block  0
call    0 never executed
        -: 3154:}
        -: 3155:#endif  // GTEST_HAS_STD_WSTRING
        -: 3156:
        -: 3157:namespace internal {
        -: 3158:
        -: 3159:#if GTEST_OS_WINDOWS
        -: 3160:
        -: 3161:namespace {
        -: 3162:
        -: 3163:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 3164:AssertionResult HRESULTFailureHelper(const char* expr,
        -: 3165:                                     const char* expected,
        -: 3166:                                     long hr) {  // NOLINT
        -: 3167:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 3168:
        -: 3169:  // Windows CE doesn't support FormatMessage.
        -: 3170:  const char error_text[] = "";
        -: 3171:
        -: 3172:# else
        -: 3173:
        -: 3174:  // Looks up the human-readable system message for the HRESULT code
        -: 3175:  // and since we're not passing any params to FormatMessage, we don't
        -: 3176:  // want inserts expanded.
        -: 3177:  const DWORD kFlags = FORMAT_MESSAGE_FROM_SYSTEM |
        -: 3178:                       FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 3179:  const DWORD kBufSize = 4096;
        -: 3180:  // Gets the system's human readable message string for this HRESULT.
        -: 3181:  char error_text[kBufSize] = { '\0' };
        -: 3182:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 3183:                                          0,  // no source, we're asking system
        -: 3184:                                          hr,  // the error
        -: 3185:                                          0,  // no line width restrictions
        -: 3186:                                          error_text,  // output buffer
        -: 3187:                                          kBufSize,  // buf size
        -: 3188:                                          NULL);  // no arguments for inserts
        -: 3189:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 3190:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 3191:          --message_length) {
        -: 3192:    error_text[message_length - 1] = '\0';
        -: 3193:  }
        -: 3194:
        -: 3195:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 3196:
        -: 3197:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 3198:  return ::testing::AssertionFailure()
        -: 3199:      << "Expected: " << expr << " " << expected << ".\n"
        -: 3200:      << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 3201:}
        -: 3202:
        -: 3203:}  // namespace
        -: 3204:
        -: 3205:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 3206:  if (SUCCEEDED(hr)) {
        -: 3207:    return AssertionSuccess();
        -: 3208:  }
        -: 3209:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 3210:}
        -: 3211:
        -: 3212:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 3213:  if (FAILED(hr)) {
        -: 3214:    return AssertionSuccess();
        -: 3215:  }
        -: 3216:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 3217:}
        -: 3218:
        -: 3219:#endif  // GTEST_OS_WINDOWS
        -: 3220:
        -: 3221:// Utility functions for encoding Unicode text (wide strings) in
        -: 3222:// UTF-8.
        -: 3223:
        -: 3224:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 3225:// like this:
        -: 3226://
        -: 3227:// Code-point length   Encoding
        -: 3228://   0 -  7 bits       0xxxxxxx
        -: 3229://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 3230://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 3231://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 3232:
        -: 3233:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 3234:const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;
        -: 3235:
        -: 3236:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 3237:const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;
        -: 3238:
        -: 3239:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 3240:const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;
        -: 3241:
        -: 3242:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 3243:const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;
        -: 3244:
        -: 3245:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 3246:// lowest bits.  As a side effect, the original bit pattern will be
        -: 3247:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 3248:inline UInt32 ChopLowBits(UInt32* bits, int n) {
    #####: 3249:  const UInt32 low_bits = *bits & ((static_cast<UInt32>(1) << n) - 1);
    #####: 3250:  *bits >>= n;
    #####: 3251:  return low_bits;
    %%%%%: 3251-block  0
        -: 3252:}
        -: 3253:
        -: 3254:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 3255:// code_point parameter is of type UInt32 because wchar_t may not be
        -: 3256:// wide enough to contain a code point.
        -: 3257:// If the code_point is not a valid Unicode code point
        -: 3258:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 3259:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 3260:std::string CodePointToUtf8(UInt32 code_point) {
    #####: 3261:  if (code_point > kMaxCodePoint4) {
    %%%%%: 3261-block  0
branch  0 never executed
branch  1 never executed
    #####: 3262:    return "(Invalid Unicode 0x" + String::FormatHexInt(code_point) + ")";
    %%%%%: 3262-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3262-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3262-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3262-block  3
    %%%%%: 3262-block  4
call    9 never executed
call   10 never executed
    $$$$$: 3262-block  5
call   11 never executed
    $$$$$: 3262-block  6
    $$$$$: 3262-block  7
call   12 never executed
    $$$$$: 3262-block  8
        -: 3263:  }
        -: 3264:
        -: 3265:  char str[5];  // Big enough for the largest valid code point.
    #####: 3266:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 3266-block  0
branch  0 never executed
branch  1 never executed
    #####: 3267:    str[1] = '\0';
    #####: 3268:    str[0] = static_cast<char>(code_point);                          // 0xxxxxxx
    %%%%%: 3268-block  0
    #####: 3269:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 3269-block  0
branch  0 never executed
branch  1 never executed
    #####: 3270:    str[2] = '\0';
    #####: 3271:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 3271-block  0
call    0 never executed
    #####: 3272:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 3273:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 3273-block  0
branch  0 never executed
branch  1 never executed
    #####: 3274:    str[3] = '\0';
    #####: 3275:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 3275-block  0
call    0 never executed
    #####: 3276:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 3277:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 3278:  } else {  // code_point <= kMaxCodePoint4
    #####: 3279:    str[4] = '\0';
    #####: 3280:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 3280-block  0
call    0 never executed
    #####: 3281:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 3282:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 3283:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 3284:  }
    #####: 3285:  return str;
    %%%%%: 3285-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3285-block  1
call    4 never executed
    $$$$$: 3285-block  2
call    5 never executed
    $$$$$: 3285-block  3
        -: 3286:}
        -: 3287:
        -: 3288:// The following two functions only make sense if the system
        -: 3289:// uses UTF-16 for wide string encoding. All supported systems
        -: 3290:// with 16 bit wchar_t (Windows, Cygwin, Symbian OS) do use UTF-16.
        -: 3291:
        -: 3292:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 3293:// and thus should be combined into a single Unicode code point
        -: 3294:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 3295:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 3296:  return sizeof(wchar_t) == 2 &&
    #####: 3297:      (first & 0xFC00) == 0xD800 && (second & 0xFC00) == 0xDC00;
    %%%%%: 3297-block  0
        -: 3298:}
        -: 3299:
        -: 3300:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 3301:inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 3302:                                                    wchar_t second) {
    #####: 3303:  const UInt32 mask = (1 << 10) - 1;
        -: 3304:  return (sizeof(wchar_t) == 2) ?
        -: 3305:      (((first & mask) << 10) | (second & mask)) + 0x10000 :
        -: 3306:      // This function should not be called when the condition is
        -: 3307:      // false, but we provide a sensible default in case it is.
    #####: 3308:      static_cast<UInt32>(first);
    %%%%%: 3308-block  0
        -: 3309:}
        -: 3310:
        -: 3311:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 3312:// The wide string is assumed to have the following encoding:
        -: 3313://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin, Symbian OS)
        -: 3314://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 3315:// Parameter str points to a null-terminated wide string.
        -: 3316:// Parameter num_chars may additionally limit the number
        -: 3317:// of wchar_t characters processed. -1 is used when the entire string
        -: 3318:// should be processed.
        -: 3319:// If the string contains code points that are not valid Unicode code points
        -: 3320:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 3321:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 3322:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 3323:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 3324:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 3325:  if (num_chars == -1)
    %%%%%: 3325-block  0
branch  0 never executed
branch  1 never executed
    #####: 3326:    num_chars = static_cast<int>(wcslen(str));
    %%%%%: 3326-block  0
        -: 3327:
    #####: 3328:  ::std::stringstream stream;
    %%%%%: 3328-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3328-block  1
call    4 never executed
    $$$$$: 3328-block  2
call    5 never executed
    #####: 3329:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 3329-block  0
    %%%%%: 3329-block  1
branch  0 never executed
branch  1 never executed
        -: 3330:    UInt32 unicode_code_point;
        -: 3331:
    #####: 3332:    if (str[i] == L'\0') {
    %%%%%: 3332-block  0
branch  0 never executed
branch  1 never executed
    #####: 3333:      break;
    %%%%%: 3333-block  0
    #####: 3334:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 3334-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3334-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3334-block  2
    %%%%%: 3334-block  3
    %%%%%: 3334-block  4
branch  5 never executed
branch  6 never executed
    #####: 3335:      unicode_code_point = CreateCodePointFromUtf16SurrogatePair(str[i],
    #####: 3336:                                                                 str[i + 1]);
    %%%%%: 3336-block  0
call    0 never executed
    #####: 3337:      i++;
        -: 3338:    } else {
    #####: 3339:      unicode_code_point = static_cast<UInt32>(str[i]);
    %%%%%: 3339-block  0
        -: 3340:    }
        -: 3341:
    #####: 3342:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 3342-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3342-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3342-block  2
call    6 never executed
    $$$$$: 3342-block  3
call    7 never executed
    $$$$$: 3342-block  4
        -: 3343:  }
    #####: 3344:  return StringStreamToString(&stream);
    %%%%%: 3344-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3344-block  1
    %%%%%: 3344-block  2
        -: 3345:}
        -: 3346:
        -: 3347:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 3348:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 3349:std::string String::ShowWideCString(const wchar_t * wide_c_str) {
    #####: 3350:  if (wide_c_str == NULL)  return "(null)";
    %%%%%: 3350-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3350-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3350-block  2
call    6 never executed
    $$$$$: 3350-block  3
call    7 never executed
        -: 3351:
    #####: 3352:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 3352-block  0
call    0 never executed
        -: 3353:}
        -: 3354:
        -: 3355:// Compares two wide C strings.  Returns true iff they have the same
        -: 3356:// content.
        -: 3357://
        -: 3358:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 3359:// C string is considered different to any non-NULL C string,
        -: 3360:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 3361:bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {
    #####: 3362:  if (lhs == NULL) return rhs == NULL;
    %%%%%: 3362-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3362-block  1
        -: 3363:
    #####: 3364:  if (rhs == NULL) return false;
    %%%%%: 3364-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3364-block  1
        -: 3365:
    #####: 3366:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 3366-block  0
        -: 3367:}
        -: 3368:
        -: 3369:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 3370:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 3371:                               const char* rhs_expression,
        -: 3372:                               const wchar_t* lhs,
        -: 3373:                               const wchar_t* rhs) {
    #####: 3374:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 3374-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3375:    return AssertionSuccess();
    %%%%%: 3375-block  0
call    0 never executed
        -: 3376:  }
        -: 3377:
        -: 3378:  return EqFailure(lhs_expression,
        -: 3379:                   rhs_expression,
    #####: 3380:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3380-block  0
call    3 never executed
    $$$$$: 3380-block  1
call    4 never executed
    $$$$$: 3380-block  2
    #####: 3381:                   PrintToString(rhs),
    %%%%%: 3381-block  0
call    0 never executed
call    1 never executed
    $$$$$: 3381-block  1
call    2 never executed
    #####: 3382:                   false);
    %%%%%: 3382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3382-block  1
        -: 3383:}
        -: 3384:
        -: 3385:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 3386:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 3387:                               const char* s2_expression,
        -: 3388:                               const wchar_t* s1,
        -: 3389:                               const wchar_t* s2) {
    #####: 3390:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 3390-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3391:    return AssertionSuccess();
    %%%%%: 3391-block  0
call    0 never executed
        -: 3392:  }
        -: 3393:
    #####: 3394:  return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 3394-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3394-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3394-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 3394-block  3
call   10 never executed
    #####: 3395:                            << s2_expression << "), actual: "
    %%%%%: 3395-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3395-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3396:                            << PrintToString(s1)
    %%%%%: 3396-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3396-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3396-block  2
call    7 never executed
    $$$$$: 3396-block  3
    #####: 3397:                            << " vs " << PrintToString(s2);
    %%%%%: 3397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3397-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3397-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3397-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3397-block  4
    %%%%%: 3397-block  5
call   12 never executed
call   13 never executed
    $$$$$: 3397-block  6
call   14 never executed
    $$$$$: 3397-block  7
        -: 3398:}
        -: 3399:
        -: 3400:// Compares two C strings, ignoring case.  Returns true iff they have
        -: 3401:// the same content.
        -: 3402://
        -: 3403:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 3404:// NULL C string is considered different to any non-NULL C string,
        -: 3405:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 3406:bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {
        4: 3407:  if (lhs == NULL)
        4: 3407-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 3408:    return rhs == NULL;
    %%%%%: 3408-block  0
        4: 3409:  if (rhs == NULL)
        4: 3409-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 3410:    return false;
    %%%%%: 3410-block  0
        4: 3411:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 3411-block  0
call    0 returned 4
        -: 3412:}
        -: 3413:
        -: 3414:  // Compares two wide C strings, ignoring case.  Returns true iff they
        -: 3415:  // have the same content.
        -: 3416:  //
        -: 3417:  // Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 3418:  // A NULL C string is considered different to any non-NULL wide C string,
        -: 3419:  // including the empty string.
        -: 3420:  // NB: The implementations on different platforms slightly differ.
        -: 3421:  // On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 3422:  // environment variable. On GNU platform this method uses wcscasecmp
        -: 3423:  // which compares according to LC_CTYPE category of the current locale.
        -: 3424:  // On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 3425:  // current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 3426:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 3427:                                              const wchar_t* rhs) {
    #####: 3428:  if (lhs == NULL) return rhs == NULL;
    %%%%%: 3428-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3428-block  1
        -: 3429:
    #####: 3430:  if (rhs == NULL) return false;
    %%%%%: 3430-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3430-block  1
        -: 3431:
        -: 3432:#if GTEST_OS_WINDOWS
        -: 3433:  return _wcsicmp(lhs, rhs) == 0;
        -: 3434:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
    #####: 3435:  return wcscasecmp(lhs, rhs) == 0;
    %%%%%: 3435-block  0
call    0 never executed
        -: 3436:#else
        -: 3437:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 3438:  // Other unknown OSes may not define it either.
        -: 3439:  wint_t left, right;
        -: 3440:  do {
        -: 3441:    left = towlower(*lhs++);
        -: 3442:    right = towlower(*rhs++);
        -: 3443:  } while (left && left == right);
        -: 3444:  return left == right;
        -: 3445:#endif  // OS selector
        -: 3446:}
        -: 3447:
        -: 3448:// Returns true iff str ends with the given suffix, ignoring case.
        -: 3449:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 3450:bool String::EndsWithCaseInsensitive(
        -: 3451:    const std::string& str, const std::string& suffix) {
    #####: 3452:  const size_t str_len = str.length();
    %%%%%: 3452-block  0
call    0 never executed
    #####: 3453:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 3454:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3454-block  0
    %%%%%: 3454-block  1
    #####: 3455:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 3455-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3456:                                      suffix.c_str());
    %%%%%: 3456-block  0
        -: 3457:}
        -: 3458:
        -: 3459:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 3460:std::string String::FormatIntWidth2(int value) {
    #####: 3461:  std::stringstream ss;
    %%%%%: 3461-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3461-block  1
call    4 never executed
    $$$$$: 3461-block  2
call    5 never executed
    #####: 3462:  ss << std::setfill('0') << std::setw(2) << value;
    %%%%%: 3462-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3462-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3462-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3463:  return ss.str();
    %%%%%: 3463-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3463-block  1
    %%%%%: 3463-block  2
        -: 3464:}
        -: 3465:
        -: 3466:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 3467:std::string String::FormatHexInt(int value) {
    #####: 3468:  std::stringstream ss;
    %%%%%: 3468-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3468-block  1
call    4 never executed
    $$$$$: 3468-block  2
call    5 never executed
    #####: 3469:  ss << std::hex << std::uppercase << value;
    %%%%%: 3469-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3469-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3469-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3470:  return ss.str();
    %%%%%: 3470-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3470-block  1
    %%%%%: 3470-block  2
        -: 3471:}
        -: 3472:
        -: 3473:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 3474:std::string String::FormatByte(unsigned char value) {
    #####: 3475:  std::stringstream ss;
    %%%%%: 3475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3475-block  1
call    4 never executed
    $$$$$: 3475-block  2
call    5 never executed
    #####: 3476:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 3476-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3476-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3476-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3476-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 3477:     << static_cast<unsigned int>(value);
    %%%%%: 3477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3478:  return ss.str();
    %%%%%: 3478-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3478-block  1
    %%%%%: 3478-block  2
        -: 3479:}
        -: 3480:
        -: 3481:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 3482:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 68 returned 100% blocks executed 71%
       68: 3483:std::string StringStreamToString(::std::stringstream* ss) {
      136: 3484:  const ::std::string& str = ss->str();
       68: 3484-block  0
call    0 returned 68
branch  1 taken 68 (fallthrough)
branch  2 taken 0 (throw)
       68: 3484-block  1
call    3 returned 68
    $$$$$: 3484-block  2
call    4 never executed
       68: 3485:  const char* const start = str.c_str();
       68: 3485-block  0
call    0 returned 68
       68: 3486:  const char* const end = start + str.length();
call    0 returned 68
        -: 3487:
       68: 3488:  std::string result;
call    0 returned 68
       68: 3489:  result.reserve(2 * (end - start));
call    0 returned 68
branch  1 taken 68 (fallthrough)
branch  2 taken 0 (throw)
     2123: 3490:  for (const char* ch = start; ch != end; ++ch) {
       68: 3490-block  0
     2123: 3490-block  1
branch  0 taken 2055 (fallthrough)
branch  1 taken 68
     2055: 3490-block  2
     2055: 3491:    if (*ch == '\0') {
     2055: 3491-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2055
    #####: 3492:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 3492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3493:    } else {
     2055: 3494:      result += *ch;
     2055: 3494-block  0
call    0 returned 2055
branch  1 taken 2055 (fallthrough)
branch  2 taken 0 (throw)
        -: 3495:    }
        -: 3496:  }
        -: 3497:
      136: 3498:  return result;
       68: 3498-block  0
       68: 3498-block  1
        -: 3499:}
        -: 3500:
        -: 3501:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 1 returned 100% blocks executed 47%
        1: 3502:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 3503:                              const Message& user_msg) {
        -: 3504:  // Appends the user message if it's non-empty.
        2: 3505:  const std::string user_msg_string = user_msg.GetString();
        1: 3505-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3505-block  1
call    3 returned 1
    $$$$$: 3505-block  2
call    4 never executed
        1: 3506:  if (user_msg_string.empty()) {
        1: 3506-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3507:    return gtest_msg;
        1: 3507-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3507-block  1
        -: 3508:  }
        -: 3509:
    #####: 3510:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 3510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3510-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3510-block  2
    %%%%%: 3510-block  3
call    6 never executed
    $$$$$: 3510-block  4
call    7 never executed
    $$$$$: 3510-block  5
        -: 3511:}
        -: 3512:
        -: 3513:}  // namespace internal
        -: 3514:
        -: 3515:// class TestResult
        -: 3516:
        -: 3517:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 13 returned 100% blocks executed 100%
       13: 3518:TestResult::TestResult()
        -: 3519:    : death_test_count_(0),
       13: 3520:      elapsed_time_(0) {
       13: 3520-block  0
call    0 returned 13
call    1 returned 13
call    2 returned 13
       13: 3521:}
        -: 3522:
        -: 3523:// D'tor.
function _ZN7testing10TestResultD2Ev called 13 returned 100% blocks executed 100%
       13: 3524:TestResult::~TestResult() {
       13: 3524-block  0
call    0 returned 13
call    1 returned 13
call    2 returned 13
       13: 3525:}
        -: 3526:
        -: 3527:// Returns the i-th test part result among all the results. i can
        -: 3528:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 3529:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 10 returned 100% blocks executed 80%
       10: 3530:const TestPartResult& TestResult::GetTestPartResult(int i) const {
      10*: 3531:  if (i < 0 || i >= total_part_count())
       10: 3531-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3531-block  1
call    2 returned 10
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%: 3531-block  2
       10: 3531-block  3
       10: 3531-block  4
branch  5 taken 0 (fallthrough)
branch  6 taken 10
    #####: 3532:    internal::posix::Abort();
    %%%%%: 3532-block  0
call    0 never executed
       10: 3533:  return test_part_results_.at(i);
       10: 3533-block  0
call    0 returned 10
        -: 3534:}
        -: 3535:
        -: 3536:// Returns the i-th test property. i can range from 0 to
        -: 3537:// test_property_count() - 1. If i is not in that range, aborts the
        -: 3538:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 3539:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 3540:  if (i < 0 || i >= test_property_count())
    %%%%%: 3540-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3540-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3540-block  2
    %%%%%: 3540-block  3
    %%%%%: 3540-block  4
branch  5 never executed
branch  6 never executed
    #####: 3541:    internal::posix::Abort();
    %%%%%: 3541-block  0
call    0 never executed
    #####: 3542:  return test_properties_.at(i);
    %%%%%: 3542-block  0
call    0 never executed
        -: 3543:}
        -: 3544:
        -: 3545:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 3546:void TestResult::ClearTestPartResults() {
    #####: 3547:  test_part_results_.clear();
    %%%%%: 3547-block  0
call    0 never executed
    #####: 3548:}
        -: 3549:
        -: 3550:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        1: 3551:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
        1: 3552:  test_part_results_.push_back(test_part_result);
        1: 3552-block  0
call    0 returned 1
        1: 3553:}
        -: 3554:
        -: 3555:// Adds a test property to the list. If a property with the same key as the
        -: 3556:// supplied property is already represented, the value of this test_property
        -: 3557:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 3558:void TestResult::RecordProperty(const std::string& xml_element,
        -: 3559:                                const TestProperty& test_property) {
    #####: 3560:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 3560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3560-block  1
branch  3 never executed
branch  4 never executed
    #####: 3561:    return;
    %%%%%: 3561-block  0
    %%%%%: 3561-block  1
        -: 3562:  }
    #####: 3563:  internal::MutexLock lock(&test_properites_mutex_);
    %%%%%: 3563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3563-block  1
call    3 never executed
        -: 3564:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 3565:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 3566:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 3566-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3566-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3566-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 3566-block  3
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 3566-block  4
call   16 never executed
    $$$$$: 3566-block  5
    $$$$$: 3566-block  6
call   17 never executed
    $$$$$: 3566-block  7
    $$$$$: 3566-block  8
call   18 never executed
    $$$$$: 3566-block  9
    #####: 3567:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3568:    test_properties_.push_back(test_property);
    %%%%%: 3568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3569:    return;
    %%%%%: 3569-block  0
        -: 3570:  }
    #####: 3571:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 3571-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3571-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3571-block  2
call    9 never executed
call   10 never executed
    $$$$$: 3571-block  3
call   11 never executed
    $$$$$: 3571-block  4
    $$$$$: 3571-block  5
call   12 never executed
    $$$$$: 3571-block  6
        -: 3572:}
        -: 3573:
        -: 3574:// The list of reserved attributes used in the <testsuites> element of XML
        -: 3575:// output.
        -: 3576:static const char* const kReservedTestSuitesAttributes[] = {
        -: 3577:  "disabled",
        -: 3578:  "errors",
        -: 3579:  "failures",
        -: 3580:  "name",
        -: 3581:  "random_seed",
        -: 3582:  "tests",
        -: 3583:  "time",
        -: 3584:  "timestamp"
        -: 3585:};
        -: 3586:
        -: 3587:// The list of reserved attributes used in the <testsuite> element of XML
        -: 3588:// output.
        -: 3589:static const char* const kReservedTestSuiteAttributes[] = {
        -: 3590:  "disabled",
        -: 3591:  "errors",
        -: 3592:  "failures",
        -: 3593:  "name",
        -: 3594:  "tests",
        -: 3595:  "time"
        -: 3596:};
        -: 3597:
        -: 3598:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 3599:static const char* const kReservedTestCaseAttributes[] = {
        -: 3600:    "classname",  "name",        "status", "time",
        -: 3601:    "type_param", "value_param", "file",   "line"};
        -: 3602:
        -: 3603:template <int kSize>
    #####: 3604:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 3605:  return std::vector<std::string>(array, array + kSize);
        -: 3606:}
------------------
_ZN7testing13ArrayAsVectorILi6EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILi6EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 3604:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 3605:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 3605-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3605-block  1
call    4 never executed
    %%%%%: 3605-block  2
    $$$$$: 3605-block  3
call    5 never executed
        -: 3606:}
------------------
_ZN7testing13ArrayAsVectorILi8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILi8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 3604:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 3605:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 3605-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3605-block  1
call    4 never executed
    %%%%%: 3605-block  2
    $$$$$: 3605-block  3
call    5 never executed
        -: 3606:}
------------------
        -: 3607:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3608:static std::vector<std::string> GetReservedAttributesForElement(
        -: 3609:    const std::string& xml_element) {
    #####: 3610:  if (xml_element == "testsuites") {
    %%%%%: 3610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3611:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 3611-block  0
call    0 never executed
    #####: 3612:  } else if (xml_element == "testsuite") {
    %%%%%: 3612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3613:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 3613-block  0
call    0 never executed
    #####: 3614:  } else if (xml_element == "testcase") {
    %%%%%: 3614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3615:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 3615-block  0
call    0 never executed
        -: 3616:  } else {
    #####: 3617:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 3617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3617-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3617-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3617-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 3617-block  4
call   14 never executed
    $$$$$: 3617-block  5
call   15 never executed
        -: 3618:  }
        -: 3619:  // This code is unreachable but some compilers may not realizes that.
    #####: 3620:  return std::vector<std::string>();
    %%%%%: 3620-block  0
call    0 never executed
        -: 3621:}
        -: 3622:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 3623:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 3624:  Message word_list;
    %%%%%: 3624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3624-block  1
call    3 never executed
    $$$$$: 3624-block  2
call    4 never executed
    #####: 3625:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 3625-block  0
    %%%%%: 3625-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3625-block  2
    #####: 3626:    if (i > 0 && words.size() > 2) {
    %%%%%: 3626-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3626-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3626-block  2
    %%%%%: 3626-block  3
    %%%%%: 3626-block  4
branch  5 never executed
branch  6 never executed
    #####: 3627:      word_list << ", ";
    %%%%%: 3627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3628:    }
    #####: 3629:    if (i == words.size() - 1) {
    %%%%%: 3629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3630:      word_list << "and ";
    %%%%%: 3630-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3631:    }
    #####: 3632:    word_list << "'" << words[i] << "'";
    %%%%%: 3632-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3632-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3632-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 3633:  }
    #####: 3634:  return word_list.GetString();
    %%%%%: 3634-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3634-block  1
    %%%%%: 3634-block  2
        -: 3635:}
        -: 3636:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 3637:static bool ValidateTestPropertyName(
        -: 3638:    const std::string& property_name,
        -: 3639:    const std::vector<std::string>& reserved_names) {
    #####: 3640:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3640-block  0
call    5 never executed
    #####: 3641:          reserved_names.end()) {
    %%%%%: 3641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3641-block  1
call    3 never executed
    #####: 3642:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 3642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3642-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3642-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3642-block  3
call   10 never executed
    $$$$$: 3642-block  4
call   11 never executed
    $$$$$: 3642-block  5
    $$$$$: 3642-block  6
call   12 never executed
    #####: 3643:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 3643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3643-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3643-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 3643-block  3
call   11 never executed
    $$$$$: 3643-block  4
    #####: 3644:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 3644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3644-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3644-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3644-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3645:    return false;
        -: 3646:  }
    #####: 3647:  return true;
    %%%%%: 3647-block  0
        -: 3648:}
        -: 3649:
        -: 3650:// Adds a failure if the key is a reserved attribute of the element named
        -: 3651:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 3652:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 3653:                                      const TestProperty& test_property) {
    #####: 3654:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3654-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3654-block  1
call    8 never executed
call    9 never executed
    $$$$$: 3654-block  2
call   10 never executed
    $$$$$: 3654-block  3
    $$$$$: 3654-block  4
call   11 never executed
    $$$$$: 3654-block  5
    #####: 3655:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 3655-block  0
call    0 never executed
    %%%%%: 3655-block  1
call    1 never executed
    %%%%%: 3655-block  2
    $$$$$: 3655-block  3
call    2 never executed
        -: 3656:}
        -: 3657:
        -: 3658:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 12 returned 100% blocks executed 100%
       12: 3659:void TestResult::Clear() {
       12: 3660:  test_part_results_.clear();
       12: 3660-block  0
call    0 returned 12
       12: 3661:  test_properties_.clear();
call    0 returned 12
       12: 3662:  death_test_count_ = 0;
       12: 3663:  elapsed_time_ = 0;
       12: 3664:}
        -: 3665:
        -: 3666:// Returns true iff the test failed.
function _ZNK7testing10TestResult6FailedEv called 92 returned 100% blocks executed 90%
       92: 3667:bool TestResult::Failed() const {
      92*: 3668:  for (int i = 0; i < total_part_count(); ++i) {
       92: 3668-block  0
       92: 3668-block  1
call    0 returned 92
branch  1 taken 10 (fallthrough)
branch  2 taken 82
    %%%%%: 3668-block  2
       10: 3669:    if (GetTestPartResult(i).failed())
       10: 3669-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0
       10: 3670:      return true;
       10: 3670-block  0
        -: 3671:  }
       82: 3672:  return false;
       82: 3672-block  0
        -: 3673:}
        -: 3674:
        -: 3675:// Returns true iff the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3676:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 3677:  return result.fatally_failed();
    %%%%%: 3677-block  0
call    0 never executed
        -: 3678:}
        -: 3679:
        -: 3680:// Returns true iff the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 21 returned 100% blocks executed 100%
       21: 3681:bool TestResult::HasFatalFailure() const {
       21: 3682:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       21: 3682-block  0
call    0 returned 21
        -: 3683:}
        -: 3684:
        -: 3685:// Returns true iff the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3686:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 3687:  return result.nonfatally_failed();
    %%%%%: 3687-block  0
call    0 never executed
        -: 3688:}
        -: 3689:
        -: 3690:// Returns true iff the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 3691:bool TestResult::HasNonfatalFailure() const {
    #####: 3692:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 3692-block  0
call    0 never executed
        -: 3693:}
        -: 3694:
        -: 3695:// Gets the number of all test parts.  This is the sum of the number
        -: 3696:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 102 returned 100% blocks executed 100%
      102: 3697:int TestResult::total_part_count() const {
      102: 3698:  return static_cast<int>(test_part_results_.size());
      102: 3698-block  0
call    0 returned 102
        -: 3699:}
        -: 3700:
        -: 3701:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 3702:int TestResult::test_property_count() const {
    #####: 3703:  return static_cast<int>(test_properties_.size());
    %%%%%: 3703-block  0
call    0 never executed
        -: 3704:}
        -: 3705:
        -: 3706:// class Test
        -: 3707:
        -: 3708:// Creates a Test object.
        -: 3709:
        -: 3710:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 10 returned 100% blocks executed 83%
       10: 3711:Test::Test()
       10: 3712:    : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {
       10: 3712-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 3712-block  1
call    4 returned 10
    $$$$$: 3712-block  2
call    5 never executed
       10: 3713:}
        -: 3714:
        -: 3715:// The d'tor restores the states of all flags.  The actual work is
        -: 3716:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 3717:// visible here.
      10*: 3718:Test::~Test() {
      10*: 3719:}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 3718:Test::~Test() {
    #####: 3719:}
    %%%%%: 3719-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 10 returned 100% blocks executed 100%
       10: 3718:Test::~Test() {
       10: 3718-block  0
call    0 returned 10
       10: 3719:}
------------------
        -: 3720:
        -: 3721:// Sets up the test fixture.
        -: 3722://
        -: 3723:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 10 returned 100% blocks executed 100%
       10: 3724:void Test::SetUp() {
       10: 3725:}
        -: 3726:
        -: 3727:// Tears down the test fixture.
        -: 3728://
        -: 3729:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 10 returned 100% blocks executed 100%
       10: 3730:void Test::TearDown() {
       10: 3731:}
        -: 3732:
        -: 3733:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 3734:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 3735:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 3735-block  0
call    0 never executed
call    1 never executed
    #####: 3736:}
        -: 3737:
        -: 3738:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 3739:void Test::RecordProperty(const std::string& key, int value) {
    #####: 3740:  Message value_message;
    %%%%%: 3740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3740-block  1
call    3 never executed
    #####: 3741:  value_message << value;
    %%%%%: 3741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3742:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 3742-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3742-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3742-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3742-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 3742-block  4
call   15 never executed
    $$$$$: 3742-block  5
    $$$$$: 3742-block  6
call   16 never executed
    $$$$$: 3742-block  7
    $$$$$: 3742-block  8
call   17 never executed
    $$$$$: 3742-block  9
    #####: 3743:}
        -: 3744:
        -: 3745:namespace internal {
        -: 3746:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3747:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 3748:                                    const std::string& message) {
        -: 3749:  // This function is a friend of UnitTest and as such has access to
        -: 3750:  // AddTestPartResult.
    #####: 3751:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 3751-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3751-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3751-block  2
call    8 never executed
call    9 never executed
    $$$$$: 3751-block  3
call   10 never executed
    $$$$$: 3751-block  4
    $$$$$: 3751-block  5
call   11 never executed
        -: 3752:      result_type,
        -: 3753:      NULL,  // No info about the source file where the exception occurred.
        -: 3754:      -1,    // We have no info on which line caused the exception.
        -: 3755:      message,
        -: 3756:      "");   // No stack trace, either.
    #####: 3757:}
        -: 3758:
        -: 3759:}  // namespace internal
        -: 3760:
        -: 3761:// Google Test requires all tests in the same test case to use the same test
        -: 3762:// fixture class.  This function checks if the current test has the
        -: 3763:// same fixture class as the first test in the current test case.  If
        -: 3764:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 3765:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 10 returned 100% blocks executed 15%
       10: 3766:bool Test::HasSameFixtureClass() {
       10: 3767:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       10: 3767-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3768:  const TestCase* const test_case = impl->current_test_case();
       10: 3768-block  0
call    0 returned 10
        -: 3769:
        -: 3770:  // Info about the first test in the current test case.
       10: 3771:  const TestInfo* const first_test_info = test_case->test_info_list()[0];
call    0 returned 10
call    1 returned 10
       10: 3772:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       10: 3773:  const char* const first_test_name = first_test_info->name();
call    0 returned 10
        -: 3774:
        -: 3775:  // Info about the current test.
       10: 3776:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 10
       10: 3777:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       10: 3778:  const char* const this_test_name = this_test_info->name();
call    0 returned 10
        -: 3779:
       10: 3780:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -: 3781:    // Is the first test defined using TEST?
    #####: 3782:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 3782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3783:    // Is this test defined using TEST?
    #####: 3784:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 3784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3785:
    #####: 3786:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 3786-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3786-block  1
branch  2 never executed
branch  3 never executed
        -: 3787:      // Both TEST and TEST_F appear in same test case, which is incorrect.
        -: 3788:      // Tell the user how to fix this.
        -: 3789:
        -: 3790:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 3791:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 3792:      // the fixture IDs are different for the two tests.
    #####: 3793:      const char* const TEST_name =
    %%%%%: 3793-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3793-block  1
    %%%%%: 3793-block  2
        -: 3794:          first_is_TEST ? first_test_name : this_test_name;
    #####: 3795:      const char* const TEST_F_name =
    %%%%%: 3795-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3795-block  1
    %%%%%: 3795-block  2
        -: 3796:          first_is_TEST ? this_test_name : first_test_name;
        -: 3797:
    #####: 3798:      ADD_FAILURE()
    %%%%%: 3798-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3798-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3798-block  2
call    6 never executed
    $$$$$: 3798-block  3
call    7 never executed
    $$$$$: 3798-block  4
    $$$$$: 3798-block  5
call    8 never executed
    $$$$$: 3798-block  6
    #####: 3799:          << "All tests in the same test case must use the same test fixture\n"
    %%%%%: 3799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3800:          << "class, so mixing TEST_F and TEST in the same test case is\n"
    %%%%%: 3800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3801:          << "illegal.  In test case " << this_test_info->test_case_name()
    %%%%%: 3801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3801-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 3801-block  2
    #####: 3802:          << ",\n"
    %%%%%: 3802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3803:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 3803-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3803-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3803-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3804:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 3804-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3804-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3804-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3805:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 3805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3806:          << "case.";
    %%%%%: 3806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3806-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3807:    } else {
        -: 3808:      // Two fixture classes with the same name appear in two different
        -: 3809:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 3810:      ADD_FAILURE()
    %%%%%: 3810-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3810-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3810-block  2
call    6 never executed
    $$$$$: 3810-block  3
call    7 never executed
    $$$$$: 3810-block  4
    $$$$$: 3810-block  5
call    8 never executed
    $$$$$: 3810-block  6
    #####: 3811:          << "All tests in the same test case must use the same test fixture\n"
    %%%%%: 3811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3812:          << "class.  However, in test case "
    %%%%%: 3812-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3813:          << this_test_info->test_case_name() << ",\n"
    %%%%%: 3813-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3813-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 3813-block  2
    #####: 3814:          << "you defined test " << first_test_name
    %%%%%: 3814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3814-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3815:          << " and test " << this_test_name << "\n"
    %%%%%: 3815-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3815-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3815-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3816:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 3816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3817:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 3817-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3818:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 3818-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3819:          << "of the classes to put the tests into different test cases.";
    %%%%%: 3819-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3819-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3820:    }
    #####: 3821:    return false;
    %%%%%: 3821-block  0
        -: 3822:  }
        -: 3823:
       10: 3824:  return true;
       10: 3824-block  0
        -: 3825:}
        -: 3826:
        -: 3827:#if GTEST_HAS_SEH
        -: 3828:
        -: 3829:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 3830:// function returns its result via an output parameter pointer because VC++
        -: 3831:// prohibits creation of objects with destructors on stack in functions
        -: 3832:// using __try (see error C2712).
        -: 3833:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 3834:                                              const char* location) {
        -: 3835:  Message message;
        -: 3836:  message << "SEH exception with code 0x" << std::setbase(16) <<
        -: 3837:    exception_code << std::setbase(10) << " thrown in " << location << ".";
        -: 3838:
        -: 3839:  return new std::string(message.GetString());
        -: 3840:}
        -: 3841:
        -: 3842:#endif  // GTEST_HAS_SEH
        -: 3843:
        -: 3844:namespace internal {
        -: 3845:
        -: 3846:#if GTEST_HAS_EXCEPTIONS
        -: 3847:
        -: 3848:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 3849:static std::string FormatCxxExceptionMessage(const char* description,
        -: 3850:                                             const char* location) {
    #####: 3851:  Message message;
    %%%%%: 3851-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3851-block  1
call    3 never executed
    $$$$$: 3851-block  2
call    4 never executed
    #####: 3852:  if (description != NULL) {
    %%%%%: 3852-block  0
branch  0 never executed
branch  1 never executed
    #####: 3853:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 3853-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3853-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3853-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 3854:  } else {
    #####: 3855:    message << "Unknown C++ exception";
    %%%%%: 3855-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3856:  }
    #####: 3857:  message << " thrown in " << location << ".";
    %%%%%: 3857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3857-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3857-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 3858:
    #####: 3859:  return message.GetString();
    %%%%%: 3859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3859-block  1
    %%%%%: 3859-block  2
        -: 3860:}
        -: 3861:
        -: 3862:static std::string PrintTestPartResultToString(
        -: 3863:    const TestPartResult& test_part_result);
        -: 3864:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3865:GoogleTestFailureException::GoogleTestFailureException(
    #####: 3866:    const TestPartResult& failure)
    #####: 3867:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 3867-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3867-block  1
call    5 never executed
    $$$$$: 3867-block  2
call    6 never executed
        -: 3868:
        -: 3869:#endif  // GTEST_HAS_EXCEPTIONS
        -: 3870:
        -: 3871:// We put these helper functions in the internal namespace as IBM's xlC
        -: 3872:// compiler rejects the code if they were declared static.
        -: 3873:
        -: 3874:// Runs the given method and handles SEH exceptions it throws, when
        -: 3875:// SEH is supported; returns the 0-value for type Result in case of an
        -: 3876:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 3877:// exceptions in the same function.  Therefore, we provide a separate
        -: 3878:// wrapper function for handling SEH exceptions.)
        -: 3879:template <class T, typename Result>
       55: 3880:Result HandleSehExceptionsInMethodIfSupported(
        -: 3881:    T* object, Result (T::*method)(), const char* location) {
        -: 3882:#if GTEST_HAS_SEH
        -: 3883:  __try {
        -: 3884:    return (object->*method)();
        -: 3885:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 3886:      GetExceptionCode())) {
        -: 3887:    // We create the exception message on the heap because VC++ prohibits
        -: 3888:    // creation of objects with destructors on stack in functions using __try
        -: 3889:    // (see error C2712).
        -: 3890:    std::string* exception_message = FormatSehExceptionMessage(
        -: 3891:        GetExceptionCode(), location);
        -: 3892:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 3893:                                             *exception_message);
        -: 3894:    delete exception_message;
        -: 3895:    return static_cast<Result>(0);
        -: 3896:  }
        -: 3897:#else
        -: 3898:  (void)location;
      55*: 3899:  return (object->*method)();
        -: 3900:#endif  // GTEST_HAS_SEH
        -: 3901:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 3880:Result HandleSehExceptionsInMethodIfSupported(
        -: 3881:    T* object, Result (T::*method)(), const char* location) {
        -: 3882:#if GTEST_HAS_SEH
        -: 3883:  __try {
        -: 3884:    return (object->*method)();
        -: 3885:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 3886:      GetExceptionCode())) {
        -: 3887:    // We create the exception message on the heap because VC++ prohibits
        -: 3888:    // creation of objects with destructors on stack in functions using __try
        -: 3889:    // (see error C2712).
        -: 3890:    std::string* exception_message = FormatSehExceptionMessage(
        -: 3891:        GetExceptionCode(), location);
        -: 3892:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 3893:                                             *exception_message);
        -: 3894:    delete exception_message;
        -: 3895:    return static_cast<Result>(0);
        -: 3896:  }
        -: 3897:#else
        -: 3898:  (void)location;
       1*: 3899:  return (object->*method)();
        1: 3899-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3899-block  1
        1: 3899-block  2
        1: 3899-block  3
call    2 returned 1
        -: 3900:#endif  // GTEST_HAS_SEH
        -: 3901:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc called 4 returned 100% blocks executed 80%
        4: 3880:Result HandleSehExceptionsInMethodIfSupported(
        -: 3881:    T* object, Result (T::*method)(), const char* location) {
        -: 3882:#if GTEST_HAS_SEH
        -: 3883:  __try {
        -: 3884:    return (object->*method)();
        -: 3885:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 3886:      GetExceptionCode())) {
        -: 3887:    // We create the exception message on the heap because VC++ prohibits
        -: 3888:    // creation of objects with destructors on stack in functions using __try
        -: 3889:    // (see error C2712).
        -: 3890:    std::string* exception_message = FormatSehExceptionMessage(
        -: 3891:        GetExceptionCode(), location);
        -: 3892:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 3893:                                             *exception_message);
        -: 3894:    delete exception_message;
        -: 3895:    return static_cast<Result>(0);
        -: 3896:  }
        -: 3897:#else
        -: 3898:  (void)location;
       4*: 3899:  return (object->*method)();
        4: 3899-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 3899-block  1
        4: 3899-block  2
        4: 3899-block  3
call    2 returned 4
        -: 3900:#endif  // GTEST_HAS_SEH
        -: 3901:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 10 returned 100% blocks executed 83%
       10: 3880:Result HandleSehExceptionsInMethodIfSupported(
        -: 3881:    T* object, Result (T::*method)(), const char* location) {
        -: 3882:#if GTEST_HAS_SEH
        -: 3883:  __try {
        -: 3884:    return (object->*method)();
        -: 3885:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 3886:      GetExceptionCode())) {
        -: 3887:    // We create the exception message on the heap because VC++ prohibits
        -: 3888:    // creation of objects with destructors on stack in functions using __try
        -: 3889:    // (see error C2712).
        -: 3890:    std::string* exception_message = FormatSehExceptionMessage(
        -: 3891:        GetExceptionCode(), location);
        -: 3892:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 3893:                                             *exception_message);
        -: 3894:    delete exception_message;
        -: 3895:    return static_cast<Result>(0);
        -: 3896:  }
        -: 3897:#else
        -: 3898:  (void)location;
      10*: 3899:  return (object->*method)();
       10: 3899-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3899-block  1
    %%%%%: 3899-block  2
       10: 3899-block  3
call    2 returned 10
        -: 3900:#endif  // GTEST_HAS_SEH
        -: 3901:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 40 returned 100% blocks executed 100%
       40: 3880:Result HandleSehExceptionsInMethodIfSupported(
        -: 3881:    T* object, Result (T::*method)(), const char* location) {
        -: 3882:#if GTEST_HAS_SEH
        -: 3883:  __try {
        -: 3884:    return (object->*method)();
        -: 3885:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 3886:      GetExceptionCode())) {
        -: 3887:    // We create the exception message on the heap because VC++ prohibits
        -: 3888:    // creation of objects with destructors on stack in functions using __try
        -: 3889:    // (see error C2712).
        -: 3890:    std::string* exception_message = FormatSehExceptionMessage(
        -: 3891:        GetExceptionCode(), location);
        -: 3892:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 3893:                                             *exception_message);
        -: 3894:    delete exception_message;
        -: 3895:    return static_cast<Result>(0);
        -: 3896:  }
        -: 3897:#else
        -: 3898:  (void)location;
       40: 3899:  return (object->*method)();
       40: 3899-block  0
branch  0 taken 30 (fallthrough)
branch  1 taken 10
       30: 3899-block  1
       10: 3899-block  2
       40: 3899-block  3
call    2 returned 40
        -: 3900:#endif  // GTEST_HAS_SEH
        -: 3901:}
------------------
        -: 3902:
        -: 3903:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 3904:// exceptions, if they are supported; returns the 0-value for type
        -: 3905:// Result in case of an SEH exception.
        -: 3906:template <class T, typename Result>
       55: 3907:Result HandleExceptionsInMethodIfSupported(
        -: 3908:    T* object, Result (T::*method)(), const char* location) {
        -: 3909:  // NOTE: The user code can affect the way in which Google Test handles
        -: 3910:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 3911:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 3912:  // after the exception is caught and either report or re-throw the
        -: 3913:  // exception based on the flag's value:
        -: 3914:  //
        -: 3915:  // try {
        -: 3916:  //   // Perform the test method.
        -: 3917:  // } catch (...) {
        -: 3918:  //   if (GTEST_FLAG(catch_exceptions))
        -: 3919:  //     // Report the exception as failure.
        -: 3920:  //   else
        -: 3921:  //     throw;  // Re-throws the original exception.
        -: 3922:  // }
        -: 3923:  //
        -: 3924:  // However, the purpose of this flag is to allow the program to drop into
        -: 3925:  // the debugger when the exception is thrown. On most platforms, once the
        -: 3926:  // control enters the catch block, the exception origin information is
        -: 3927:  // lost and the debugger will stop the program at the point of the
        -: 3928:  // re-throw in this function -- instead of at the point of the original
        -: 3929:  // throw statement in the code under test.  For this reason, we perform
        -: 3930:  // the check early, sacrificing the ability to affect Google Test's
        -: 3931:  // exception handling in the method where the exception is thrown.
       55: 3932:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 3933:#if GTEST_HAS_EXCEPTIONS
        -: 3934:    try {
       55: 3935:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 3936:    } catch (const AssertionException&) {  // NOLINT
        -: 3937:      // This failure was reported already.
    =====: 3938:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 3939:      // This exception type can only be thrown by a failed Google
        -: 3940:      // Test assertion with the intention of letting another testing
        -: 3941:      // framework catch it.  Therefore we just re-throw it.
    =====: 3942:      throw;
    =====: 3943:    } catch (const std::exception& e) {  // NOLINT
    =====: 3944:      internal::ReportFailureInUnknownLocation(
        -: 3945:          TestPartResult::kFatalFailure,
    =====: 3946:          FormatCxxExceptionMessage(e.what(), location));
    =====: 3947:    } catch (...) {  // NOLINT
    =====: 3948:      internal::ReportFailureInUnknownLocation(
        -: 3949:          TestPartResult::kFatalFailure,
        -: 3950:          FormatCxxExceptionMessage(NULL, location));
        -: 3951:    }
    =====: 3952:    return static_cast<Result>(0);
        -: 3953:#else
        -: 3954:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 3955:#endif  // GTEST_HAS_EXCEPTIONS
        -: 3956:  } else {
    #####: 3957:    return (object->*method)();
        -: 3958:  }
        -: 3959:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 3907:Result HandleExceptionsInMethodIfSupported(
        -: 3908:    T* object, Result (T::*method)(), const char* location) {
        -: 3909:  // NOTE: The user code can affect the way in which Google Test handles
        -: 3910:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 3911:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 3912:  // after the exception is caught and either report or re-throw the
        -: 3913:  // exception based on the flag's value:
        -: 3914:  //
        -: 3915:  // try {
        -: 3916:  //   // Perform the test method.
        -: 3917:  // } catch (...) {
        -: 3918:  //   if (GTEST_FLAG(catch_exceptions))
        -: 3919:  //     // Report the exception as failure.
        -: 3920:  //   else
        -: 3921:  //     throw;  // Re-throws the original exception.
        -: 3922:  // }
        -: 3923:  //
        -: 3924:  // However, the purpose of this flag is to allow the program to drop into
        -: 3925:  // the debugger when the exception is thrown. On most platforms, once the
        -: 3926:  // control enters the catch block, the exception origin information is
        -: 3927:  // lost and the debugger will stop the program at the point of the
        -: 3928:  // re-throw in this function -- instead of at the point of the original
        -: 3929:  // throw statement in the code under test.  For this reason, we perform
        -: 3930:  // the check early, sacrificing the ability to affect Google Test's
        -: 3931:  // exception handling in the method where the exception is thrown.
        1: 3932:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 3932-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 3933:#if GTEST_HAS_EXCEPTIONS
        -: 3934:    try {
        1: 3935:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 3935-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3935-block  1
    =====: 3936:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 3936-block  0
call    0 never executed
call    1 never executed
        -: 3937:      // This failure was reported already.
    =====: 3938:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 3938-block  0
call    0 never executed
    $$$$$: 3938-block  1
call    1 never executed
        -: 3939:      // This exception type can only be thrown by a failed Google
        -: 3940:      // Test assertion with the intention of letting another testing
        -: 3941:      // framework catch it.  Therefore we just re-throw it.
    =====: 3942:      throw;
call    0 never executed
    =====: 3943:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 3943-block  0
call    0 never executed
    $$$$$: 3943-block  1
call    1 never executed
    =====: 3944:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3944-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3944-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3944-block  2
call    8 never executed
    $$$$$: 3944-block  3
        -: 3945:          TestPartResult::kFatalFailure,
    =====: 3946:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 3947:    } catch (...) {  // NOLINT
    $$$$$: 3947-block  0
call    0 never executed
    $$$$$: 3947-block  1
call    1 never executed
    =====: 3948:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3948-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3948-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3948-block  2
call    8 never executed
    $$$$$: 3948-block  3
        -: 3949:          TestPartResult::kFatalFailure,
        -: 3950:          FormatCxxExceptionMessage(NULL, location));
        -: 3951:    }
    =====: 3952:    return static_cast<Result>(0);
    $$$$$: 3952-block  0
        -: 3953:#else
        -: 3954:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 3955:#endif  // GTEST_HAS_EXCEPTIONS
        -: 3956:  } else {
    #####: 3957:    return (object->*method)();
    %%%%%: 3957-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3957-block  1
    %%%%%: 3957-block  2
    %%%%%: 3957-block  3
call    2 never executed
        -: 3958:  }
        -: 3959:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc called 4 returned 100% blocks executed 18%
        4: 3907:Result HandleExceptionsInMethodIfSupported(
        -: 3908:    T* object, Result (T::*method)(), const char* location) {
        -: 3909:  // NOTE: The user code can affect the way in which Google Test handles
        -: 3910:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 3911:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 3912:  // after the exception is caught and either report or re-throw the
        -: 3913:  // exception based on the flag's value:
        -: 3914:  //
        -: 3915:  // try {
        -: 3916:  //   // Perform the test method.
        -: 3917:  // } catch (...) {
        -: 3918:  //   if (GTEST_FLAG(catch_exceptions))
        -: 3919:  //     // Report the exception as failure.
        -: 3920:  //   else
        -: 3921:  //     throw;  // Re-throws the original exception.
        -: 3922:  // }
        -: 3923:  //
        -: 3924:  // However, the purpose of this flag is to allow the program to drop into
        -: 3925:  // the debugger when the exception is thrown. On most platforms, once the
        -: 3926:  // control enters the catch block, the exception origin information is
        -: 3927:  // lost and the debugger will stop the program at the point of the
        -: 3928:  // re-throw in this function -- instead of at the point of the original
        -: 3929:  // throw statement in the code under test.  For this reason, we perform
        -: 3930:  // the check early, sacrificing the ability to affect Google Test's
        -: 3931:  // exception handling in the method where the exception is thrown.
        4: 3932:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        4: 3932-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        -: 3933:#if GTEST_HAS_EXCEPTIONS
        -: 3934:    try {
        4: 3935:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        4: 3935-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3935-block  1
    =====: 3936:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 3936-block  0
call    0 never executed
call    1 never executed
        -: 3937:      // This failure was reported already.
    =====: 3938:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 3938-block  0
call    0 never executed
    $$$$$: 3938-block  1
call    1 never executed
        -: 3939:      // This exception type can only be thrown by a failed Google
        -: 3940:      // Test assertion with the intention of letting another testing
        -: 3941:      // framework catch it.  Therefore we just re-throw it.
    =====: 3942:      throw;
call    0 never executed
    =====: 3943:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 3943-block  0
call    0 never executed
    $$$$$: 3943-block  1
call    1 never executed
    =====: 3944:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3944-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3944-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3944-block  2
call    8 never executed
    $$$$$: 3944-block  3
        -: 3945:          TestPartResult::kFatalFailure,
    =====: 3946:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 3947:    } catch (...) {  // NOLINT
    $$$$$: 3947-block  0
call    0 never executed
    $$$$$: 3947-block  1
call    1 never executed
    =====: 3948:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3948-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3948-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3948-block  2
call    8 never executed
    $$$$$: 3948-block  3
        -: 3949:          TestPartResult::kFatalFailure,
        -: 3950:          FormatCxxExceptionMessage(NULL, location));
        -: 3951:    }
    =====: 3952:    return static_cast<Result>(0);
    $$$$$: 3952-block  0
        -: 3953:#else
        -: 3954:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 3955:#endif  // GTEST_HAS_EXCEPTIONS
        -: 3956:  } else {
    #####: 3957:    return (object->*method)();
    %%%%%: 3957-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3957-block  1
    %%%%%: 3957-block  2
    %%%%%: 3957-block  3
call    2 never executed
        -: 3958:  }
        -: 3959:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 10 returned 100% blocks executed 18%
       10: 3907:Result HandleExceptionsInMethodIfSupported(
        -: 3908:    T* object, Result (T::*method)(), const char* location) {
        -: 3909:  // NOTE: The user code can affect the way in which Google Test handles
        -: 3910:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 3911:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 3912:  // after the exception is caught and either report or re-throw the
        -: 3913:  // exception based on the flag's value:
        -: 3914:  //
        -: 3915:  // try {
        -: 3916:  //   // Perform the test method.
        -: 3917:  // } catch (...) {
        -: 3918:  //   if (GTEST_FLAG(catch_exceptions))
        -: 3919:  //     // Report the exception as failure.
        -: 3920:  //   else
        -: 3921:  //     throw;  // Re-throws the original exception.
        -: 3922:  // }
        -: 3923:  //
        -: 3924:  // However, the purpose of this flag is to allow the program to drop into
        -: 3925:  // the debugger when the exception is thrown. On most platforms, once the
        -: 3926:  // control enters the catch block, the exception origin information is
        -: 3927:  // lost and the debugger will stop the program at the point of the
        -: 3928:  // re-throw in this function -- instead of at the point of the original
        -: 3929:  // throw statement in the code under test.  For this reason, we perform
        -: 3930:  // the check early, sacrificing the ability to affect Google Test's
        -: 3931:  // exception handling in the method where the exception is thrown.
       10: 3932:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       10: 3932-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0
        -: 3933:#if GTEST_HAS_EXCEPTIONS
        -: 3934:    try {
       10: 3935:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       10: 3935-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3935-block  1
    =====: 3936:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 3936-block  0
call    0 never executed
call    1 never executed
        -: 3937:      // This failure was reported already.
    =====: 3938:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 3938-block  0
call    0 never executed
    $$$$$: 3938-block  1
call    1 never executed
        -: 3939:      // This exception type can only be thrown by a failed Google
        -: 3940:      // Test assertion with the intention of letting another testing
        -: 3941:      // framework catch it.  Therefore we just re-throw it.
    =====: 3942:      throw;
call    0 never executed
    =====: 3943:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 3943-block  0
call    0 never executed
    $$$$$: 3943-block  1
call    1 never executed
    =====: 3944:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3944-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3944-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3944-block  2
call    8 never executed
    $$$$$: 3944-block  3
        -: 3945:          TestPartResult::kFatalFailure,
    =====: 3946:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 3947:    } catch (...) {  // NOLINT
    $$$$$: 3947-block  0
call    0 never executed
    $$$$$: 3947-block  1
call    1 never executed
    =====: 3948:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3948-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3948-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3948-block  2
call    8 never executed
    $$$$$: 3948-block  3
        -: 3949:          TestPartResult::kFatalFailure,
        -: 3950:          FormatCxxExceptionMessage(NULL, location));
        -: 3951:    }
    =====: 3952:    return static_cast<Result>(0);
    $$$$$: 3952-block  0
        -: 3953:#else
        -: 3954:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 3955:#endif  // GTEST_HAS_EXCEPTIONS
        -: 3956:  } else {
    #####: 3957:    return (object->*method)();
    %%%%%: 3957-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3957-block  1
    %%%%%: 3957-block  2
    %%%%%: 3957-block  3
call    2 never executed
        -: 3958:  }
        -: 3959:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 40 returned 100% blocks executed 18%
       40: 3907:Result HandleExceptionsInMethodIfSupported(
        -: 3908:    T* object, Result (T::*method)(), const char* location) {
        -: 3909:  // NOTE: The user code can affect the way in which Google Test handles
        -: 3910:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 3911:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 3912:  // after the exception is caught and either report or re-throw the
        -: 3913:  // exception based on the flag's value:
        -: 3914:  //
        -: 3915:  // try {
        -: 3916:  //   // Perform the test method.
        -: 3917:  // } catch (...) {
        -: 3918:  //   if (GTEST_FLAG(catch_exceptions))
        -: 3919:  //     // Report the exception as failure.
        -: 3920:  //   else
        -: 3921:  //     throw;  // Re-throws the original exception.
        -: 3922:  // }
        -: 3923:  //
        -: 3924:  // However, the purpose of this flag is to allow the program to drop into
        -: 3925:  // the debugger when the exception is thrown. On most platforms, once the
        -: 3926:  // control enters the catch block, the exception origin information is
        -: 3927:  // lost and the debugger will stop the program at the point of the
        -: 3928:  // re-throw in this function -- instead of at the point of the original
        -: 3929:  // throw statement in the code under test.  For this reason, we perform
        -: 3930:  // the check early, sacrificing the ability to affect Google Test's
        -: 3931:  // exception handling in the method where the exception is thrown.
       40: 3932:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       40: 3932-block  0
call    0 returned 40
call    1 returned 40
branch  2 taken 40 (fallthrough)
branch  3 taken 0
        -: 3933:#if GTEST_HAS_EXCEPTIONS
        -: 3934:    try {
       40: 3935:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       40: 3935-block  0
call    0 returned 40
branch  1 taken 40 (fallthrough)
branch  2 taken 0 (throw)
       40: 3935-block  1
    =====: 3936:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 3936-block  0
call    0 never executed
call    1 never executed
        -: 3937:      // This failure was reported already.
    =====: 3938:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 3938-block  0
call    0 never executed
    $$$$$: 3938-block  1
call    1 never executed
        -: 3939:      // This exception type can only be thrown by a failed Google
        -: 3940:      // Test assertion with the intention of letting another testing
        -: 3941:      // framework catch it.  Therefore we just re-throw it.
    =====: 3942:      throw;
call    0 never executed
    =====: 3943:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 3943-block  0
call    0 never executed
    $$$$$: 3943-block  1
call    1 never executed
    =====: 3944:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3944-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3944-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3944-block  2
call    8 never executed
    $$$$$: 3944-block  3
        -: 3945:          TestPartResult::kFatalFailure,
    =====: 3946:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 3947:    } catch (...) {  // NOLINT
    $$$$$: 3947-block  0
call    0 never executed
    $$$$$: 3947-block  1
call    1 never executed
    =====: 3948:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3948-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3948-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3948-block  2
call    8 never executed
    $$$$$: 3948-block  3
        -: 3949:          TestPartResult::kFatalFailure,
        -: 3950:          FormatCxxExceptionMessage(NULL, location));
        -: 3951:    }
    =====: 3952:    return static_cast<Result>(0);
    $$$$$: 3952-block  0
        -: 3953:#else
        -: 3954:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 3955:#endif  // GTEST_HAS_EXCEPTIONS
        -: 3956:  } else {
    #####: 3957:    return (object->*method)();
    %%%%%: 3957-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3957-block  1
    %%%%%: 3957-block  2
    %%%%%: 3957-block  3
call    2 never executed
        -: 3958:  }
        -: 3959:}
------------------
        -: 3960:
        -: 3961:}  // namespace internal
        -: 3962:
        -: 3963:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 10 returned 100% blocks executed 94%
       10: 3964:void Test::Run() {
      10*: 3965:  if (!HasSameFixtureClass()) return;
       10: 3965-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    %%%%%: 3965-block  1
        -: 3966:
       10: 3967:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       10: 3967-block  0
call    0 returned 10
       10: 3968:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 10
call    1 returned 10
       10: 3969:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 10
        -: 3970:  // We will run the test only if SetUp() was successful.
       10: 3971:  if (!HasFatalFailure()) {
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10: 3972:    impl->os_stack_trace_getter()->UponLeavingGTest();
       10: 3972-block  0
call    0 returned 10
call    1 returned 10
       10: 3973:    internal::HandleExceptionsInMethodIfSupported(
call    0 returned 10
        -: 3974:        this, &Test::TestBody, "the test body");
        -: 3975:  }
        -: 3976:
        -: 3977:  // However, we want to clean up as much as possible.  Hence we will
        -: 3978:  // always call TearDown(), even if SetUp() or the test body has
        -: 3979:  // failed.
       10: 3980:  impl->os_stack_trace_getter()->UponLeavingGTest();
       10: 3980-block  0
call    0 returned 10
call    1 returned 10
       10: 3981:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 10
        -: 3982:      this, &Test::TearDown, "TearDown()");
        -: 3983:}
        -: 3984:
        -: 3985:// Returns true iff the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 21 returned 100% blocks executed 100%
       21: 3986:bool Test::HasFatalFailure() {
       21: 3987:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       21: 3987-block  0
call    0 returned 21
call    1 returned 21
call    2 returned 21
        -: 3988:}
        -: 3989:
        -: 3990:// Returns true iff the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 3991:bool Test::HasNonfatalFailure() {
        -: 3992:  return internal::GetUnitTestImpl()->current_test_result()->
    #####: 3993:      HasNonfatalFailure();
    %%%%%: 3993-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3994:}
        -: 3995:
        -: 3996:// class TestInfo
        -: 3997:
        -: 3998:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 3999:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 10 returned 100% blocks executed 31%
       10: 4000:TestInfo::TestInfo(const std::string& a_test_case_name,
        -: 4001:                   const std::string& a_name,
        -: 4002:                   const char* a_type_param,
        -: 4003:                   const char* a_value_param,
        -: 4004:                   internal::CodeLocation a_code_location,
        -: 4005:                   internal::TypeId fixture_class_id,
       10: 4006:                   internal::TestFactoryBase* factory)
        -: 4007:    : test_case_name_(a_test_case_name),
        -: 4008:      name_(a_name),
    #####: 4009:      type_param_(a_type_param ? new std::string(a_type_param) : NULL),
    %%%%%: 4009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4009-block  1
call    3 never executed
    #####: 4010:      value_param_(a_value_param ? new std::string(a_value_param) : NULL),
    %%%%%: 4010-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4010-block  1
call    3 never executed
        -: 4011:      location_(a_code_location),
        -: 4012:      fixture_class_id_(fixture_class_id),
        -: 4013:      should_run_(false),
        -: 4014:      is_disabled_(false),
        -: 4015:      matches_filter_(false),
        -: 4016:      factory_(factory),
      10*: 4017:      result_() {}
       10: 4017-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 4017-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 10
    %%%%%: 4017-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4017-block  3
       10: 4017-block  4
       10: 4017-block  5
call   10 returned 10
branch 11 taken 0 (fallthrough)
branch 12 taken 10
    %%%%%: 4017-block  6
call   13 never executed
       10: 4017-block  7
branch 14 taken 0 (fallthrough)
branch 15 taken 10
    %%%%%: 4017-block  8
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 4017-block  9
       10: 4017-block 10
       10: 4017-block 11
call   20 returned 10
branch 21 taken 0 (fallthrough)
branch 22 taken 10
    %%%%%: 4017-block 12
call   23 never executed
       10: 4017-block 13
call   24 returned 10
branch 25 taken 10 (fallthrough)
branch 26 taken 0 (throw)
       10: 4017-block 14
call   27 returned 10
branch 28 taken 10 (fallthrough)
branch 29 taken 0 (throw)
       10: 4017-block 15
    $$$$$: 4017-block 16
branch 30 never executed
branch 31 never executed
    $$$$$: 4017-block 17
call   32 never executed
    $$$$$: 4017-block 18
    $$$$$: 4017-block 19
branch 33 never executed
branch 34 never executed
    $$$$$: 4017-block 20
call   35 never executed
    $$$$$: 4017-block 21
    $$$$$: 4017-block 22
call   36 never executed
    $$$$$: 4017-block 23
call   37 never executed
    $$$$$: 4017-block 24
call   38 never executed
    $$$$$: 4017-block 25
call   39 never executed
    $$$$$: 4017-block 26
call   40 never executed
        -: 4018:
        -: 4019:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 10 returned 100% blocks executed 100%
       10: 4020:TestInfo::~TestInfo() { delete factory_; }
       10: 4020-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 4020-block  1
call    2 returned 10
       10: 4020-block  2
call    3 returned 10
call    4 returned 10
call    5 returned 10
call    6 returned 10
call    7 returned 10
call    8 returned 10
        -: 4021:
        -: 4022:namespace internal {
        -: 4023:
        -: 4024:// Creates a new TestInfo object and registers it with Google Test;
        -: 4025:// returns the created object.
        -: 4026://
        -: 4027:// Arguments:
        -: 4028://
        -: 4029://   test_case_name:   name of the test case
        -: 4030://   name:             name of the test
        -: 4031://   type_param:       the name of the test's type parameter, or NULL if
        -: 4032://                     this is not a typed or a type-parameterized test.
        -: 4033://   value_param:      text representation of the test's value parameter,
        -: 4034://                     or NULL if this is not a value-parameterized test.
        -: 4035://   code_location:    code location where the test is defined
        -: 4036://   fixture_class_id: ID of the test fixture class
        -: 4037://   set_up_tc:        pointer to the function that sets up the test case
        -: 4038://   tear_down_tc:     pointer to the function that tears down the test case
        -: 4039://   factory:          pointer to the factory that creates a test object.
        -: 4040://                     The newly created TestInfo instance will assume
        -: 4041://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 10 returned 100% blocks executed 52%
       10: 4042:TestInfo* MakeAndRegisterTestInfo(
        -: 4043:    const char* test_case_name,
        -: 4044:    const char* name,
        -: 4045:    const char* type_param,
        -: 4046:    const char* value_param,
        -: 4047:    CodeLocation code_location,
        -: 4048:    TypeId fixture_class_id,
        -: 4049:    SetUpTestCaseFunc set_up_tc,
        -: 4050:    TearDownTestCaseFunc tear_down_tc,
        -: 4051:    TestFactoryBase* factory) {
        -: 4052:  TestInfo* const test_info =
        -: 4053:      new TestInfo(test_case_name, name, type_param, value_param,
       10: 4054:                   code_location, fixture_class_id, factory);
       10: 4054-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 4054-block  1
call    4 returned 10
call    5 returned 10
branch  6 taken 10 (fallthrough)
branch  7 taken 0 (throw)
       10: 4054-block  2
call    8 returned 10
branch  9 taken 10 (fallthrough)
branch 10 taken 0 (throw)
       10: 4054-block  3
call   11 returned 10
branch 12 taken 10 (fallthrough)
branch 13 taken 0 (throw)
       10: 4054-block  4
call   14 returned 10
branch 15 taken 10 (fallthrough)
branch 16 taken 0 (throw)
       10: 4054-block  5
call   17 returned 10
call   18 returned 10
call   19 returned 10
call   20 returned 10
call   21 returned 10
    $$$$$: 4054-block  6
call   22 never executed
    $$$$$: 4054-block  7
call   23 never executed
    $$$$$: 4054-block  8
    $$$$$: 4054-block  9
call   24 never executed
    $$$$$: 4054-block 10
    $$$$$: 4054-block 11
call   25 never executed
    $$$$$: 4054-block 12
    $$$$$: 4054-block 13
call   26 never executed
    $$$$$: 4054-block 14
    $$$$$: 4054-block 15
call   27 never executed
       10: 4055:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 10
call    1 returned 10
       10: 4056:  return test_info;
       10: 4056-block  0
        -: 4057:}
        -: 4058:
function _ZN7testing8internal25ReportInvalidTestCaseTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 4059:void ReportInvalidTestCaseType(const char* test_case_name,
        -: 4060:                               CodeLocation code_location) {
    #####: 4061:  Message errors;
    %%%%%: 4061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4061-block  1
call    3 never executed
        -: 4062:  errors
    #####: 4063:      << "Attempted redefinition of test case " << test_case_name << ".\n"
    %%%%%: 4063-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4063-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4063-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4064:      << "All tests in the same test case must use the same test fixture\n"
    %%%%%: 4064-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4065:      << "class.  However, in test case " << test_case_name << ", you tried\n"
    %%%%%: 4065-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4065-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4065-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4066:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 4066-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4067:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 4067-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4068:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 4068-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4069:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 4069-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4070:      << "test cases.";
    %%%%%: 4070-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4071:
    #####: 4072:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 4072-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4072-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 4072-block  2
call   10 never executed
    $$$$$: 4072-block  3
    $$$$$: 4072-block  4
call   11 never executed
    $$$$$: 4072-block  5
        -: 4073:                                          code_location.line)
    #####: 4074:                    << " " << errors.GetString();
    %%%%%: 4074-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4074-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4074-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4074-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4074-block  4
call   12 never executed
call   13 never executed
    $$$$$: 4074-block  5
call   14 never executed
    $$$$$: 4074-block  6
    #####: 4075:}
        -: 4076:}  // namespace internal
        -: 4077:
        -: 4078:namespace {
        -: 4079:
        -: 4080:// A predicate that checks the test name of a TestInfo against a known
        -: 4081:// value.
        -: 4082://
        -: 4083:// This is used for implementation of the TestCase class only.  We put
        -: 4084:// it in the anonymous namespace to prevent polluting the outer
        -: 4085:// namespace.
        -: 4086://
        -: 4087:// TestNameIs is copyable.
        -: 4088:class TestNameIs {
        -: 4089: public:
        -: 4090:  // Constructor.
        -: 4091:  //
        -: 4092:  // TestNameIs has NO default constructor.
        -: 4093:  explicit TestNameIs(const char* name)
        -: 4094:      : name_(name) {}
        -: 4095:
        -: 4096:  // Returns true iff the test name of test_info matches name_.
        -: 4097:  bool operator()(const TestInfo * test_info) const {
        -: 4098:    return test_info && test_info->name() == name_;
        -: 4099:  }
        -: 4100:
        -: 4101: private:
        -: 4102:  std::string name_;
        -: 4103:};
        -: 4104:
        -: 4105:}  // namespace
        -: 4106:
        -: 4107:namespace internal {
        -: 4108:
        -: 4109:// This method expands all parameterized tests registered with macros TEST_P
        -: 4110:// and INSTANTIATE_TEST_CASE_P into regular tests and registers those.
        -: 4111:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 4112:void UnitTestImpl::RegisterParameterizedTests() {
        1: 4113:  if (!parameterized_tests_registered_) {
        1: 4113-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4114:    parameterized_test_registry_.RegisterTests();
        1: 4114-block  0
call    0 returned 1
        1: 4115:    parameterized_tests_registered_ = true;
        -: 4116:  }
        1: 4117:}
        -: 4118:
        -: 4119:}  // namespace internal
        -: 4120:
        -: 4121:// Creates the test object, runs it, records its result, and then
        -: 4122:// deletes it.
function _ZN7testing8TestInfo3RunEv called 10 returned 100% blocks executed 96%
       10: 4123:void TestInfo::Run() {
      10*: 4124:  if (!should_run_) return;
       10: 4124-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 4124-block  1
        -: 4125:
        -: 4126:  // Tells UnitTest where to store test result.
       10: 4127:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       10: 4127-block  0
call    0 returned 10
       10: 4128:  impl->set_current_test_info(this);
call    0 returned 10
        -: 4129:
       10: 4130:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 10
call    1 returned 10
call    2 returned 10
        -: 4131:
        -: 4132:  // Notifies the unit test event listeners that a test is about to start.
       10: 4133:  repeater->OnTestStart(*this);
call    0 returned 10
        -: 4134:
       10: 4135:  const TimeInMillis start = internal::GetTimeInMillis();
call    0 returned 10
        -: 4136:
       10: 4137:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 10
call    1 returned 10
        -: 4138:
        -: 4139:  // Creates the test object.
       30: 4140:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       10: 4141:      factory_, &internal::TestFactoryBase::CreateTest,
call    0 returned 10
        -: 4142:      "the test fixture's constructor");
        -: 4143:
        -: 4144:  // Runs the test if the constructor didn't generate a fatal failure.
        -: 4145:  // Note that the object will not be null
       10: 4146:  if (!Test::HasFatalFailure()) {
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
        -: 4147:    // This doesn't throw as all user code that can throw are wrapped into
        -: 4148:    // exception handling code.
       10: 4149:    test->Run();
       10: 4149-block  0
call    0 returned 10
        -: 4150:  }
        -: 4151:
        -: 4152:    // Deletes the test object.
       10: 4153:    impl->os_stack_trace_getter()->UponLeavingGTest();
       10: 4153-block  0
call    0 returned 10
call    1 returned 10
       10: 4154:    internal::HandleExceptionsInMethodIfSupported(
call    0 returned 10
        -: 4155:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 4156:
       10: 4157:  result_.set_elapsed_time(internal::GetTimeInMillis() - start);
call    0 returned 10
call    1 returned 10
        -: 4158:
        -: 4159:  // Notifies the unit test event listener that a test has just finished.
       10: 4160:  repeater->OnTestEnd(*this);
call    0 returned 10
        -: 4161:
        -: 4162:  // Tells UnitTest to stop associating assertion results to this
        -: 4163:  // test.
       10: 4164:  impl->set_current_test_info(NULL);
call    0 returned 10
        -: 4165:}
        -: 4166:
        -: 4167:// class TestCase
        -: 4168:
        -: 4169:// Gets the number of successful tests in this test case.
function _ZNK7testing8TestCase21successful_test_countEv called 2 returned 100% blocks executed 100%
        2: 4170:int TestCase::successful_test_count() const {
        2: 4171:  return CountIf(test_info_list_, TestPassed);
        2: 4171-block  0
call    0 returned 2
        -: 4172:}
        -: 4173:
        -: 4174:// Gets the number of failed tests in this test case.
function _ZNK7testing8TestCase17failed_test_countEv called 12 returned 100% blocks executed 100%
       12: 4175:int TestCase::failed_test_count() const {
       12: 4176:  return CountIf(test_info_list_, TestFailed);
       12: 4176-block  0
call    0 returned 12
        -: 4177:}
        -: 4178:
        -: 4179:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8TestCase30reportable_disabled_test_countEv called 2 returned 100% blocks executed 100%
        2: 4180:int TestCase::reportable_disabled_test_count() const {
        2: 4181:  return CountIf(test_info_list_, TestReportableDisabled);
        2: 4181-block  0
call    0 returned 2
        -: 4182:}
        -: 4183:
        -: 4184:// Gets the number of disabled tests in this test case.
function _ZNK7testing8TestCase19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4185:int TestCase::disabled_test_count() const {
    #####: 4186:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 4186-block  0
call    0 never executed
        -: 4187:}
        -: 4188:
        -: 4189:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8TestCase21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4190:int TestCase::reportable_test_count() const {
    #####: 4191:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 4191-block  0
call    0 never executed
        -: 4192:}
        -: 4193:
        -: 4194:// Get the number of tests in this test case that should run.
function _ZNK7testing8TestCase17test_to_run_countEv called 8 returned 100% blocks executed 100%
        8: 4195:int TestCase::test_to_run_count() const {
        8: 4196:  return CountIf(test_info_list_, ShouldRunTest);
        8: 4196-block  0
call    0 returned 8
        -: 4197:}
        -: 4198:
        -: 4199:// Gets the number of all tests.
function _ZNK7testing8TestCase16total_test_countEv called 15 returned 100% blocks executed 100%
       15: 4200:int TestCase::total_test_count() const {
       15: 4201:  return static_cast<int>(test_info_list_.size());
       15: 4201-block  0
call    0 returned 15
        -: 4202:}
        -: 4203:
        -: 4204:// Creates a TestCase with the given name.
        -: 4205://
        -: 4206:// Arguments:
        -: 4207://
        -: 4208://   name:         name of the test case
        -: 4209://   a_type_param: the name of the test case's type parameter, or NULL if
        -: 4210://                 this is not a typed or a type-parameterized test case.
        -: 4211://   set_up_tc:    pointer to the function that sets up the test case
        -: 4212://   tear_down_tc: pointer to the function that tears down the test case
function _ZN7testing8TestCaseC2EPKcS2_PFvvES4_ called 2 returned 100% blocks executed 36%
        2: 4213:TestCase::TestCase(const char* a_name, const char* a_type_param,
        -: 4214:                   Test::SetUpTestCaseFunc set_up_tc,
        2: 4215:                   Test::TearDownTestCaseFunc tear_down_tc)
        -: 4216:    : name_(a_name),
    #####: 4217:      type_param_(a_type_param ? new std::string(a_type_param) : NULL),
    %%%%%: 4217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4217-block  1
call    3 never executed
        -: 4218:      set_up_tc_(set_up_tc),
        -: 4219:      tear_down_tc_(tear_down_tc),
        -: 4220:      should_run_(false),
       2*: 4221:      elapsed_time_(0) {
        2: 4221-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 4221-block  1
call    4 returned 2
branch  5 taken 0 (fallthrough)
branch  6 taken 2
    %%%%%: 4221-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4221-block  3
        2: 4221-block  4
        2: 4221-block  5
call   11 returned 2
branch 12 taken 0 (fallthrough)
branch 13 taken 2
    %%%%%: 4221-block  6
call   14 never executed
        2: 4221-block  7
call   15 returned 2
call   16 returned 2
call   17 returned 2
branch 18 taken 2 (fallthrough)
branch 19 taken 0 (throw)
    $$$$$: 4221-block  8
call   20 never executed
    $$$$$: 4221-block  9
call   21 never executed
    $$$$$: 4221-block 10
branch 22 never executed
branch 23 never executed
    $$$$$: 4221-block 11
call   24 never executed
    $$$$$: 4221-block 12
    $$$$$: 4221-block 13
call   25 never executed
    $$$$$: 4221-block 14
call   26 never executed
    $$$$$: 4221-block 15
call   27 never executed
    $$$$$: 4221-block 16
call   28 never executed
        2: 4222:}
        2: 4222-block  0
        -: 4223:
        -: 4224:// Destructor of TestCase.
        4: 4225:TestCase::~TestCase() {
        -: 4226:  // Deletes every Test in the collection.
        2: 4227:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        4: 4228:}
------------------
_ZN7testing8TestCaseD0Ev:
function _ZN7testing8TestCaseD0Ev called 2 returned 100% blocks executed 100%
        2: 4225:TestCase::~TestCase() {
        -: 4226:  // Deletes every Test in the collection.
        -: 4227:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 4228:}
        2: 4228-block  0
call    0 returned 2
call    1 returned 2
------------------
_ZN7testing8TestCaseD2Ev:
function _ZN7testing8TestCaseD2Ev called 2 returned 100% blocks executed 100%
        2: 4225:TestCase::~TestCase() {
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
        -: 4226:  // Deletes every Test in the collection.
        2: 4227:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 4227-block  0
call    0 returned 2
        2: 4228:}
------------------
        -: 4229:
        -: 4230:// Returns the i-th test among all the tests. i can range from 0 to
        -: 4231:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8TestCase11GetTestInfoEi called 2 returned 100% blocks executed 86%
        2: 4232:const TestInfo* TestCase::GetTestInfo(int i) const {
        2: 4233:  const int index = GetElementOr(test_indices_, i, -1);
        2: 4233-block  0
call    0 returned 2
       2*: 4234:  return index < 0 ? NULL : test_info_list_[index];
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 4234-block  0
call    2 returned 2
    %%%%%: 4234-block  1
        2: 4234-block  2
        -: 4235:}
        -: 4236:
        -: 4237:// Returns the i-th test among all the tests. i can range from 0 to
        -: 4238:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8TestCase18GetMutableTestInfoEi called 10 returned 100% blocks executed 86%
       10: 4239:TestInfo* TestCase::GetMutableTestInfo(int i) {
       10: 4240:  const int index = GetElementOr(test_indices_, i, -1);
       10: 4240-block  0
call    0 returned 10
      10*: 4241:  return index < 0 ? NULL : test_info_list_[index];
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 4241-block  0
call    2 returned 10
    %%%%%: 4241-block  1
       10: 4241-block  2
        -: 4242:}
        -: 4243:
        -: 4244:// Adds a test to this test case.  Will delete the test upon
        -: 4245:// destruction of the TestCase object.
function _ZN7testing8TestCase11AddTestInfoEPNS_8TestInfoE called 10 returned 100% blocks executed 100%
       10: 4246:void TestCase::AddTestInfo(TestInfo * test_info) {
       10: 4247:  test_info_list_.push_back(test_info);
       10: 4247-block  0
call    0 returned 10
       10: 4248:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 4249:}
       10: 4249-block  0
        -: 4250:
        -: 4251:// Runs every test in this TestCase.
function _ZN7testing8TestCase3RunEv called 2 returned 100% blocks executed 96%
        2: 4252:void TestCase::Run() {
       2*: 4253:  if (!should_run_) return;
        2: 4253-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 4253-block  1
        -: 4254:
        2: 4255:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        2: 4255-block  0
call    0 returned 2
        2: 4256:  impl->set_current_test_case(this);
call    0 returned 2
        -: 4257:
        2: 4258:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -: 4259:
        2: 4260:  repeater->OnTestCaseStart(*this);
call    0 returned 2
        2: 4261:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 2
call    1 returned 2
        2: 4262:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 2
        -: 4263:      this, &TestCase::RunSetUpTestCase, "SetUpTestCase()");
        -: 4264:
        2: 4265:  const internal::TimeInMillis start = internal::GetTimeInMillis();
call    0 returned 2
       12: 4266:  for (int i = 0; i < total_test_count(); i++) {
       12: 4266-block  0
call    0 returned 12
branch  1 taken 10 (fallthrough)
branch  2 taken 2
       10: 4267:    GetMutableTestInfo(i)->Run();
       10: 4267-block  0
call    0 returned 10
call    1 returned 10
        -: 4268:  }
        2: 4269:  elapsed_time_ = internal::GetTimeInMillis() - start;
        2: 4269-block  0
call    0 returned 2
        -: 4270:
        2: 4271:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 2
call    1 returned 2
        2: 4272:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 2
        -: 4273:      this, &TestCase::RunTearDownTestCase, "TearDownTestCase()");
        -: 4274:
        2: 4275:  repeater->OnTestCaseEnd(*this);
call    0 returned 2
        2: 4276:  impl->set_current_test_case(NULL);
call    0 returned 2
        -: 4277:}
        -: 4278:
        -: 4279:// Clears the results of all tests in this test case.
function _ZN7testing8TestCase11ClearResultEv called 2 returned 100% blocks executed 100%
        2: 4280:void TestCase::ClearResult() {
        2: 4281:  ad_hoc_test_result_.Clear();
        2: 4281-block  0
call    0 returned 2
        2: 4282:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 2
        2: 4283:}
        -: 4284:
        -: 4285:// Shuffles the tests in this test case.
function _ZN7testing8TestCase12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 4286:void TestCase::ShuffleTests(internal::Random* random) {
    #####: 4287:  Shuffle(random, &test_indices_);
    %%%%%: 4287-block  0
call    0 never executed
    #####: 4288:}
        -: 4289:
        -: 4290:// Restores the test order to before the first shuffle.
function _ZN7testing8TestCase14UnshuffleTestsEv called 2 returned 100% blocks executed 100%
        2: 4291:void TestCase::UnshuffleTests() {
       12: 4292:  for (size_t i = 0; i < test_indices_.size(); i++) {
        2: 4292-block  0
       12: 4292-block  1
call    0 returned 12
branch  1 taken 10 (fallthrough)
branch  2 taken 2
       10: 4293:    test_indices_[i] = static_cast<int>(i);
       10: 4293-block  0
call    0 returned 10
        -: 4294:  }
        2: 4295:}
        -: 4296:
        -: 4297:// Formats a countable noun.  Depending on its quantity, either the
        -: 4298:// singular form or the plural form is used. e.g.
        -: 4299://
        -: 4300:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 4301:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 10 returned 100% blocks executed 71%
       10: 4302:static std::string FormatCountableNoun(int count,
        -: 4303:                                       const char * singular_form,
        -: 4304:                                       const char * plural_form) {
       20: 4305:  return internal::StreamableToString(count) + " " +
       10: 4305-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 4305-block  1
call    4 returned 10
call    5 returned 10
    $$$$$: 4305-block  2
call    6 never executed
    $$$$$: 4305-block  3
    $$$$$: 4305-block  4
call    7 never executed
       30: 4306:      (count == 1 ? singular_form : plural_form);
       10: 4306-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 9
        1: 4306-block  1
        9: 4306-block  2
       10: 4306-block  3
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
       10: 4306-block  4
       10: 4306-block  5
        -: 4307:}
        -: 4308:
        -: 4309:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 4 returned 100% blocks executed 100%
        4: 4310:static std::string FormatTestCount(int test_count) {
        4: 4311:  return FormatCountableNoun(test_count, "test", "tests");
        4: 4311-block  0
call    0 returned 4
        -: 4312:}
        -: 4313:
        -: 4314:// Formats the count of test cases.
function _ZN7testingL19FormatTestCaseCountEi called 2 returned 100% blocks executed 100%
        2: 4315:static std::string FormatTestCaseCount(int test_case_count) {
        2: 4316:  return FormatCountableNoun(test_case_count, "test case", "test cases");
        2: 4316-block  0
call    0 returned 2
        -: 4317:}
        -: 4318:
        -: 4319:// Converts a TestPartResult::Type enum to human-friendly string
        -: 4320:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 4321:// to "Failure", as the user usually doesn't care about the difference
        -: 4322:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 1 returned 100% blocks executed 60%
        1: 4323:static const char * TestPartResultTypeToString(TestPartResult::Type type) {
        1: 4324:  switch (type) {
        1: 4324-block  0
branch  0 taken 0
branch  1 taken 1
branch  2 taken 0
    #####: 4325:    case TestPartResult::kSuccess:
    #####: 4326:      return "Success";
    %%%%%: 4326-block  0
        -: 4327:
        1: 4328:    case TestPartResult::kNonFatalFailure:
        -: 4329:    case TestPartResult::kFatalFailure:
        -: 4330:#ifdef _MSC_VER
        -: 4331:      return "error: ";
        -: 4332:#else
        1: 4333:      return "Failure\n";
        1: 4333-block  0
        -: 4334:#endif
    #####: 4335:    default:
    #####: 4336:      return "Unknown result type";
    %%%%%: 4336-block  0
        -: 4337:  }
        -: 4338:}
        -: 4339:
        -: 4340:namespace internal {
        -: 4341:
        -: 4342:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 1 returned 100% blocks executed 72%
        1: 4343:static std::string PrintTestPartResultToString(
        -: 4344:    const TestPartResult& test_part_result) {
        2: 4345:  return (Message()
        1: 4345-block  0
call    0 returned 1
    $$$$$: 4345-block  1
call    1 never executed
        2: 4346:          << internal::FormatFileLocation(test_part_result.file_name(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
    $$$$$: 4346-block  0
call    6 never executed
    $$$$$: 4346-block  1
        1: 4347:                                          test_part_result.line_number())
        1: 4347-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4348:          << " " << TestPartResultTypeToString(test_part_result.type())
        1: 4348-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4348-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$: 4348-block  2
        2: 4349:          << test_part_result.message()).GetString();
        1: 4349-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 4349-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 4349-block  2
        1: 4349-block  3
call    7 returned 1
        1: 4349-block  4
    $$$$$: 4349-block  5
        -: 4350:}
        -: 4351:
        -: 4352:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 78%
        1: 4353:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        -: 4354:  const std::string& result =
        2: 4355:      PrintTestPartResultToString(test_part_result);
        1: 4355-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4355-block  1
call    3 returned 1
    $$$$$: 4355-block  2
call    4 never executed
        1: 4356:  printf("%s\n", result.c_str());
        1: 4356-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 4357:  fflush(stdout);
        1: 4357-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 4358:  // If the test program runs in Visual Studio or a debugger, the
        -: 4359:  // following statements add the test part result message to the Output
        -: 4360:  // window such that the user can double-click on it to jump to the
        -: 4361:  // corresponding source code location; otherwise they do nothing.
        -: 4362:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 4363:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 4364:  // to stdout is done by OutputDebugString() there already - we don't
        -: 4365:  // want the same message printed twice.
        -: 4366:  ::OutputDebugStringA(result.c_str());
        -: 4367:  ::OutputDebugStringA("\n");
        -: 4368:#endif
        1: 4369:}
        -: 4370:
        -: 4371:// class PrettyUnitTestResultPrinter
        -: 4372:
        -: 4373:enum GTestColor {
        -: 4374:  COLOR_DEFAULT,
        -: 4375:  COLOR_RED,
        -: 4376:  COLOR_GREEN,
        -: 4377:  COLOR_YELLOW
        -: 4378:};
        -: 4379:
        -: 4380:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 4381:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 4382:
        -: 4383:// Returns the character attribute for the given color.
        -: 4384:static WORD GetColorAttribute(GTestColor color) {
        -: 4385:  switch (color) {
        -: 4386:    case COLOR_RED:    return FOREGROUND_RED;
        -: 4387:    case COLOR_GREEN:  return FOREGROUND_GREEN;
        -: 4388:    case COLOR_YELLOW: return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 4389:    default:           return 0;
        -: 4390:  }
        -: 4391:}
        -: 4392:
        -: 4393:static int GetBitOffset(WORD color_mask) {
        -: 4394:  if (color_mask == 0) return 0;
        -: 4395:
        -: 4396:  int bitOffset = 0;
        -: 4397:  while ((color_mask & 1) == 0) {
        -: 4398:    color_mask >>= 1;
        -: 4399:    ++bitOffset;
        -: 4400:  }
        -: 4401:  return bitOffset;
        -: 4402:}
        -: 4403:
        -: 4404:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 4405:  // Let's reuse the BG
        -: 4406:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 4407:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 4408:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 4409:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 4410:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 4411:
        -: 4412:  WORD new_color =
        -: 4413:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 4414:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 4415:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 4416:
        -: 4417:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 4418:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 4419:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 4420:  }
        -: 4421:  return new_color;
        -: 4422:}
        -: 4423:
        -: 4424:#else
        -: 4425:
        -: 4426:// Returns the ANSI color code for the given color.  COLOR_DEFAULT is
        -: 4427:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_10GTestColorE called 0 returned 0% blocks executed 0%
    #####: 4428:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 4429:  switch (color) {
    %%%%%: 4429-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4430:    case COLOR_RED:     return "1";
    %%%%%: 4430-block  0
    #####: 4431:    case COLOR_GREEN:   return "2";
    %%%%%: 4431-block  0
    #####: 4432:    case COLOR_YELLOW:  return "3";
    %%%%%: 4432-block  0
    #####: 4433:    default:            return NULL;
    %%%%%: 4433-block  0
        -: 4434:  };
        -: 4435:}
        -: 4436:
        -: 4437:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 4438:
        -: 4439:// Returns true iff Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 31%
        1: 4440:bool ShouldUseColor(bool stdout_is_tty) {
        1: 4441:  const char* const gtest_color = GTEST_FLAG(color).c_str();
        1: 4441-block  0
call    0 returned 1
        -: 4442:
        1: 4443:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 4444:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 4445:    // On Windows the TERM variable is usually not set, but the
        -: 4446:    // console there does support colors.
        -: 4447:    return stdout_is_tty;
        -: 4448:#else
        -: 4449:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 4450:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 4450-block  0
call    0 never executed
        -: 4451:    const bool term_supports_color =
    #####: 4452:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4453:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 4453-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4454:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 4454-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4455:        String::CStringEquals(term, "screen") ||
    %%%%%: 4455-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4456:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 4456-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4457:        String::CStringEquals(term, "tmux") ||
    %%%%%: 4457-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4458:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 4458-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4459:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 4459-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4460:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 4460-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4461:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 4461-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4461-block  1
    %%%%%: 4461-block  2
    #####: 4462:        String::CStringEquals(term, "cygwin");
    %%%%%: 4462-block  0
call    0 never executed
    #####: 4463:    return stdout_is_tty && term_supports_color;
    %%%%%: 4463-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4463-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4463-block  2
    %%%%%: 4463-block  3
    %%%%%: 4463-block  4
        -: 4464:#endif  // GTEST_OS_WINDOWS
        -: 4465:  }
        -: 4466:
        2: 4467:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 4467-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 4468:      String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 4468-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       3*: 4469:      String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4469-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 4469-block  1
        1: 4469-block  2
        2: 4470:      String::CStringEquals(gtest_color, "1");
        1: 4470-block  0
call    0 returned 1
        1: 4470-block  1
        -: 4471:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 4472:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 4473:  // be conservative.
        -: 4474:}
        -: 4475:
        -: 4476:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 4477:// cannot simply emit special characters and have the terminal change colors.
        -: 4478:// This routine must actually emit the characters rather than return a string
        -: 4479:// that would be colored when printed, as can be done on Linux.
function _ZN7testing8internalL13ColoredPrintfENS0_10GTestColorEPKcz called 31 returned 100% blocks executed 67%
       31: 4480:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 4481:  va_list args;
       31: 4482:  va_start(args, fmt);
        -: 4483:
        -: 4484:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || GTEST_OS_ZOS || \
        -: 4485:    GTEST_OS_IOS || GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT
        -: 4486:  const bool use_color = AlwaysFalse();
        -: 4487:#else
        -: 4488:  static const bool in_color_mode =
       31: 4489:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       31: 4489-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 30
        1: 4489-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 4489-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
      31*: 4490:  const bool use_color = in_color_mode && (color != COLOR_DEFAULT);
       31: 4490-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 31
    %%%%%: 4490-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4490-block  2
       31: 4490-block  3
        -: 4491:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || GTEST_OS_ZOS
        -: 4492:  // The '!= 0' comparison is necessary to satisfy MSVC 7.1.
        -: 4493:
       31: 4494:  if (!use_color) {
       31: 4494-block  0
branch  0 taken 31 (fallthrough)
branch  1 taken 0
       31: 4495:    vprintf(fmt, args);
       31: 4495-block  0
call    0 returned 31
branch  1 taken 31 (fallthrough)
branch  2 taken 0 (throw)
       31: 4496:    va_end(args);
       31: 4497:    return;
       31: 4497-block  0
        -: 4498:  }
        -: 4499:
        -: 4500:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 4501:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 4502:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 4503:
        -: 4504:  // Gets the current text color.
        -: 4505:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 4506:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 4507:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 4508:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 4509:
        -: 4510:  // We need to flush the stream buffers into the console before each
        -: 4511:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 4512:  // printed but has not yet reached the console.
        -: 4513:  fflush(stdout);
        -: 4514:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 4515:
        -: 4516:  vprintf(fmt, args);
        -: 4517:
        -: 4518:  fflush(stdout);
        -: 4519:  // Restores the text color.
        -: 4520:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 4521:#else
    #####: 4522:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 4522-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4523:  vprintf(fmt, args);
    %%%%%: 4523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4524:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 4524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4525:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 4526:  va_end(args);
    %%%%%: 4526-block  0
        -: 4527:}
        -: 4528:
        -: 4529:// Text printed in Google Test's text output and --gtest_list_tests
        -: 4530:// output to label the type parameter and value parameter for a test.
        -: 4531:static const char kTypeParamLabel[] = "TypeParam";
        -: 4532:static const char kValueParamLabel[] = "GetParam()";
        -: 4533:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 2 returned 100% blocks executed 42%
        2: 4534:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
        2: 4535:  const char* const type_param = test_info.type_param();
        2: 4535-block  0
call    0 returned 2
        2: 4536:  const char* const value_param = test_info.value_param();
call    0 returned 2
        -: 4537:
        2: 4538:  if (type_param != NULL || value_param != NULL) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 4538-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 4539:    printf(", where ");
    %%%%%: 4539-block  0
call    0 never executed
    #####: 4540:    if (type_param != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 4541:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 4541-block  0
call    0 never executed
    #####: 4542:      if (value_param != NULL)
branch  0 never executed
branch  1 never executed
    #####: 4543:        printf(" and ");
    %%%%%: 4543-block  0
call    0 never executed
        -: 4544:    }
    #####: 4545:    if (value_param != NULL) {
    %%%%%: 4545-block  0
branch  0 never executed
branch  1 never executed
    #####: 4546:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 4546-block  0
call    0 never executed
        -: 4547:    }
        -: 4548:  }
        2: 4549:}
        -: 4550:
        -: 4551:// This class implements the TestEventListener interface.
        -: 4552://
        -: 4553:// Class PrettyUnitTestResultPrinter is copyable.
        -: 4554:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 4555: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC2Ev called 1 returned 100% blocks executed 100%
        1: 4556:  PrettyUnitTestResultPrinter() {}
        1: 4556-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 20 returned 100% blocks executed 100%
       20: 4557:  static void PrintTestName(const char * test_case, const char * test) {
       20: 4558:    printf("%s.%s", test_case, test);
       20: 4558-block  0
call    0 returned 20
       20: 4559:  }
        -: 4560:
        -: 4561:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 4562:  virtual void OnTestProgramStart(const UnitTest& /*unit_test*/) {}
        -: 4563:  virtual void OnTestIterationStart(const UnitTest& unit_test, int iteration);
        -: 4564:  virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test);
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 4565:  virtual void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) {}
        -: 4566:  virtual void OnTestCaseStart(const TestCase& test_case);
        -: 4567:  virtual void OnTestStart(const TestInfo& test_info);
        -: 4568:  virtual void OnTestPartResult(const TestPartResult& result);
        -: 4569:  virtual void OnTestEnd(const TestInfo& test_info);
        -: 4570:  virtual void OnTestCaseEnd(const TestCase& test_case);
        -: 4571:  virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test);
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 4572:  virtual void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) {}
        -: 4573:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 4574:  virtual void OnTestProgramEnd(const UnitTest& /*unit_test*/) {}
        -: 4575:
        -: 4576: private:
        -: 4577:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 4578:};
        -: 4579:
        -: 4580:  // Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 63%
        1: 4581:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 4582:    const UnitTest& unit_test, int iteration) {
        1: 4583:  if (GTEST_FLAG(repeat) != 1)
        1: 4583-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 4584:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 4584-block  0
call    0 never executed
        -: 4585:
        1: 4586:  const char* const filter = GTEST_FLAG(filter).c_str();
        1: 4586-block  0
call    0 returned 1
        -: 4587:
        -: 4588:  // Prints the filter if it's not *.  This reminds the user that some
        -: 4589:  // tests may be skipped.
        1: 4590:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4591:    ColoredPrintf(COLOR_YELLOW,
    %%%%%: 4591-block  0
call    0 never executed
        -: 4592:                  "Note: %s filter = %s\n", GTEST_NAME_, filter);
        -: 4593:  }
        -: 4594:
        1: 4595:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 4595-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4596:    const Int32 shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 4596-block  0
call    0 never executed
    #####: 4597:    ColoredPrintf(COLOR_YELLOW,
call    0 never executed
call    1 never executed
        -: 4598:                  "Note: This is test shard %d of %s.\n",
        -: 4599:                  static_cast<int>(shard_index) + 1,
        -: 4600:                  internal::posix::GetEnv(kTestTotalShards));
        -: 4601:  }
        -: 4602:
        1: 4603:  if (GTEST_FLAG(shuffle)) {
        1: 4603-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 4604:    ColoredPrintf(COLOR_YELLOW,
    %%%%%: 4604-block  0
call    0 never executed
call    1 never executed
        -: 4605:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 4606:                  unit_test.random_seed());
        -: 4607:  }
        -: 4608:
        1: 4609:  ColoredPrintf(COLOR_GREEN,  "[==========] ");
        1: 4609-block  0
call    0 returned 1
        2: 4610:  printf("Running %s from %s.\n",
call    0 returned 1
        1: 4610-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 4611:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4611-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4611-block  1
call    6 returned 1
    $$$$$: 4611-block  2
call    7 never executed
    $$$$$: 4611-block  3
        2: 4612:         FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 4612-block  0
call    3 never executed
        1: 4613:  fflush(stdout);
call    0 returned 1
        1: 4614:}
        -: 4615:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 4616:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 4617:    const UnitTest& /*unit_test*/) {
        1: 4618:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
        1: 4618-block  0
call    0 returned 1
        1: 4619:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 4620:  fflush(stdout);
call    0 returned 1
        1: 4621:}
        -: 4622:
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_8TestCaseE called 2 returned 100% blocks executed 78%
        2: 4623:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 4624:  const std::string counts =
        4: 4625:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        2: 4625-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 4625-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 4625-block  2
call    6 returned 2
    $$$$$: 4625-block  3
call    7 never executed
        2: 4626:  ColoredPrintf(COLOR_GREEN, "[----------] ");
        2: 4626-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 4627:  printf("%s from %s", counts.c_str(), test_case.name());
        2: 4627-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2: 4628:  if (test_case.type_param() == NULL) {
        2: 4628-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 4628-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2: 4629:    printf("\n");
        2: 4629-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 4630:  } else {
    #####: 4631:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 4631-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4631-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4632:  }
        2: 4633:  fflush(stdout);
        2: 4633-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 4634:}
        -: 4635:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 10 returned 100% blocks executed 100%
       10: 4636:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       10: 4637:  ColoredPrintf(COLOR_GREEN,  "[ RUN      ] ");
       10: 4637-block  0
call    0 returned 10
       10: 4638:  PrintTestName(test_info.test_case_name(), test_info.name());
call    0 returned 10
call    1 returned 10
call    2 returned 10
       10: 4639:  printf("\n");
call    0 returned 10
       10: 4640:  fflush(stdout);
call    0 returned 10
       10: 4641:}
        -: 4642:
        -: 4643:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 83%
        1: 4644:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 4645:    const TestPartResult& result) {
        -: 4646:  // If the test part succeeded, we don't need to do anything.
        1: 4647:  if (result.type() == TestPartResult::kSuccess)
        1: 4647-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4648:    return;
    %%%%%: 4648-block  0
        -: 4649:
        -: 4650:  // Print failure message from the assertion (e.g. expected this and got that).
        1: 4651:  PrintTestPartResult(result);
        1: 4651-block  0
call    0 returned 1
        1: 4652:  fflush(stdout);
call    0 returned 1
        -: 4653:}
        -: 4654:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 10 returned 100% blocks executed 85%
       10: 4655:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       10: 4656:  if (test_info.result()->Passed()) {
       10: 4656-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 9 (fallthrough)
branch  3 taken 1
        9: 4657:    ColoredPrintf(COLOR_GREEN, "[       OK ] ");
        9: 4657-block  0
call    0 returned 9
        -: 4658:  } else {
        1: 4659:    ColoredPrintf(COLOR_RED, "[  FAILED  ] ");
        1: 4659-block  0
call    0 returned 1
        -: 4660:  }
       10: 4661:  PrintTestName(test_info.test_case_name(), test_info.name());
       10: 4661-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
       10: 4662:  if (test_info.result()->Failed())
call    0 returned 10
call    1 returned 10
branch  2 taken 1 (fallthrough)
branch  3 taken 9
        1: 4663:    PrintFullTestCommentIfPresent(test_info);
        1: 4663-block  0
call    0 returned 1
        -: 4664:
       10: 4665:  if (GTEST_FLAG(print_time)) {
       10: 4665-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 4666:    printf(" (%s ms)\n", internal::StreamableToString(
       10: 4666-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 4666-block  1
call    4 returned 10
    $$$$$: 4666-block  2
call    5 never executed
    $$$$$: 4666-block  3
       20: 4667:           test_info.result()->elapsed_time()).c_str());
       10: 4667-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
        -: 4668:  } else {
    #####: 4669:    printf("\n");
    %%%%%: 4669-block  0
call    0 never executed
        -: 4670:  }
       10: 4671:  fflush(stdout);
       10: 4671-block  0
call    0 returned 10
       10: 4672:}
        -: 4673:
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_8TestCaseE called 2 returned 100% blocks executed 70%
        2: 4674:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       2*: 4675:  if (!GTEST_FLAG(print_time)) return;
        2: 4675-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 4675-block  1
        -: 4676:
        -: 4677:  const std::string counts =
        4: 4678:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        2: 4678-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 4678-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 4678-block  2
call    6 returned 2
    $$$$$: 4678-block  3
call    7 never executed
        2: 4679:  ColoredPrintf(COLOR_GREEN, "[----------] ");
        2: 4679-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 4680:  printf("%s from %s (%s ms total)\n\n",
        2: 4680-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        -: 4681:         counts.c_str(), test_case.name(),
        4: 4682:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        2: 4682-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 4682-block  1
call    4 returned 2
    $$$$$: 4682-block  2
call    5 never executed
    $$$$$: 4682-block  3
    $$$$$: 4682-block  4
        2: 4683:  fflush(stdout);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 4684:}
        -: 4685:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 4686:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 4687:    const UnitTest& /*unit_test*/) {
        1: 4688:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
        1: 4688-block  0
call    0 returned 1
        1: 4689:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 4690:  fflush(stdout);
call    0 returned 1
        1: 4691:}
        -: 4692:
        -: 4693:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 1 returned 100% blocks executed 97%
        1: 4694:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
        1: 4695:  const int failed_test_count = unit_test.failed_test_count();
        1: 4695-block  0
call    0 returned 1
        1: 4696:  if (failed_test_count == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 4697:    return;
    %%%%%: 4697-block  0
        -: 4698:  }
        -: 4699:
        3: 4700:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
        1: 4700-block  0
        3: 4700-block  1
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2: 4700-block  2
        2: 4701:    const TestCase& test_case = *unit_test.GetTestCase(i);
        2: 4701-block  0
call    0 returned 2
        2: 4702:    if (!test_case.should_run() || (test_case.failed_test_count() == 0)) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2: 4702-block  0
call    3 returned 2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        1: 4702-block  1
        1: 4702-block  2
        2: 4702-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 1
        1: 4703:      continue;
        1: 4703-block  0
        -: 4704:    }
        3: 4705:    for (int j = 0; j < test_case.total_test_count(); ++j) {
        1: 4705-block  0
        3: 4705-block  1
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2: 4705-block  2
        2: 4706:      const TestInfo& test_info = *test_case.GetTestInfo(j);
        2: 4706-block  0
call    0 returned 2
        2: 4707:      if (!test_info.should_run() || test_info.result()->Passed()) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2: 4707-block  0
call    3 returned 2
call    4 returned 2
branch  5 taken 1 (fallthrough)
branch  6 taken 1
        1: 4707-block  1
        1: 4707-block  2
        2: 4707-block  3
branch  7 taken 1 (fallthrough)
branch  8 taken 1
        1: 4708:        continue;
        1: 4708-block  0
        -: 4709:      }
        1: 4710:      ColoredPrintf(COLOR_RED, "[  FAILED  ] ");
        1: 4710-block  0
call    0 returned 1
        1: 4711:      printf("%s.%s", test_case.name(), test_info.name());
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1: 4712:      PrintFullTestCommentIfPresent(test_info);
call    0 returned 1
        1: 4713:      printf("\n");
call    0 returned 1
        -: 4714:    }
        -: 4715:  }
        -: 4716:}
        -: 4717:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 65%
        1: 4718:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4719:                                                     int /*iteration*/) {
        1: 4720:  ColoredPrintf(COLOR_GREEN,  "[==========] ");
        1: 4720-block  0
call    0 returned 1
        2: 4721:  printf("%s from %s ran.",
call    0 returned 1
        1: 4721-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 4722:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4722-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4722-block  1
call    6 returned 1
    $$$$$: 4722-block  2
call    7 never executed
    $$$$$: 4722-block  3
        2: 4723:         FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 4723-block  0
call    3 never executed
    $$$$$: 4723-block  1
call    4 never executed
        1: 4724:  if (GTEST_FLAG(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4725:    printf(" (%s ms total)",
        1: 4725-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 4726:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 4726-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 4726-block  1
call    4 returned 1
    $$$$$: 4726-block  2
call    5 never executed
    $$$$$: 4726-block  3
    $$$$$: 4726-block  4
call    6 never executed
        -: 4727:  }
        1: 4728:  printf("\n");
        1: 4728-block  0
call    0 returned 1
        1: 4729:  ColoredPrintf(COLOR_GREEN,  "[  PASSED  ] ");
call    0 returned 1
        1: 4730:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4730-block  0
call    6 returned 1
    $$$$$: 4730-block  1
call    7 never executed
    $$$$$: 4730-block  2
call    8 never executed
        -: 4731:
        1: 4732:  int num_failures = unit_test.failed_test_count();
call    0 returned 1
        1: 4733:  if (!unit_test.Passed()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 4734:    const int failed_test_count = unit_test.failed_test_count();
        1: 4734-block  0
call    0 returned 1
        1: 4735:    ColoredPrintf(COLOR_RED,  "[  FAILED  ] ");
call    0 returned 1
        1: 4736:    printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 4736-block  0
call    5 returned 1
    $$$$$: 4736-block  1
call    6 never executed
        1: 4737:    PrintFailedTests(unit_test);
call    0 returned 1
       1*: 4738:    printf("\n%2d FAILED %s\n", num_failures,
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4738-block  0
    %%%%%: 4738-block  1
        1: 4738-block  2
call    2 returned 1
        -: 4739:                        num_failures == 1 ? "TEST" : "TESTS");
        -: 4740:  }
        -: 4741:
        1: 4742:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 4742-block  0
call    0 returned 1
       1*: 4743:  if (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 4743-block  0
branch  2 never executed
branch  3 never executed
    #####: 4744:    if (!num_failures) {
    %%%%%: 4744-block  0
branch  0 never executed
branch  1 never executed
    #####: 4745:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 4745-block  0
call    0 never executed
        -: 4746:    }
    #####: 4747:    ColoredPrintf(COLOR_YELLOW,
    %%%%%: 4747-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4747-block  1
    %%%%%: 4747-block  2
    %%%%%: 4747-block  3
call    2 never executed
        -: 4748:                  "  YOU HAVE %d DISABLED %s\n\n",
        -: 4749:                  num_disabled,
        -: 4750:                  num_disabled == 1 ? "TEST" : "TESTS");
        -: 4751:  }
        -: 4752:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 4753:  fflush(stdout);
        1: 4753-block  0
call    0 returned 1
        1: 4754:}
        -: 4755:
        -: 4756:// End PrettyUnitTestResultPrinter
        -: 4757:
        -: 4758:// class TestEventRepeater
        -: 4759://
        -: 4760:// This class forwards events to other event listeners.
        -: 4761:class TestEventRepeater : public TestEventListener {
        -: 4762: public:
function _ZN7testing8internal17TestEventRepeaterC2Ev called 1 returned 100% blocks executed 100%
        1: 4763:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 4763-block  0
call    0 returned 1
call    1 returned 1
        -: 4764:  virtual ~TestEventRepeater();
        -: 4765:  void Append(TestEventListener *listener);
        -: 4766:  TestEventListener* Release(TestEventListener* listener);
        -: 4767:
        -: 4768:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 4769:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 4770:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 4770-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 4771:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 4772:
        -: 4773:  virtual void OnTestProgramStart(const UnitTest& unit_test);
        -: 4774:  virtual void OnTestIterationStart(const UnitTest& unit_test, int iteration);
        -: 4775:  virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test);
        -: 4776:  virtual void OnEnvironmentsSetUpEnd(const UnitTest& unit_test);
        -: 4777:  virtual void OnTestCaseStart(const TestCase& test_case);
        -: 4778:  virtual void OnTestStart(const TestInfo& test_info);
        -: 4779:  virtual void OnTestPartResult(const TestPartResult& result);
        -: 4780:  virtual void OnTestEnd(const TestInfo& test_info);
        -: 4781:  virtual void OnTestCaseEnd(const TestCase& test_case);
        -: 4782:  virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test);
        -: 4783:  virtual void OnEnvironmentsTearDownEnd(const UnitTest& unit_test);
        -: 4784:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 4785:  virtual void OnTestProgramEnd(const UnitTest& unit_test);
        -: 4786:
        -: 4787: private:
        -: 4788:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 4789:  // in death test child processes.
        -: 4790:  bool forwarding_enabled_;
        -: 4791:  // The list of listeners that receive events.
        -: 4792:  std::vector<TestEventListener*> listeners_;
        -: 4793:
        -: 4794:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 4795:};
        -: 4796:
        2: 4797:TestEventRepeater::~TestEventRepeater() {
        1: 4798:  ForEach(listeners_, Delete<TestEventListener>);
        2: 4799:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 1 returned 100% blocks executed 100%
        1: 4797:TestEventRepeater::~TestEventRepeater() {
        -: 4798:  ForEach(listeners_, Delete<TestEventListener>);
        1: 4799:}
        1: 4799-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 1 returned 100% blocks executed 100%
        1: 4797:TestEventRepeater::~TestEventRepeater() {
call    0 returned 1
call    1 returned 1
        1: 4798:  ForEach(listeners_, Delete<TestEventListener>);
        1: 4798-block  0
call    0 returned 1
        1: 4799:}
------------------
        -: 4800:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 4801:void TestEventRepeater::Append(TestEventListener *listener) {
        1: 4802:  listeners_.push_back(listener);
        1: 4802-block  0
call    0 returned 1
        1: 4803:}
        -: 4804:
        -: 4805:// FIXME: Factor the search functionality into Vector::Find.
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 4806:TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {
       1*: 4807:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 4807-block  0
        1: 4807-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 4807-block  2
    #####: 4808:    if (listeners_[i] == listener) {
    %%%%%: 4808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4809:      listeners_.erase(listeners_.begin() + i);
    %%%%%: 4809-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4809-block  1
    $$$$$: 4809-block  2
    #####: 4810:      return listener;
    %%%%%: 4810-block  0
        -: 4811:    }
        -: 4812:  }
        -: 4813:
        1: 4814:  return NULL;
        1: 4814-block  0
        -: 4815:}
        -: 4816:
        -: 4817:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 4818:// This defines a member that forwards the call to all listeners.
        -: 4819:#define GTEST_REPEATER_METHOD_(Name, Type) \
        -: 4820:void TestEventRepeater::Name(const Type& parameter) { \
        -: 4821:  if (forwarding_enabled_) { \
        -: 4822:    for (size_t i = 0; i < listeners_.size(); i++) { \
        -: 4823:      listeners_[i]->Name(parameter); \
        -: 4824:    } \
        -: 4825:  } \
        -: 4826:}
        -: 4827:// This defines a member that forwards the call to all listeners in reverse
        -: 4828:// order.
        -: 4829:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type) \
        -: 4830:void TestEventRepeater::Name(const Type& parameter) { \
        -: 4831:  if (forwarding_enabled_) { \
        -: 4832:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) { \
        -: 4833:      listeners_[i]->Name(parameter); \
        -: 4834:    } \
        -: 4835:  } \
        -: 4836:}
        -: 4837:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 4838:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 4838-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4838-block  1
        2: 4838-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 4838-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 4839:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 4839-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4839-block  1
        2: 4839-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 4839-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_8TestCaseE called 2 returned 100% blocks executed 100%
        4: 4840:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestCase)
        2: 4840-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 4840-block  1
        4: 4840-block  2
call    2 returned 4
branch  3 taken 2 (fallthrough)
branch  4 taken 2
        2: 4840-block  3
call    5 returned 2
call    6 returned 2
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 10 returned 100% blocks executed 100%
       20: 4841:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       10: 4841-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 4841-block  1
       20: 4841-block  2
call    2 returned 20
branch  3 taken 10 (fallthrough)
branch  4 taken 10
       10: 4841-block  3
call    5 returned 10
call    6 returned 10
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 1 returned 100% blocks executed 100%
        2: 4842:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
        1: 4842-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4842-block  1
        2: 4842-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 4842-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 4843:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 4843-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4843-block  1
        2: 4843-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 4843-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 4844:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 4844-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4844-block  1
call    2 returned 1
        2: 4844-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 4844-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 4845:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 4845-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4845-block  1
call    2 returned 1
        2: 4845-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 4845-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 10 returned 100% blocks executed 100%
       20: 4846:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       10: 4846-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 4846-block  1
call    2 returned 10
       20: 4846-block  2
branch  3 taken 10 (fallthrough)
branch  4 taken 10
       10: 4846-block  3
call    5 returned 10
call    6 returned 10
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_8TestCaseE called 2 returned 100% blocks executed 100%
        4: 4847:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestCase)
        2: 4847-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 4847-block  1
call    2 returned 2
        4: 4847-block  2
branch  3 taken 2 (fallthrough)
branch  4 taken 2
        2: 4847-block  3
call    5 returned 2
call    6 returned 2
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 4848:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 4848-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4848-block  1
call    2 returned 1
        2: 4848-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 4848-block  3
call    5 returned 1
call    6 returned 1
        -: 4849:
        -: 4850:#undef GTEST_REPEATER_METHOD_
        -: 4851:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 4852:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 4853:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 4854:                                             int iteration) {
        1: 4855:  if (forwarding_enabled_) {
        1: 4855-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 4856:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 4856-block  0
        2: 4856-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 4857:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 4857-block  0
call    0 returned 1
call    1 returned 1
        -: 4858:    }
        -: 4859:  }
        1: 4860:}
        -: 4861:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 4862:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4863:                                           int iteration) {
        1: 4864:  if (forwarding_enabled_) {
        1: 4864-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 4865:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) {
        1: 4865-block  0
call    0 returned 1
        2: 4865-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 4866:      listeners_[i]->OnTestIterationEnd(unit_test, iteration);
        1: 4866-block  0
call    0 returned 1
call    1 returned 1
        -: 4867:    }
        -: 4868:  }
        1: 4869:}
        -: 4870:
        -: 4871:// End TestEventRepeater
        -: 4872:
        -: 4873:// This class generates an XML output file.
        -: 4874:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4875: public:
        -: 4876:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 4877:
        -: 4878:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 4879:  void ListTestsMatchingFilter(const std::vector<TestCase*>& test_cases);
        -: 4880:
        -: 4881:  // Prints an XML summary of all unit tests.
        -: 4882:  static void PrintXmlTestsList(std::ostream* stream,
        -: 4883:                                const std::vector<TestCase*>& test_cases);
        -: 4884:
        -: 4885: private:
        -: 4886:  // Is c a whitespace character that is normalized to a space character
        -: 4887:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEc called 0 returned 0% blocks executed 0%
    #####: 4888:  static bool IsNormalizableWhitespace(char c) {
    #####: 4889:    return c == 0x9 || c == 0xA || c == 0xD;
    %%%%%: 4889-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4889-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4889-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 4889-block  3
    %%%%%: 4889-block  4
    %%%%%: 4889-block  5
        -: 4890:  }
        -: 4891:
        -: 4892:  // May c appear in a well-formed XML document?
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEc called 0 returned 0% blocks executed 0%
    #####: 4893:  static bool IsValidXmlCharacter(char c) {
    #####: 4894:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 4894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4894-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4894-block  2
    %%%%%: 4894-block  3
    %%%%%: 4894-block  4
        -: 4895:  }
        -: 4896:
        -: 4897:  // Returns an XML-escaped copy of the input string str.  If
        -: 4898:  // is_attribute is true, the text is meant to appear as an attribute
        -: 4899:  // value, and normalizable whitespace is preserved by replacing it
        -: 4900:  // with character references.
        -: 4901:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 4902:
        -: 4903:  // Returns the given string with all characters invalid in XML removed.
        -: 4904:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 4905:
        -: 4906:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4907:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 4908:    return EscapeXml(str, true);
    %%%%%: 4908-block  0
call    0 never executed
        -: 4909:  }
        -: 4910:
        -: 4911:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 4912:  static std::string EscapeXmlText(const char* str) {
        -: 4913:    return EscapeXml(str, false);
        -: 4914:  }
        -: 4915:
        -: 4916:  // Verifies that the given attribute belongs to the given element and
        -: 4917:  // streams the attribute as XML.
        -: 4918:  static void OutputXmlAttribute(std::ostream* stream,
        -: 4919:                                 const std::string& element_name,
        -: 4920:                                 const std::string& name,
        -: 4921:                                 const std::string& value);
        -: 4922:
        -: 4923:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 4924:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 4925:
        -: 4926:  // Streams an XML representation of a TestInfo object.
        -: 4927:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 4928:                                const char* test_case_name,
        -: 4929:                                const TestInfo& test_info);
        -: 4930:
        -: 4931:  // Prints an XML representation of a TestCase object
        -: 4932:  static void PrintXmlTestCase(::std::ostream* stream,
        -: 4933:                               const TestCase& test_case);
        -: 4934:
        -: 4935:  // Prints an XML summary of unit_test to output stream out.
        -: 4936:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 4937:                               const UnitTest& unit_test);
        -: 4938:
        -: 4939:  // Produces a string representing the test properties in a result as space
        -: 4940:  // delimited XML attributes based on the property key="value" pairs.
        -: 4941:  // When the std::string is not empty, it includes a space at the beginning,
        -: 4942:  // to delimit this attribute from prior attributes.
        -: 4943:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 4944:
        -: 4945:  // Streams an XML representation of the test properties of a TestResult
        -: 4946:  // object.
        -: 4947:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 4948:                                      const TestResult& result);
        -: 4949:
        -: 4950:  // The output file.
        -: 4951:  const std::string output_file_;
        -: 4952:
        -: 4953:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 4954:};
        -: 4955:
        -: 4956:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4957:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4958:    : output_file_(output_file) {
    %%%%%: 4958-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4958-block  1
call    5 never executed
    $$$$$: 4958-block  2
call    6 never executed
    $$$$$: 4958-block  3
    $$$$$: 4958-block  4
call    7 never executed
    $$$$$: 4958-block  5
call    8 never executed
    #####: 4959:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4960:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4960-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4960-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4960-block  2
call    7 never executed
    $$$$$: 4960-block  3
call    8 never executed
    $$$$$: 4960-block  4
        -: 4961:  }
    #####: 4962:}
    %%%%%: 4962-block  0
        -: 4963:
        -: 4964:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4965:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4966:                                                  int /*iteration*/) {
    #####: 4967:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4967-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4968:  std::stringstream stream;
    %%%%%: 4968-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4968-block  1
call    4 never executed
    $$$$$: 4968-block  2
call    5 never executed
    #####: 4969:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4969-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4970:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4970-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4970-block  2
call    7 never executed
    $$$$$: 4970-block  3
call    8 never executed
    $$$$$: 4970-block  4
    #####: 4971:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4972:}
        -: 4973:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_8TestCaseESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4974:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4975:    const std::vector<TestCase*>& test_cases) {
    #####: 4976:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4977:  std::stringstream stream;
    %%%%%: 4977-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4977-block  1
call    4 never executed
    $$$$$: 4977-block  2
call    5 never executed
    #####: 4978:  PrintXmlTestsList(&stream, test_cases);
    %%%%%: 4978-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4979:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4979-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4979-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4979-block  2
call    7 never executed
    $$$$$: 4979-block  3
call    8 never executed
    $$$$$: 4979-block  4
    #####: 4980:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4981:}
        -: 4982:
        -: 4983:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4984:// is true, the text is meant to appear as an attribute value, and
        -: 4985:// normalizable whitespace is preserved by replacing it with character
        -: 4986:// references.
        -: 4987://
        -: 4988:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4989:// It is expected that most, if not all, of the text processed by this
        -: 4990:// module will consist of ordinary English text.
        -: 4991:// If this module is ever modified to produce version 1.1 XML output,
        -: 4992:// most invalid characters can be retained using character references.
        -: 4993:// FIXME: It might be nice to have a minimally invasive, human-readable
        -: 4994:// escaping scheme for invalid characters, rather than dropping them.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4995:std::string XmlUnitTestResultPrinter::EscapeXml(
        -: 4996:    const std::string& str, bool is_attribute) {
    #####: 4997:  Message m;
    %%%%%: 4997-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4997-block  1
call    3 never executed
    $$$$$: 4997-block  2
call    4 never executed
        -: 4998:
    #####: 4999:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4999-block  0
    %%%%%: 4999-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4999-block  2
    #####: 5000:    const char ch = str[i];
    %%%%%: 5000-block  0
call    0 never executed
    #####: 5001:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5002:      case '<':
    #####: 5003:        m << "&lt;";
    %%%%%: 5003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5004:        break;
    %%%%%: 5004-block  0
    #####: 5005:      case '>':
    #####: 5006:        m << "&gt;";
    %%%%%: 5006-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5007:        break;
    %%%%%: 5007-block  0
    #####: 5008:      case '&':
    #####: 5009:        m << "&amp;";
    %%%%%: 5009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5010:        break;
    %%%%%: 5010-block  0
    #####: 5011:      case '\'':
    #####: 5012:        if (is_attribute)
    %%%%%: 5012-block  0
branch  0 never executed
branch  1 never executed
    #####: 5013:          m << "&apos;";
    %%%%%: 5013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5014:        else
    #####: 5015:          m << '\'';
    %%%%%: 5015-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5015-block  1
    $$$$$: 5015-block  2
    #####: 5016:        break;
    %%%%%: 5016-block  0
    #####: 5017:      case '"':
    #####: 5018:        if (is_attribute)
    %%%%%: 5018-block  0
branch  0 never executed
branch  1 never executed
    #####: 5019:          m << "&quot;";
    %%%%%: 5019-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5020:        else
    #####: 5021:          m << '"';
    %%%%%: 5021-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5021-block  1
    $$$$$: 5021-block  2
    #####: 5022:        break;
    %%%%%: 5022-block  0
    #####: 5023:      default:
    #####: 5024:        if (IsValidXmlCharacter(ch)) {
    %%%%%: 5024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5025:          if (is_attribute && IsNormalizableWhitespace(ch))
    %%%%%: 5025-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5025-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5025-block  2
    %%%%%: 5025-block  3
    %%%%%: 5025-block  4
branch  5 never executed
branch  6 never executed
    #####: 5026:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 5026-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5026-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5026-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5026-block  3
call    9 never executed
    $$$$$: 5026-block  4
call   10 never executed
    $$$$$: 5026-block  5
    #####: 5027:              << ";";
    %%%%%: 5027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5028:          else
    #####: 5029:            m << ch;
    %%%%%: 5029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5030:        }
    #####: 5031:        break;
    %%%%%: 5031-block  0
        -: 5032:    }
        -: 5033:  }
        -: 5034:
    #####: 5035:  return m.GetString();
    %%%%%: 5035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5035-block  1
    %%%%%: 5035-block  2
        -: 5036:}
        -: 5037:
        -: 5038:// Returns the given string with all characters invalid in XML removed.
        -: 5039:// Currently invalid characters are dropped from the string. An
        -: 5040:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5041:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 5042:    const std::string& str) {
    #####: 5043:  std::string output;
    %%%%%: 5043-block  0
call    0 never executed
    #####: 5044:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5045:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 5045-block  0
call    0 never executed
    %%%%%: 5045-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5045-block  2
call    5 never executed
    #####: 5046:    if (IsValidXmlCharacter(*it))
    %%%%%: 5046-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5047:      output.push_back(*it);
    %%%%%: 5047-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5048:
    #####: 5049:  return output;
    %%%%%: 5049-block  0
    %%%%%: 5049-block  1
        -: 5050:}
        -: 5051:
        -: 5052:// The following routines generate an XML representation of a UnitTest
        -: 5053:// object.
        -: 5054:// GOOGLETEST_CM0009 DO NOT DELETE
        -: 5055://
        -: 5056:// This is how Google Test concepts map to the DTD:
        -: 5057://
        -: 5058:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 5059://   <testsuite name="testcase-name">  <-- corresponds to a TestCase object
        -: 5060://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 5061://       <failure message="...">...</failure>
        -: 5062://       <failure message="...">...</failure>
        -: 5063://       <failure message="...">...</failure>
        -: 5064://                                     <-- individual assertion failures
        -: 5065://     </testcase>
        -: 5066://   </testsuite>
        -: 5067:// </testsuites>
        -: 5068:
        -: 5069:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 5070:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 5071:  ::std::stringstream ss;
    %%%%%: 5071-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5071-block  1
call    4 never executed
    $$$$$: 5071-block  2
call    5 never executed
    #####: 5072:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 5072-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5073:  return ss.str();
    %%%%%: 5073-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5073-block  1
    %%%%%: 5073-block  2
        -: 5074:}
        -: 5075:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 5076:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 5077:#if defined(_MSC_VER)
        -: 5078:  return localtime_s(out, &seconds) == 0;
        -: 5079:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 5080:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 5081:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 5082:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 5083:  if (tm_ptr == NULL)
        -: 5084:    return false;
        -: 5085:  *out = *tm_ptr;
        -: 5086:  return true;
        -: 5087:#else
    #####: 5088:  return localtime_r(&seconds, out) != NULL;
    %%%%%: 5088-block  0
call    0 never executed
        -: 5089:#endif
        -: 5090:}
        -: 5091:
        -: 5092:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 5093:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 5094:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 5095:  struct tm time_struct;
    #####: 5096:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 5096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5097:    return "";
    %%%%%: 5097-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5097-block  1
call    4 never executed
    $$$$$: 5097-block  2
call    5 never executed
    $$$$$: 5097-block  3
        -: 5098:  // YYYY-MM-DDThh:mm:ss
    #####: 5099:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 5099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5099-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5099-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 5099-block  3
call   11 never executed
    $$$$$: 5099-block  4
    $$$$$: 5099-block  5
call   12 never executed
    $$$$$: 5099-block  6
    $$$$$: 5099-block  7
call   13 never executed
    $$$$$: 5099-block  8
    $$$$$: 5099-block  9
    #####: 5100:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 5100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5100-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5100-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 5100-block  3
call   12 never executed
    $$$$$: 5100-block  4
    $$$$$: 5100-block  5
call   13 never executed
    $$$$$: 5100-block  6
    $$$$$: 5100-block  7
call   14 never executed
    $$$$$: 5100-block  8
    #####: 5101:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 5101-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5101-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5101-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 5101-block  3
call   12 never executed
    $$$$$: 5101-block  4
    $$$$$: 5101-block  5
call   13 never executed
    $$$$$: 5101-block  6
    $$$$$: 5101-block  7
call   14 never executed
    $$$$$: 5101-block  8
    #####: 5102:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 5102-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5102-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5102-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 5102-block  3
call   12 never executed
    $$$$$: 5102-block  4
    $$$$$: 5102-block  5
call   13 never executed
    $$$$$: 5102-block  6
    $$$$$: 5102-block  7
call   14 never executed
    $$$$$: 5102-block  8
    #####: 5103:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 5103-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5103-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5103-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 5103-block  3
call    9 never executed
    $$$$$: 5103-block  4
    $$$$$: 5103-block  5
call   10 never executed
    $$$$$: 5103-block  6
    #####: 5104:      String::FormatIntWidth2(time_struct.tm_sec);
    %%%%%: 5104-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5104-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5104-block  2
call    6 never executed
    $$$$$: 5104-block  3
call    7 never executed
    $$$$$: 5104-block  4
        -: 5105:}
        -: 5106:
        -: 5107:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 5108:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 5109:                                                     const char* data) {
    #####: 5110:  const char* segment = data;
    #####: 5111:  *stream << "<![CDATA[";
    %%%%%: 5111-block  0
call    0 never executed
        -: 5112:  for (;;) {
    #####: 5113:    const char* const next_segment = strstr(segment, "]]>");
    #####: 5114:    if (next_segment != NULL) {
    %%%%%: 5114-block  0
branch  0 never executed
branch  1 never executed
        -: 5115:      stream->write(
    #####: 5116:          segment, static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 5116-block  0
call    0 never executed
    #####: 5117:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 5118:      segment = next_segment + strlen("]]>");
        -: 5119:    } else {
    #####: 5120:      *stream << segment;
    %%%%%: 5120-block  0
call    0 never executed
    #####: 5121:      break;
        -: 5122:    }
    #####: 5123:  }
    %%%%%: 5123-block  0
    #####: 5124:  *stream << "]]>";
    %%%%%: 5124-block  0
call    0 never executed
    #####: 5125:}
        -: 5126:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 5127:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 5128:    std::ostream* stream,
        -: 5129:    const std::string& element_name,
        -: 5130:    const std::string& name,
        -: 5131:    const std::string& value) {
        -: 5132:  const std::vector<std::string>& allowed_names =
    #####: 5133:      GetReservedAttributesForElement(element_name);
    %%%%%: 5133-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5133-block  1
call    3 never executed
        -: 5134:
    #####: 5135:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 5135-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5135-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5135-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5135-block  3
call   13 never executed
    %%%%%: 5135-block  4
call   14 never executed
    $$$$$: 5135-block  5
    $$$$$: 5135-block  6
call   15 never executed
    $$$$$: 5135-block  7
        -: 5136:                   allowed_names.end())
        -: 5137:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 5138:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5138-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5138-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5138-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5138-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5138-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 5139:
    #####: 5140:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 5140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5140-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5140-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5140-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5140-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5140-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 5140-block  6
call   18 never executed
call   19 never executed
    $$$$$: 5140-block  7
call   20 never executed
    $$$$$: 5140-block  8
    #####: 5141:}
        -: 5142:
        -: 5143:// Prints an XML representation of a TestInfo object.
        -: 5144:// FIXME: There is also value in printing properties with the plain printer.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 5145:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 5146:                                                 const char* test_case_name,
        -: 5147:                                                 const TestInfo& test_info) {
    #####: 5148:  const TestResult& result = *test_info.result();
    %%%%%: 5148-block  0
call    0 never executed
    #####: 5149:  const std::string kTestcase = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5149-block  0
    $$$$$: 5149-block  1
call    4 never executed
        -: 5150:
    #####: 5151:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5152:    return;
    %%%%%: 5152-block  0
        -: 5153:  }
        -: 5154:
    #####: 5155:  *stream << "    <testcase";
    %%%%%: 5155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5156:  OutputXmlAttribute(stream, kTestcase, "name", test_info.name());
    %%%%%: 5156-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5156-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5156-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5156-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 5156-block  4
call   16 never executed
    $$$$$: 5156-block  5
    $$$$$: 5156-block  6
call   17 never executed
    $$$$$: 5156-block  7
    $$$$$: 5156-block  8
call   18 never executed
    $$$$$: 5156-block  9
    $$$$$: 5156-block 10
call   19 never executed
    $$$$$: 5156-block 11
        -: 5157:
    #####: 5158:  if (test_info.value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5158-block  0
branch  3 never executed
branch  4 never executed
    #####: 5159:    OutputXmlAttribute(stream, kTestcase, "value_param",
    %%%%%: 5159-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5159-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5159-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5159-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5159-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 5159-block  5
call   18 never executed
    $$$$$: 5159-block  6
    $$$$$: 5159-block  7
call   19 never executed
    $$$$$: 5159-block  8
    $$$$$: 5159-block  9
call   20 never executed
    $$$$$: 5159-block 10
    $$$$$: 5159-block 11
call   21 never executed
    $$$$$: 5159-block 12
        -: 5160:                       test_info.value_param());
        -: 5161:  }
    #####: 5162:  if (test_info.type_param() != NULL) {
    %%%%%: 5162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5162-block  1
branch  3 never executed
branch  4 never executed
    #####: 5163:    OutputXmlAttribute(stream, kTestcase, "type_param", test_info.type_param());
    %%%%%: 5163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5163-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5163-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5163-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5163-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 5163-block  5
call   18 never executed
    $$$$$: 5163-block  6
    $$$$$: 5163-block  7
call   19 never executed
    $$$$$: 5163-block  8
    $$$$$: 5163-block  9
call   20 never executed
    $$$$$: 5163-block 10
    $$$$$: 5163-block 11
call   21 never executed
    $$$$$: 5163-block 12
        -: 5164:  }
    #####: 5165:  if (GTEST_FLAG(list_tests)) {
    %%%%%: 5165-block  0
branch  0 never executed
branch  1 never executed
    #####: 5166:    OutputXmlAttribute(stream, kTestcase, "file", test_info.file());
    %%%%%: 5166-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5166-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5166-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5166-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 5166-block  4
call   16 never executed
    $$$$$: 5166-block  5
    $$$$$: 5166-block  6
call   17 never executed
    $$$$$: 5166-block  7
    $$$$$: 5166-block  8
call   18 never executed
    $$$$$: 5166-block  9
    $$$$$: 5166-block 10
call   19 never executed
    $$$$$: 5166-block 11
    #####: 5167:    OutputXmlAttribute(stream, kTestcase, "line",
    %%%%%: 5167-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5167-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5167-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5167-block  3
call    9 never executed
    $$$$$: 5167-block  4
    $$$$$: 5167-block  5
call   10 never executed
    $$$$$: 5167-block  6
    #####: 5168:                       StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5168-block  0
call    5 never executed
    $$$$$: 5168-block  1
    $$$$$: 5168-block  2
    #####: 5169:    *stream << " />\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5170:    return;
    %%%%%: 5170-block  0
        -: 5171:  }
        -: 5172:
    #####: 5173:  OutputXmlAttribute(stream, kTestcase, "status",
    %%%%%: 5173-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5173-block  1
    %%%%%: 5173-block  2
    %%%%%: 5173-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5173-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5173-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5173-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 5173-block  7
call   17 never executed
    $$$$$: 5173-block  8
    $$$$$: 5173-block  9
call   18 never executed
    $$$$$: 5173-block 10
    $$$$$: 5173-block 11
call   19 never executed
    $$$$$: 5173-block 12
    $$$$$: 5173-block 13
call   20 never executed
    $$$$$: 5173-block 14
    #####: 5174:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 5175:  OutputXmlAttribute(stream, kTestcase, "time",
    %%%%%: 5175-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5175-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5175-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5175-block  3
call    9 never executed
    $$$$$: 5175-block  4
    $$$$$: 5175-block  5
call   10 never executed
    $$$$$: 5175-block  6
    #####: 5176:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5176-block  0
call    5 never executed
    $$$$$: 5176-block  1
    #####: 5177:  OutputXmlAttribute(stream, kTestcase, "classname", test_case_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5177-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5177-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5177-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5177-block  3
call   15 never executed
    $$$$$: 5177-block  4
    $$$$$: 5177-block  5
call   16 never executed
    $$$$$: 5177-block  6
    $$$$$: 5177-block  7
call   17 never executed
    $$$$$: 5177-block  8
    $$$$$: 5177-block  9
call   18 never executed
    $$$$$: 5177-block 10
        -: 5178:
    #####: 5179:  int failures = 0;
    #####: 5180:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 5180-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5180-block  1
    #####: 5181:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 5181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5182:    if (part.failed()) {
    %%%%%: 5182-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5183:      if (++failures == 1) {
    %%%%%: 5183-block  0
branch  0 never executed
branch  1 never executed
    #####: 5184:        *stream << ">\n";
    %%%%%: 5184-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5185:      }
        -: 5186:      const std::string location =
        -: 5187:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 5188:                                                          part.line_number());
    %%%%%: 5188-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 5188-block  1
call    6 never executed
    #####: 5189:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 5189-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5189-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 5189-block  2
    $$$$$: 5189-block  3
call    8 never executed
        -: 5190:      *stream << "      <failure message=\""
    #####: 5191:              << EscapeXmlAttribute(summary.c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5191-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5191-block  1
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 5191-block  2
call   10 never executed
    $$$$$: 5191-block  3
    $$$$$: 5191-block  4
call   11 never executed
    $$$$$: 5191-block  5
    $$$$$: 5191-block  6
call   12 never executed
    $$$$$: 5191-block  7
    #####: 5192:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5192-block  0
call    3 never executed
    %%%%%: 5192-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5192-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5193:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5193-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5193-block  1
call    7 never executed
    $$$$$: 5193-block  2
    $$$$$: 5193-block  3
call    8 never executed
    #####: 5194:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5194-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5194-block  1
call    7 never executed
    $$$$$: 5194-block  2
call    8 never executed
    $$$$$: 5194-block  3
    #####: 5195:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5196:    }
        -: 5197:  }
        -: 5198:
    #####: 5199:  if (failures == 0 && result.test_property_count() == 0) {
    %%%%%: 5199-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5199-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5199-block  2
    %%%%%: 5199-block  3
    %%%%%: 5199-block  4
branch  5 never executed
branch  6 never executed
    #####: 5200:    *stream << " />\n";
    %%%%%: 5200-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5201:  } else {
    #####: 5202:    if (failures == 0) {
    %%%%%: 5202-block  0
branch  0 never executed
branch  1 never executed
    #####: 5203:      *stream << ">\n";
    %%%%%: 5203-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5204:    }
    #####: 5205:    OutputXmlTestProperties(stream, result);
    %%%%%: 5205-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5206:    *stream << "    </testcase>\n";
    %%%%%: 5206-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5207:  }
        -: 5208:}
        -: 5209:
        -: 5210:// Prints an XML representation of a TestCase object
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlTestCaseEPSoRKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 5211:void XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream* stream,
        -: 5212:                                                const TestCase& test_case) {
    #####: 5213:  const std::string kTestsuite = "testsuite";
    %%%%%: 5213-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5213-block  1
call    4 never executed
    $$$$$: 5213-block  2
    $$$$$: 5213-block  3
call    5 never executed
    #####: 5214:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5214-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5215:  OutputXmlAttribute(stream, kTestsuite, "name", test_case.name());
    %%%%%: 5215-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5215-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5215-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5215-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 5215-block  4
call   16 never executed
    $$$$$: 5215-block  5
    $$$$$: 5215-block  6
call   17 never executed
    $$$$$: 5215-block  7
    $$$$$: 5215-block  8
call   18 never executed
    $$$$$: 5215-block  9
    $$$$$: 5215-block 10
call   19 never executed
    $$$$$: 5215-block 11
    #####: 5216:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 5216-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5216-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5216-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5216-block  3
call    9 never executed
    $$$$$: 5216-block  4
    $$$$$: 5216-block  5
call   10 never executed
    $$$$$: 5216-block  6
    #####: 5217:                     StreamableToString(test_case.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5217-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5217-block  1
call    7 never executed
    $$$$$: 5217-block  2
    $$$$$: 5217-block  3
    #####: 5218:  if (!GTEST_FLAG(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 5219:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 5219-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5219-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5219-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5219-block  3
call    9 never executed
    $$$$$: 5219-block  4
    $$$$$: 5219-block  5
call   10 never executed
    $$$$$: 5219-block  6
    #####: 5220:                       StreamableToString(test_case.failed_test_count()));
    %%%%%: 5220-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5220-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5220-block  2
call    7 never executed
    $$$$$: 5220-block  3
    $$$$$: 5220-block  4
    #####: 5221:    OutputXmlAttribute(
    %%%%%: 5221-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5221-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5221-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5221-block  3
call    9 never executed
    $$$$$: 5221-block  4
    $$$$$: 5221-block  5
call   10 never executed
    $$$$$: 5221-block  6
        -: 5222:        stream, kTestsuite, "disabled",
    #####: 5223:        StreamableToString(test_case.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5223-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5223-block  1
call    7 never executed
    $$$$$: 5223-block  2
    $$$$$: 5223-block  3
    #####: 5224:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5224-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5224-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5224-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5224-block  3
call   15 never executed
    $$$$$: 5224-block  4
    $$$$$: 5224-block  5
call   16 never executed
    $$$$$: 5224-block  6
    $$$$$: 5224-block  7
call   17 never executed
    $$$$$: 5224-block  8
    $$$$$: 5224-block  9
call   18 never executed
    $$$$$: 5224-block 10
    #####: 5225:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 5225-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5225-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5225-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5225-block  3
call    9 never executed
    $$$$$: 5225-block  4
    $$$$$: 5225-block  5
call   10 never executed
    $$$$$: 5225-block  6
    #####: 5226:                       FormatTimeInMillisAsSeconds(test_case.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5226-block  0
call    5 never executed
    $$$$$: 5226-block  1
    #####: 5227:    *stream << TestPropertiesAsXmlAttributes(test_case.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5227-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5227-block  1
call    7 never executed
    $$$$$: 5227-block  2
call    8 never executed
    $$$$$: 5227-block  3
        -: 5228:  }
    #####: 5229:  *stream << ">\n";
    %%%%%: 5229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5230:  for (int i = 0; i < test_case.total_test_count(); ++i) {
    %%%%%: 5230-block  0
    %%%%%: 5230-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5230-block  2
    #####: 5231:    if (test_case.GetTestInfo(i)->is_reportable())
    %%%%%: 5231-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5231-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5232:      OutputXmlTestInfo(stream, test_case.name(), *test_case.GetTestInfo(i));
    %%%%%: 5232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5232-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 5233:  }
    #####: 5234:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 5234-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5234-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5234-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5235:}
        -: 5236:
        -: 5237:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 5238:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 5239:                                                const UnitTest& unit_test) {
    #####: 5240:  const std::string kTestsuites = "testsuites";
    %%%%%: 5240-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5240-block  1
call    4 never executed
    $$$$$: 5240-block  2
    $$$$$: 5240-block  3
call    5 never executed
        -: 5241:
    #####: 5242:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5243:  *stream << "<" << kTestsuites;
    %%%%%: 5243-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5243-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5244:
    #####: 5245:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 5245-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5245-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5245-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5245-block  3
call    9 never executed
    $$$$$: 5245-block  4
    $$$$$: 5245-block  5
call   10 never executed
    $$$$$: 5245-block  6
    #####: 5246:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 5246-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5246-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5246-block  2
call    7 never executed
    $$$$$: 5246-block  3
    $$$$$: 5246-block  4
    #####: 5247:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 5247-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5247-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5247-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5247-block  3
call    9 never executed
    $$$$$: 5247-block  4
    $$$$$: 5247-block  5
call   10 never executed
    $$$$$: 5247-block  6
    #####: 5248:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5248-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5248-block  1
call    7 never executed
    $$$$$: 5248-block  2
    $$$$$: 5248-block  3
    #####: 5249:  OutputXmlAttribute(
    %%%%%: 5249-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5249-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5249-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5249-block  3
call    9 never executed
    $$$$$: 5249-block  4
    $$$$$: 5249-block  5
call   10 never executed
    $$$$$: 5249-block  6
        -: 5250:      stream, kTestsuites, "disabled",
    #####: 5251:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5251-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 5251-block  1
call    7 never executed
    $$$$$: 5251-block  2
    $$$$$: 5251-block  3
    #####: 5252:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5252-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5252-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5252-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5252-block  3
call   15 never executed
    $$$$$: 5252-block  4
    $$$$$: 5252-block  5
call   16 never executed
    $$$$$: 5252-block  6
    $$$$$: 5252-block  7
call   17 never executed
    $$$$$: 5252-block  8
    $$$$$: 5252-block  9
call   18 never executed
    $$$$$: 5252-block 10
    #####: 5253:  OutputXmlAttribute(
    %%%%%: 5253-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5253-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5253-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5253-block  3
call    9 never executed
    $$$$$: 5253-block  4
    $$$$$: 5253-block  5
call   10 never executed
    $$$$$: 5253-block  6
        -: 5254:      stream, kTestsuites, "timestamp",
    #####: 5255:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5255-block  0
call    5 never executed
    $$$$$: 5255-block  1
    #####: 5256:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 5256-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5256-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5256-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5256-block  3
call    9 never executed
    $$$$$: 5256-block  4
    $$$$$: 5256-block  5
call   10 never executed
    $$$$$: 5256-block  6
    #####: 5257:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5257-block  0
call    5 never executed
    $$$$$: 5257-block  1
        -: 5258:
    #####: 5259:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 5260:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 5260-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5260-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5260-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5260-block  3
call    9 never executed
    $$$$$: 5260-block  4
    $$$$$: 5260-block  5
call   10 never executed
    $$$$$: 5260-block  6
    #####: 5261:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 5261-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5261-block  1
call    5 never executed
    $$$$$: 5261-block  2
    $$$$$: 5261-block  3
        -: 5262:  }
    #####: 5263:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 5263-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5263-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5263-block  2
call    7 never executed
    $$$$$: 5263-block  3
call    8 never executed
    $$$$$: 5263-block  4
        -: 5264:
    #####: 5265:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5265-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5265-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5265-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5265-block  3
call   15 never executed
    $$$$$: 5265-block  4
    $$$$$: 5265-block  5
call   16 never executed
    $$$$$: 5265-block  6
    $$$$$: 5265-block  7
call   17 never executed
    $$$$$: 5265-block  8
    $$$$$: 5265-block  9
call   18 never executed
    $$$$$: 5265-block 10
    #####: 5266:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5267:
    #####: 5268:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
    %%%%%: 5268-block  0
    %%%%%: 5268-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5268-block  2
    #####: 5269:    if (unit_test.GetTestCase(i)->reportable_test_count() > 0)
    %%%%%: 5269-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5269-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5269-block  2
branch  6 never executed
branch  7 never executed
    #####: 5270:      PrintXmlTestCase(stream, *unit_test.GetTestCase(i));
    %%%%%: 5270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5270-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5271:  }
    #####: 5272:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 5272-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5272-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5272-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5273:}
        -: 5274:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_8TestCaseESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 5275:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 5276:    std::ostream* stream, const std::vector<TestCase*>& test_cases) {
    #####: 5277:  const std::string kTestsuites = "testsuites";
    %%%%%: 5277-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5277-block  1
call    4 never executed
    $$$$$: 5277-block  2
    $$$$$: 5277-block  3
call    5 never executed
        -: 5278:
    #####: 5279:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5280:  *stream << "<" << kTestsuites;
    %%%%%: 5280-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5280-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5281:
    #####: 5282:  int total_tests = 0;
    #####: 5283:  for (size_t i = 0; i < test_cases.size(); ++i) {
    %%%%%: 5283-block  0
    %%%%%: 5283-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5284:    total_tests += test_cases[i]->total_test_count();
    %%%%%: 5284-block  0
call    0 never executed
call    1 never executed
        -: 5285:  }
    #####: 5286:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 5286-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5286-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5286-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5286-block  3
call    9 never executed
    $$$$$: 5286-block  4
    $$$$$: 5286-block  5
call   10 never executed
    $$$$$: 5286-block  6
    #####: 5287:                     StreamableToString(total_tests));
    %%%%%: 5287-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5287-block  1
call    4 never executed
    $$$$$: 5287-block  2
    #####: 5288:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5288-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5288-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5288-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5288-block  3
call   15 never executed
    $$$$$: 5288-block  4
    $$$$$: 5288-block  5
call   16 never executed
    $$$$$: 5288-block  6
    $$$$$: 5288-block  7
call   17 never executed
    $$$$$: 5288-block  8
    $$$$$: 5288-block  9
call   18 never executed
    $$$$$: 5288-block 10
    #####: 5289:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5290:
    #####: 5291:  for (size_t i = 0; i < test_cases.size(); ++i) {
    %%%%%: 5291-block  0
    %%%%%: 5291-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5291-block  2
    #####: 5292:    PrintXmlTestCase(stream, *test_cases[i]);
    %%%%%: 5292-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5293:  }
    #####: 5294:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 5294-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5294-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5294-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5295:}
        -: 5296:
        -: 5297:// Produces a string representing the test properties in a result as space
        -: 5298:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 5299:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 5300:    const TestResult& result) {
    #####: 5301:  Message attributes;
    %%%%%: 5301-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5301-block  1
call    3 never executed
    $$$$$: 5301-block  2
call    4 never executed
    #####: 5302:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 5302-block  0
    %%%%%: 5302-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5303:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 5303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5304:    attributes << " " << property.key() << "="
    %%%%%: 5304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5304-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5304-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 5304-block  3
    #####: 5305:        << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 5305-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5305-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5305-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5305-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5305-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 5305-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 5305-block  6
call   20 never executed
    $$$$$: 5305-block  7
    $$$$$: 5305-block  8
call   21 never executed
    $$$$$: 5305-block  9
    $$$$$: 5305-block 10
call   22 never executed
    $$$$$: 5305-block 11
        -: 5306:  }
    #####: 5307:  return attributes.GetString();
    %%%%%: 5307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5307-block  1
    %%%%%: 5307-block  2
        -: 5308:}
        -: 5309:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 5310:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 5311:    std::ostream* stream, const TestResult& result) {
    #####: 5312:  const std::string kProperties = "properties";
    %%%%%: 5312-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5312-block  1
    $$$$$: 5312-block  2
call    4 never executed
    #####: 5313:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5313-block  0
    $$$$$: 5313-block  1
call    4 never executed
        -: 5314:
    #####: 5315:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5316:    return;
    %%%%%: 5316-block  0
        -: 5317:  }
        -: 5318:
    #####: 5319:  *stream << "<" << kProperties << ">\n";
    %%%%%: 5319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5319-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5319-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5320:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 5320-block  0
    %%%%%: 5320-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5320-block  2
    #####: 5321:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 5321-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5322:    *stream << "<" << kProperty;
    %%%%%: 5322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5322-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5323:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 5323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5323-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5323-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5323-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5323-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 5323-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 5323-block  6
call   20 never executed
    $$$$$: 5323-block  7
    $$$$$: 5323-block  8
call   21 never executed
    $$$$$: 5323-block  9
    $$$$$: 5323-block 10
call   22 never executed
    $$$$$: 5323-block 11
    #####: 5324:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5324-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5324-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5324-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5324-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 5324-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 5324-block  5
call   20 never executed
    $$$$$: 5324-block  6
    $$$$$: 5324-block  7
call   21 never executed
    $$$$$: 5324-block  8
    $$$$$: 5324-block  9
call   22 never executed
    $$$$$: 5324-block 10
    #####: 5325:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5326:  }
    #####: 5327:  *stream << "</" << kProperties << ">\n";
    %%%%%: 5327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5327-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5327-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5328:}
        -: 5329:
        -: 5330:// End XmlUnitTestResultPrinter
        -: 5331:
        -: 5332:// This class generates an JSON output file.
        -: 5333:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 5334: public:
        -: 5335:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 5336:
        -: 5337:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 5338:
        -: 5339:  // Prints an JSON summary of all unit tests.
        -: 5340:  static void PrintJsonTestList(::std::ostream* stream,
        -: 5341:                                const std::vector<TestCase*>& test_cases);
        -: 5342:
        -: 5343: private:
        -: 5344:  // Returns an JSON-escaped copy of the input string str.
        -: 5345:  static std::string EscapeJson(const std::string& str);
        -: 5346:
        -: 5347:  //// Verifies that the given attribute belongs to the given element and
        -: 5348:  //// streams the attribute as JSON.
        -: 5349:  static void OutputJsonKey(std::ostream* stream,
        -: 5350:                            const std::string& element_name,
        -: 5351:                            const std::string& name,
        -: 5352:                            const std::string& value,
        -: 5353:                            const std::string& indent,
        -: 5354:                            bool comma = true);
        -: 5355:  static void OutputJsonKey(std::ostream* stream,
        -: 5356:                            const std::string& element_name,
        -: 5357:                            const std::string& name,
        -: 5358:                            int value,
        -: 5359:                            const std::string& indent,
        -: 5360:                            bool comma = true);
        -: 5361:
        -: 5362:  // Streams a JSON representation of a TestInfo object.
        -: 5363:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 5364:                                 const char* test_case_name,
        -: 5365:                                 const TestInfo& test_info);
        -: 5366:
        -: 5367:  // Prints a JSON representation of a TestCase object
        -: 5368:  static void PrintJsonTestCase(::std::ostream* stream,
        -: 5369:                                const TestCase& test_case);
        -: 5370:
        -: 5371:  // Prints a JSON summary of unit_test to output stream out.
        -: 5372:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 5373:                                const UnitTest& unit_test);
        -: 5374:
        -: 5375:  // Produces a string representing the test properties in a result as
        -: 5376:  // a JSON dictionary.
        -: 5377:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 5378:                                          const std::string& indent);
        -: 5379:
        -: 5380:  // The output file.
        -: 5381:  const std::string output_file_;
        -: 5382:
        -: 5383:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 5384:};
        -: 5385:
        -: 5386:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 5387:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 5388:    : output_file_(output_file) {
    %%%%%: 5388-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5388-block  1
call    5 never executed
    $$$$$: 5388-block  2
call    6 never executed
    $$$$$: 5388-block  3
    $$$$$: 5388-block  4
call    7 never executed
    $$$$$: 5388-block  5
call    8 never executed
    #####: 5389:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5390:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 5390-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5390-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5390-block  2
call    7 never executed
    $$$$$: 5390-block  3
call    8 never executed
    $$$$$: 5390-block  4
        -: 5391:  }
    #####: 5392:}
    %%%%%: 5392-block  0
        -: 5393:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 5394:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 5395:                                                  int /*iteration*/) {
    #####: 5396:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 5396-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5397:  std::stringstream stream;
    %%%%%: 5397-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5397-block  1
call    4 never executed
    $$$$$: 5397-block  2
call    5 never executed
    #####: 5398:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 5398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5399:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 5399-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5399-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5399-block  2
call    7 never executed
    $$$$$: 5399-block  3
call    8 never executed
    $$$$$: 5399-block  4
    #####: 5400:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5401:}
        -: 5402:
        -: 5403:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5404:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 5405:  Message m;
    %%%%%: 5405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5405-block  1
call    3 never executed
    $$$$$: 5405-block  2
call    4 never executed
        -: 5406:
    #####: 5407:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 5407-block  0
    %%%%%: 5407-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5407-block  2
    #####: 5408:    const char ch = str[i];
    %%%%%: 5408-block  0
call    0 never executed
    #####: 5409:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5410:      case '\\':
        -: 5411:      case '"':
        -: 5412:      case '/':
    #####: 5413:        m << '\\' << ch;
    %%%%%: 5413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5413-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5413-block  2
    #####: 5414:        break;
    %%%%%: 5414-block  0
    #####: 5415:      case '\b':
    #####: 5416:        m << "\\b";
    %%%%%: 5416-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5417:        break;
    %%%%%: 5417-block  0
    #####: 5418:      case '\t':
    #####: 5419:        m << "\\t";
    %%%%%: 5419-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5420:        break;
    %%%%%: 5420-block  0
    #####: 5421:      case '\n':
    #####: 5422:        m << "\\n";
    %%%%%: 5422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5423:        break;
    %%%%%: 5423-block  0
    #####: 5424:      case '\f':
    #####: 5425:        m << "\\f";
    %%%%%: 5425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5426:        break;
    %%%%%: 5426-block  0
    #####: 5427:      case '\r':
    #####: 5428:        m << "\\r";
    %%%%%: 5428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5429:        break;
    %%%%%: 5429-block  0
    #####: 5430:      default:
    #####: 5431:        if (ch < ' ') {
    %%%%%: 5431-block  0
branch  0 never executed
branch  1 never executed
    #####: 5432:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 5432-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5432-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5432-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5432-block  3
call    9 never executed
    $$$$$: 5432-block  4
call   10 never executed
    $$$$$: 5432-block  5
        -: 5433:        } else {
    #####: 5434:          m << ch;
    %%%%%: 5434-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5435:        }
    #####: 5436:        break;
    %%%%%: 5436-block  0
        -: 5437:    }
        -: 5438:  }
        -: 5439:
    #####: 5440:  return m.GetString();
    %%%%%: 5440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5440-block  1
    %%%%%: 5440-block  2
        -: 5441:}
        -: 5442:
        -: 5443:// The following routines generate an JSON representation of a UnitTest
        -: 5444:// object.
        -: 5445:
        -: 5446:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 5447:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 5448:  ::std::stringstream ss;
    %%%%%: 5448-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5448-block  1
call    4 never executed
    $$$$$: 5448-block  2
call    5 never executed
    #####: 5449:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 5449-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5449-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5450:  return ss.str();
    %%%%%: 5450-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5450-block  1
    %%%%%: 5450-block  2
        -: 5451:}
        -: 5452:
        -: 5453:// Converts the given epoch time in milliseconds to a date string in the
        -: 5454:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 5455:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 5456:  struct tm time_struct;
    #####: 5457:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 5457-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5458:    return "";
    %%%%%: 5458-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5458-block  1
call    4 never executed
    $$$$$: 5458-block  2
call    5 never executed
    $$$$$: 5458-block  3
        -: 5459:  // YYYY-MM-DDThh:mm:ss
    #####: 5460:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 5460-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5460-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5460-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 5460-block  3
call   11 never executed
    $$$$$: 5460-block  4
    $$$$$: 5460-block  5
call   12 never executed
    $$$$$: 5460-block  6
    $$$$$: 5460-block  7
call   13 never executed
    $$$$$: 5460-block  8
    $$$$$: 5460-block  9
    #####: 5461:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 5461-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5461-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5461-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 5461-block  3
call   12 never executed
    $$$$$: 5461-block  4
    $$$$$: 5461-block  5
call   13 never executed
    $$$$$: 5461-block  6
    $$$$$: 5461-block  7
call   14 never executed
    $$$$$: 5461-block  8
    #####: 5462:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 5462-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5462-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5462-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 5462-block  3
call   12 never executed
    $$$$$: 5462-block  4
    $$$$$: 5462-block  5
call   13 never executed
    $$$$$: 5462-block  6
    $$$$$: 5462-block  7
call   14 never executed
    $$$$$: 5462-block  8
    #####: 5463:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 5463-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5463-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5463-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 5463-block  3
call   12 never executed
    $$$$$: 5463-block  4
    $$$$$: 5463-block  5
call   13 never executed
    $$$$$: 5463-block  6
    $$$$$: 5463-block  7
call   14 never executed
    $$$$$: 5463-block  8
    #####: 5464:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 5464-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5464-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5464-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5464-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 5464-block  4
call   13 never executed
    $$$$$: 5464-block  5
    $$$$$: 5464-block  6
call   14 never executed
    $$$$$: 5464-block  7
    $$$$$: 5464-block  8
call   15 never executed
    $$$$$: 5464-block  9
    #####: 5465:      String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 5465-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5465-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5465-block  2
call    6 never executed
    $$$$$: 5465-block  3
call    7 never executed
    $$$$$: 5465-block  4
        -: 5466:}
        -: 5467:
function _ZN7testing8internalL6IndentEi called 0 returned 0% blocks executed 0%
    #####: 5468:static inline std::string Indent(int width) {
    #####: 5469:  return std::string(width, ' ');
    %%%%%: 5469-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5469-block  1
call    4 never executed
    %%%%%: 5469-block  2
    $$$$$: 5469-block  3
call    5 never executed
        -: 5470:}
        -: 5471:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 5472:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 5473:    std::ostream* stream,
        -: 5474:    const std::string& element_name,
        -: 5475:    const std::string& name,
        -: 5476:    const std::string& value,
        -: 5477:    const std::string& indent,
        -: 5478:    bool comma) {
        -: 5479:  const std::vector<std::string>& allowed_names =
    #####: 5480:      GetReservedAttributesForElement(element_name);
    %%%%%: 5480-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5480-block  1
call    3 never executed
    $$$$$: 5480-block  2
call    4 never executed
        -: 5481:
    #####: 5482:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 5482-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5482-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5482-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5482-block  3
call   13 never executed
    %%%%%: 5482-block  4
call   14 never executed
    $$$$$: 5482-block  5
    $$$$$: 5482-block  6
call   15 never executed
    $$$$$: 5482-block  7
        -: 5483:                   allowed_names.end())
        -: 5484:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 5485:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5485-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5485-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5485-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5485-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5485-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 5486:
    #####: 5487:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 5487-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5487-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5487-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5487-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5487-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5487-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 5487-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 5487-block  7
call   21 never executed
    $$$$$: 5487-block  8
call   22 never executed
    $$$$$: 5487-block  9
    #####: 5488:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 5489:    *stream << ",\n";
    %%%%%: 5489-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5490:}
        -: 5491:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 5492:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 5493:    std::ostream* stream,
        -: 5494:    const std::string& element_name,
        -: 5495:    const std::string& name,
        -: 5496:    int value,
        -: 5497:    const std::string& indent,
        -: 5498:    bool comma) {
        -: 5499:  const std::vector<std::string>& allowed_names =
    #####: 5500:      GetReservedAttributesForElement(element_name);
    %%%%%: 5500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5500-block  1
call    3 never executed
    $$$$$: 5500-block  2
call    4 never executed
        -: 5501:
    #####: 5502:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 5502-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5502-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5502-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5502-block  3
call   13 never executed
    %%%%%: 5502-block  4
call   14 never executed
    $$$$$: 5502-block  5
    $$$$$: 5502-block  6
call   15 never executed
    $$$$$: 5502-block  7
        -: 5503:                   allowed_names.end())
        -: 5504:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 5505:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5505-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5505-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5505-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5505-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5505-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 5506:
    #####: 5507:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 5507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5507-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5507-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5507-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5507-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5507-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 5507-block  6
call   18 never executed
    $$$$$: 5507-block  7
call   19 never executed
    $$$$$: 5507-block  8
    #####: 5508:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 5509:    *stream << ",\n";
    %%%%%: 5509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5510:}
        -: 5511:
        -: 5512:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 5513:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 5514:                                                   const char* test_case_name,
        -: 5515:                                                   const TestInfo& test_info) {
    #####: 5516:  const TestResult& result = *test_info.result();
    %%%%%: 5516-block  0
call    0 never executed
    #####: 5517:  const std::string kTestcase = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5517-block  0
    $$$$$: 5517-block  1
call    4 never executed
    #####: 5518:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5518-block  0
call    3 never executed
        -: 5519:
    #####: 5520:  *stream << Indent(8) << "{\n";
    %%%%%: 5520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5520-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5520-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5520-block  3
call    9 never executed
    $$$$$: 5520-block  4
call   10 never executed
    $$$$$: 5520-block  5
    #####: 5521:  OutputJsonKey(stream, kTestcase, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5521-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5521-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5521-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 5521-block  3
call   16 never executed
    $$$$$: 5521-block  4
    $$$$$: 5521-block  5
call   17 never executed
    $$$$$: 5521-block  6
    $$$$$: 5521-block  7
call   18 never executed
    $$$$$: 5521-block  8
    $$$$$: 5521-block  9
call   19 never executed
    $$$$$: 5521-block 10
        -: 5522:
    #####: 5523:  if (test_info.value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5523-block  0
branch  3 never executed
branch  4 never executed
    #####: 5524:    OutputJsonKey(stream, kTestcase, "value_param",
    %%%%%: 5524-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5524-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5524-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5524-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5524-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 5524-block  5
call   18 never executed
    $$$$$: 5524-block  6
    $$$$$: 5524-block  7
call   19 never executed
    $$$$$: 5524-block  8
    $$$$$: 5524-block  9
call   20 never executed
    $$$$$: 5524-block 10
    $$$$$: 5524-block 11
call   21 never executed
    $$$$$: 5524-block 12
        -: 5525:                  test_info.value_param(), kIndent);
        -: 5526:  }
    #####: 5527:  if (test_info.type_param() != NULL) {
    %%%%%: 5527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5527-block  1
branch  3 never executed
branch  4 never executed
    #####: 5528:    OutputJsonKey(stream, kTestcase, "type_param", test_info.type_param(),
    %%%%%: 5528-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5528-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5528-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5528-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5528-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 5528-block  5
call   18 never executed
    $$$$$: 5528-block  6
    $$$$$: 5528-block  7
call   19 never executed
    $$$$$: 5528-block  8
    $$$$$: 5528-block  9
call   20 never executed
    $$$$$: 5528-block 10
    $$$$$: 5528-block 11
call   21 never executed
    $$$$$: 5528-block 12
        -: 5529:                  kIndent);
        -: 5530:  }
    #####: 5531:  if (GTEST_FLAG(list_tests)) {
    %%%%%: 5531-block  0
branch  0 never executed
branch  1 never executed
    #####: 5532:    OutputJsonKey(stream, kTestcase, "file", test_info.file(), kIndent);
    %%%%%: 5532-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5532-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5532-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5532-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 5532-block  4
call   16 never executed
    $$$$$: 5532-block  5
    $$$$$: 5532-block  6
call   17 never executed
    $$$$$: 5532-block  7
    $$$$$: 5532-block  8
call   18 never executed
    $$$$$: 5532-block  9
    $$$$$: 5532-block 10
call   19 never executed
    $$$$$: 5532-block 11
    #####: 5533:    OutputJsonKey(stream, kTestcase, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5533-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5533-block  1
call    8 never executed
call    9 never executed
    $$$$$: 5533-block  2
call   10 never executed
    $$$$$: 5533-block  3
    $$$$$: 5533-block  4
call   11 never executed
    $$$$$: 5533-block  5
    #####: 5534:    *stream << "\n" << Indent(8) << "}";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5534-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5534-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5534-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5534-block  3
call   12 never executed
    $$$$$: 5534-block  4
call   13 never executed
    $$$$$: 5534-block  5
    #####: 5535:    return;
        -: 5536:  }
        -: 5537:
    #####: 5538:  OutputJsonKey(stream, kTestcase, "status",
    %%%%%: 5538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5538-block  1
    %%%%%: 5538-block  2
    %%%%%: 5538-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5538-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5538-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5538-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 5538-block  7
call   17 never executed
    $$$$$: 5538-block  8
    $$$$$: 5538-block  9
call   18 never executed
    $$$$$: 5538-block 10
    $$$$$: 5538-block 11
call   19 never executed
    $$$$$: 5538-block 12
    $$$$$: 5538-block 13
call   20 never executed
    $$$$$: 5538-block 14
    #####: 5539:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 5540:  OutputJsonKey(stream, kTestcase, "time",
    %%%%%: 5540-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5540-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5540-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5540-block  3
call    9 never executed
    $$$$$: 5540-block  4
    $$$$$: 5540-block  5
call   10 never executed
    $$$$$: 5540-block  6
    #####: 5541:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5541-block  0
call    5 never executed
    $$$$$: 5541-block  1
    #####: 5542:  OutputJsonKey(stream, kTestcase, "classname", test_case_name, kIndent, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5542-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5542-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5542-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5542-block  3
call   15 never executed
    $$$$$: 5542-block  4
    $$$$$: 5542-block  5
call   16 never executed
    $$$$$: 5542-block  6
    $$$$$: 5542-block  7
call   17 never executed
    $$$$$: 5542-block  8
    $$$$$: 5542-block  9
call   18 never executed
    $$$$$: 5542-block 10
    #####: 5543:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5543-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5543-block  1
call    6 never executed
    $$$$$: 5543-block  2
call    7 never executed
    $$$$$: 5543-block  3
        -: 5544:
    #####: 5545:  int failures = 0;
    #####: 5546:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 5546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5546-block  1
    #####: 5547:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 5547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5548:    if (part.failed()) {
    %%%%%: 5548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5549:      *stream << ",\n";
    %%%%%: 5549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5550:      if (++failures == 1) {
    %%%%%: 5550-block  0
branch  0 never executed
branch  1 never executed
    #####: 5551:        *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 5551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5551-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5551-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5551-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5552:      }
        -: 5553:      const std::string location =
        -: 5554:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 5555:                                                          part.line_number());
    %%%%%: 5555-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 5555-block  1
call    6 never executed
    #####: 5556:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 5556-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5556-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5556-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    %%%%%: 5556-block  3
call   11 never executed
    $$$$$: 5556-block  4
    $$$$$: 5556-block  5
    $$$$$: 5556-block  6
call   12 never executed
        -: 5557:      *stream << kIndent << "  {\n"
        -: 5558:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 5559:              << kIndent << "    \"type\": \"\"\n"
    #####: 5560:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5560-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5560-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5560-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5560-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5560-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 5560-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 5560-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 5560-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 5560-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
        -: 5561:    }
        -: 5562:  }
        -: 5563:
    #####: 5564:  if (failures > 0)
    %%%%%: 5564-block  0
branch  0 never executed
branch  1 never executed
    #####: 5565:    *stream << "\n" << kIndent << "]";
    %%%%%: 5565-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5565-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5565-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5566:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 5566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5566-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5566-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5566-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5566-block  4
call   12 never executed
    $$$$$: 5566-block  5
call   13 never executed
    $$$$$: 5566-block  6
        -: 5567:}
        -: 5568:
        -: 5569:// Prints an JSON representation of a TestCase object
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestCaseEPSoRKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 5570:void JsonUnitTestResultPrinter::PrintJsonTestCase(std::ostream* stream,
        -: 5571:                                                  const TestCase& test_case) {
    #####: 5572:  const std::string kTestsuite = "testsuite";
    %%%%%: 5572-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5572-block  1
    $$$$$: 5572-block  2
call    5 never executed
    #####: 5573:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5573-block  0
call    3 never executed
        -: 5574:
    #####: 5575:  *stream << Indent(4) << "{\n";
    %%%%%: 5575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5575-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5575-block  3
call    9 never executed
    $$$$$: 5575-block  4
call   10 never executed
    $$$$$: 5575-block  5
    #####: 5576:  OutputJsonKey(stream, kTestsuite, "name", test_case.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5576-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5576-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5576-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 5576-block  3
call   16 never executed
    $$$$$: 5576-block  4
    $$$$$: 5576-block  5
call   17 never executed
    $$$$$: 5576-block  6
    $$$$$: 5576-block  7
call   18 never executed
    $$$$$: 5576-block  8
    $$$$$: 5576-block  9
call   19 never executed
    $$$$$: 5576-block 10
    #####: 5577:  OutputJsonKey(stream, kTestsuite, "tests", test_case.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5577-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5577-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5577-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5577-block  3
call   12 never executed
    $$$$$: 5577-block  4
    $$$$$: 5577-block  5
call   13 never executed
    $$$$$: 5577-block  6
        -: 5578:                kIndent);
    #####: 5579:  if (!GTEST_FLAG(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 5580:    OutputJsonKey(stream, kTestsuite, "failures", test_case.failed_test_count(),
    %%%%%: 5580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5580-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5580-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5580-block  3
call   10 never executed
call   11 never executed
    $$$$$: 5580-block  4
call   12 never executed
    $$$$$: 5580-block  5
    $$$$$: 5580-block  6
call   13 never executed
    $$$$$: 5580-block  7
        -: 5581:                  kIndent);
    #####: 5582:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5582-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5582-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5582-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5582-block  3
call   12 never executed
    $$$$$: 5582-block  4
    $$$$$: 5582-block  5
call   13 never executed
    $$$$$: 5582-block  6
        -: 5583:                  test_case.reportable_disabled_test_count(), kIndent);
    #####: 5584:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5584-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5584-block  1
call    7 never executed
call    8 never executed
    $$$$$: 5584-block  2
call    9 never executed
    $$$$$: 5584-block  3
    $$$$$: 5584-block  4
call   10 never executed
    $$$$$: 5584-block  5
    #####: 5585:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 5585-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5585-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5585-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5585-block  3
call    9 never executed
    $$$$$: 5585-block  4
    $$$$$: 5585-block  5
call   10 never executed
    $$$$$: 5585-block  6
    #####: 5586:                  FormatTimeInMillisAsDuration(test_case.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5586-block  0
call    5 never executed
    $$$$$: 5586-block  1
        -: 5587:                  kIndent, false);
    #####: 5588:    *stream << TestPropertiesAsJson(test_case.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5588-block  0
call    4 never executed
    $$$$$: 5588-block  1
call    5 never executed
    $$$$$: 5588-block  2
    #####: 5589:            << ",\n";
    %%%%%: 5589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5589-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5590:  }
        -: 5591:
    #####: 5592:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 5592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5592-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5592-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5592-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5593:
    #####: 5594:  bool comma = false;
    #####: 5595:  for (int i = 0; i < test_case.total_test_count(); ++i) {
    %%%%%: 5595-block  0
    %%%%%: 5595-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5595-block  2
    #####: 5596:    if (test_case.GetTestInfo(i)->is_reportable()) {
    %%%%%: 5596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5596-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5597:      if (comma) {
    %%%%%: 5597-block  0
branch  0 never executed
branch  1 never executed
    #####: 5598:        *stream << ",\n";
    %%%%%: 5598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5599:      } else {
    #####: 5600:        comma = true;
    %%%%%: 5600-block  0
        -: 5601:      }
    #####: 5602:      OutputJsonTestInfo(stream, test_case.name(), *test_case.GetTestInfo(i));
    %%%%%: 5602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5602-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 5603:    }
        -: 5604:  }
    #####: 5605:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 5605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5605-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5605-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5605-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5605-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5605-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 5605-block  6
call   18 never executed
call   19 never executed
    $$$$$: 5605-block  7
call   20 never executed
    $$$$$: 5605-block  8
    #####: 5606:}
        -: 5607:
        -: 5608:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 5609:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 5610:                                                  const UnitTest& unit_test) {
    #####: 5611:  const std::string kTestsuites = "testsuites";
    %%%%%: 5611-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5611-block  1
    $$$$$: 5611-block  2
call    5 never executed
    #####: 5612:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5612-block  0
call    3 never executed
    $$$$$: 5612-block  1
call    4 never executed
    #####: 5613:  *stream << "{\n";
    %%%%%: 5613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5614:
    #####: 5615:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 5615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5615-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5615-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5615-block  3
call   10 never executed
call   11 never executed
    $$$$$: 5615-block  4
call   12 never executed
    $$$$$: 5615-block  5
    $$$$$: 5615-block  6
call   13 never executed
    $$$$$: 5615-block  7
        -: 5616:                kIndent);
    #####: 5617:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5617-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5617-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5617-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5617-block  3
call   12 never executed
    $$$$$: 5617-block  4
    $$$$$: 5617-block  5
call   13 never executed
    $$$$$: 5617-block  6
        -: 5618:                kIndent);
    #####: 5619:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5619-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5619-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5619-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5619-block  3
call   12 never executed
    $$$$$: 5619-block  4
    $$$$$: 5619-block  5
call   13 never executed
    $$$$$: 5619-block  6
        -: 5620:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 5621:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5621-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5621-block  1
call    7 never executed
call    8 never executed
    $$$$$: 5621-block  2
call    9 never executed
    $$$$$: 5621-block  3
    $$$$$: 5621-block  4
call   10 never executed
    $$$$$: 5621-block  5
    #####: 5622:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 5623:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 5623-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5623-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5623-block  2
call    8 never executed
call    9 never executed
    $$$$$: 5623-block  3
call   10 never executed
    $$$$$: 5623-block  4
    $$$$$: 5623-block  5
call   11 never executed
    $$$$$: 5623-block  6
        -: 5624:                  kIndent);
        -: 5625:  }
    #####: 5626:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 5626-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5626-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5626-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5626-block  3
call    9 never executed
    $$$$$: 5626-block  4
    $$$$$: 5626-block  5
call   10 never executed
    $$$$$: 5626-block  6
    #####: 5627:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 5627-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5627-block  1
call    5 never executed
    $$$$$: 5627-block  2
        -: 5628:                kIndent);
    #####: 5629:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 5629-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5629-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5629-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5629-block  3
call    9 never executed
    $$$$$: 5629-block  4
    $$$$$: 5629-block  5
call   10 never executed
    $$$$$: 5629-block  6
    #####: 5630:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5630-block  0
call    5 never executed
    $$$$$: 5630-block  1
        -: 5631:                false);
        -: 5632:
    #####: 5633:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5633-block  0
call    4 never executed
    $$$$$: 5633-block  1
call    5 never executed
    $$$$$: 5633-block  2
    #####: 5634:          << ",\n";
    %%%%%: 5634-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5634-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5635:
    #####: 5636:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5636-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5636-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5636-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5636-block  3
call   15 never executed
    $$$$$: 5636-block  4
    $$$$$: 5636-block  5
call   16 never executed
    $$$$$: 5636-block  6
    $$$$$: 5636-block  7
call   17 never executed
    $$$$$: 5636-block  8
    $$$$$: 5636-block  9
call   18 never executed
    $$$$$: 5636-block 10
    #####: 5637:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5637-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5637-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5637-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5638:
    #####: 5639:  bool comma = false;
    #####: 5640:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
    %%%%%: 5640-block  0
    %%%%%: 5640-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5640-block  2
    #####: 5641:    if (unit_test.GetTestCase(i)->reportable_test_count() > 0) {
    %%%%%: 5641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5641-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5641-block  2
branch  6 never executed
branch  7 never executed
    #####: 5642:      if (comma) {
    %%%%%: 5642-block  0
branch  0 never executed
branch  1 never executed
    #####: 5643:        *stream << ",\n";
    %%%%%: 5643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5644:      } else {
    #####: 5645:        comma = true;
    %%%%%: 5645-block  0
        -: 5646:      }
    #####: 5647:      PrintJsonTestCase(stream, *unit_test.GetTestCase(i));
    %%%%%: 5647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5647-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5648:    }
        -: 5649:  }
        -: 5650:
    #####: 5651:  *stream << "\n" << kIndent << "]\n" << "}\n";
    %%%%%: 5651-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5651-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5651-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5651-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5652:}
        -: 5653:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_8TestCaseESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 5654:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 5655:    std::ostream* stream, const std::vector<TestCase*>& test_cases) {
    #####: 5656:  const std::string kTestsuites = "testsuites";
    %%%%%: 5656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 5656-block  1
    $$$$$: 5656-block  2
call    5 never executed
    #####: 5657:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5657-block  0
call    3 never executed
    $$$$$: 5657-block  1
call    4 never executed
    #####: 5658:  *stream << "{\n";
    %%%%%: 5658-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5659:  int total_tests = 0;
    #####: 5660:  for (size_t i = 0; i < test_cases.size(); ++i) {
    %%%%%: 5660-block  0
    %%%%%: 5660-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5661:    total_tests += test_cases[i]->total_test_count();
    %%%%%: 5661-block  0
call    0 never executed
call    1 never executed
        -: 5662:  }
    #####: 5663:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 5663-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5663-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5663-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5663-block  3
call    9 never executed
    $$$$$: 5663-block  4
    $$$$$: 5663-block  5
call   10 never executed
    $$$$$: 5663-block  6
        -: 5664:
    #####: 5665:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5665-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5665-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5665-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 5665-block  3
call   15 never executed
    $$$$$: 5665-block  4
    $$$$$: 5665-block  5
call   16 never executed
    $$$$$: 5665-block  6
    $$$$$: 5665-block  7
call   17 never executed
    $$$$$: 5665-block  8
    $$$$$: 5665-block  9
call   18 never executed
    $$$$$: 5665-block 10
    #####: 5666:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5666-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5666-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5666-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5667:
    #####: 5668:  for (size_t i = 0; i < test_cases.size(); ++i) {
    %%%%%: 5668-block  0
    %%%%%: 5668-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5668-block  2
    #####: 5669:    if (i != 0) {
    %%%%%: 5669-block  0
branch  0 never executed
branch  1 never executed
    #####: 5670:      *stream << ",\n";
    %%%%%: 5670-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5671:    }
    #####: 5672:    PrintJsonTestCase(stream, *test_cases[i]);
    %%%%%: 5672-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5673:  }
        -: 5674:
        -: 5675:  *stream << "\n"
        -: 5676:          << kIndent << "]\n"
    #####: 5677:          << "}\n";
    %%%%%: 5677-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5677-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5677-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5677-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5678:}
        -: 5679:// Produces a string representing the test properties in a result as
        -: 5680:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5681:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 5682:    const TestResult& result, const std::string& indent) {
    #####: 5683:  Message attributes;
    %%%%%: 5683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5683-block  1
call    3 never executed
    $$$$$: 5683-block  2
call    4 never executed
    #####: 5684:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 5684-block  0
    %%%%%: 5684-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5685:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 5685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5686:    attributes << ",\n" << indent << "\"" << property.key() << "\": "
    %%%%%: 5686-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5686-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5686-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5686-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 5686-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 5686-block  5
    #####: 5687:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 5687-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5687-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5687-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 5687-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 5687-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 5687-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 5687-block  6
call   20 never executed
    $$$$$: 5687-block  7
    $$$$$: 5687-block  8
call   21 never executed
    $$$$$: 5687-block  9
    $$$$$: 5687-block 10
call   22 never executed
    $$$$$: 5687-block 11
        -: 5688:  }
    #####: 5689:  return attributes.GetString();
    %%%%%: 5689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5689-block  1
    %%%%%: 5689-block  2
        -: 5690:}
        -: 5691:
        -: 5692:// End JsonUnitTestResultPrinter
        -: 5693:
        -: 5694:#if GTEST_CAN_STREAM_RESULTS_
        -: 5695:
        -: 5696:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 5697:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 5698:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 5699:// in both time and space -- important as the input str may contain an
        -: 5700:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 5701:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 5702:  std::string result;
    %%%%%: 5702-block  0
call    0 never executed
    #####: 5703:  result.reserve(strlen(str) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5704:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 5704-block  0
    %%%%%: 5704-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 5704-block  2
    #####: 5705:    switch (ch) {
    %%%%%: 5705-block  0
branch  0 never executed
branch  1 never executed
    #####: 5706:      case '%':
        -: 5707:      case '=':
        -: 5708:      case '&':
        -: 5709:      case '\n':
    #####: 5710:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 5710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5710-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5710-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5710-block  3
call    9 never executed
call   10 never executed
    $$$$$: 5710-block  4
call   11 never executed
    $$$$$: 5710-block  5
    $$$$$: 5710-block  6
call   12 never executed
    $$$$$: 5710-block  7
    #####: 5711:        break;
    #####: 5712:      default:
    #####: 5713:        result.push_back(ch);
    %%%%%: 5713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5714:        break;
    %%%%%: 5714-block  0
        -: 5715:    }
        -: 5716:  }
    #####: 5717:  return result;
    %%%%%: 5717-block  0
    %%%%%: 5717-block  1
        -: 5718:}
        -: 5719:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 5720:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 5721:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 5721-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5721-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5721-block  2
call    6 never executed
    %%%%%: 5721-block  3
call    7 never executed
    $$$$$: 5721-block  4
call    8 never executed
    $$$$$: 5721-block  5
    #####: 5722:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5722-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5723:
        -: 5724:  addrinfo hints;
    #####: 5725:  memset(&hints, 0, sizeof(hints));
    #####: 5726:  hints.ai_family = AF_UNSPEC;    // To allow both IPv4 and IPv6 addresses.
    #####: 5727:  hints.ai_socktype = SOCK_STREAM;
    #####: 5728:  addrinfo* servinfo = NULL;
        -: 5729:
        -: 5730:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 5731:  // the given host name.
    #####: 5732:  const int error_num = getaddrinfo(
    %%%%%: 5732-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5733:      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
    #####: 5734:  if (error_num != 0) {
    %%%%%: 5734-block  0
branch  0 never executed
branch  1 never executed
    #####: 5735:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 5735-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5735-block  1
call    3 never executed
    %%%%%: 5735-block  2
call    4 never executed
    $$$$$: 5735-block  3
call    5 never executed
    $$$$$: 5735-block  4
    #####: 5736:                        << gai_strerror(error_num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5736-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 5737:  }
        -: 5738:
        -: 5739:  // Loop through all the results and connect to the first we can.
    #####: 5740:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != NULL;
    %%%%%: 5740-block  0
    %%%%%: 5740-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 5740-block  2
branch  2 never executed
branch  3 never executed
    #####: 5741:       cur_addr = cur_addr->ai_next) {
    %%%%%: 5741-block  0
    #####: 5742:    sockfd_ = socket(
    %%%%%: 5742-block  0
call    0 never executed
        -: 5743:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
    #####: 5744:    if (sockfd_ != -1) {
branch  0 never executed
branch  1 never executed
        -: 5745:      // Connect the client socket to the server socket.
    #####: 5746:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 5746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5746-block  1
branch  3 never executed
branch  4 never executed
    #####: 5747:        close(sockfd_);
    %%%%%: 5747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5748:        sockfd_ = -1;
    %%%%%: 5748-block  0
        -: 5749:      }
        -: 5750:    }
        -: 5751:  }
        -: 5752:
    #####: 5753:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 5753-block  0
call    0 never executed
        -: 5754:
    #####: 5755:  if (sockfd_ == -1) {
branch  0 never executed
branch  1 never executed
    #####: 5756:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 5756-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5756-block  1
call    3 never executed
    %%%%%: 5756-block  2
call    4 never executed
    $$$$$: 5756-block  3
call    5 never executed
    $$$$$: 5756-block  4
    #####: 5757:                        << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5757-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5757-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5757-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5758:  }
    #####: 5759:}
    %%%%%: 5759-block  0
        -: 5760:
        -: 5761:// End of class Streaming Listener
        -: 5762:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 5763:
        -: 5764:// class OsStackTraceGetter
        -: 5765:
        -: 5766:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 5767:    "... " GTEST_NAME_ " internal frames ...";
        -: 5768:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 1 returned 100% blocks executed 75%
        1: 5769:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 5770:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5771:#if GTEST_HAS_ABSL
        -: 5772:  std::string result;
        -: 5773:
        -: 5774:  if (max_depth <= 0) {
        -: 5775:    return result;
        -: 5776:  }
        -: 5777:
        -: 5778:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 5779:
        -: 5780:  std::vector<void*> raw_stack(max_depth);
        -: 5781:  // Skips the frames requested by the caller, plus this function.
        -: 5782:  const int raw_stack_size =
        -: 5783:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 5784:
        -: 5785:  void* caller_frame = nullptr;
        -: 5786:  {
        -: 5787:    MutexLock lock(&mutex_);
        -: 5788:    caller_frame = caller_frame_;
        -: 5789:  }
        -: 5790:
        -: 5791:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 5792:    if (raw_stack[i] == caller_frame &&
        -: 5793:        !GTEST_FLAG(show_internal_stack_frames)) {
        -: 5794:      // Add a marker to the trace and stop adding frames.
        -: 5795:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 5796:      break;
        -: 5797:    }
        -: 5798:
        -: 5799:    char tmp[1024];
        -: 5800:    const char* symbol = "(unknown)";
        -: 5801:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 5802:      symbol = tmp;
        -: 5803:    }
        -: 5804:
        -: 5805:    char line[1024];
        -: 5806:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 5807:    result += line;
        -: 5808:  }
        -: 5809:
        -: 5810:  return result;
        -: 5811:
        -: 5812:#else  // !GTEST_HAS_ABSL
        -: 5813:  static_cast<void>(max_depth);
        -: 5814:  static_cast<void>(skip_count);
        1: 5815:  return "";
        1: 5815-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5815-block  1
call    4 returned 1
        1: 5815-block  2
    $$$$$: 5815-block  3
call    5 never executed
        -: 5816:#endif  // GTEST_HAS_ABSL
        -: 5817:}
        -: 5818:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 54 returned 100% blocks executed 100%
       54: 5819:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5820:#if GTEST_HAS_ABSL
        -: 5821:  void* caller_frame = nullptr;
        -: 5822:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5823:    caller_frame = nullptr;
        -: 5824:  }
        -: 5825:
        -: 5826:  MutexLock lock(&mutex_);
        -: 5827:  caller_frame_ = caller_frame;
        -: 5828:#endif  // GTEST_HAS_ABSL
       54: 5829:}
        -: 5830:
        -: 5831:// A helper class that creates the premature-exit file in its
        -: 5832:// constructor and deletes the file in its destructor.
        -: 5833:class ScopedPrematureExitFile {
        -: 5834: public:
function _ZN7testing8internal23ScopedPrematureExitFileC2EPKc called 1 returned 100% blocks executed 50%
        1: 5835:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 5836:      : premature_exit_filepath_(premature_exit_filepath ?
       1*: 5837:                                 premature_exit_filepath : "") {
        1: 5837-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5837-block  1
        1: 5837-block  2
        1: 5837-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5837-block  4
call    6 returned 1
    $$$$$: 5837-block  5
call    7 never executed
    $$$$$: 5837-block  6
call    8 never executed
    $$$$$: 5837-block  7
call    9 never executed
        -: 5838:    // If a path to the premature-exit file is specified...
        1: 5839:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5840:      // create the file with a single "0" character in it.  I/O
        -: 5841:      // errors are ignored as there's nothing better we can do and we
        -: 5842:      // don't want to fail the test because of this.
    #####: 5843:      FILE* pfile = posix::FOpen(premature_exit_filepath, "w");
    %%%%%: 5843-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5844:      fwrite("0", 1, 1, pfile);
    %%%%%: 5844-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5845:      fclose(pfile);
    %%%%%: 5845-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5846:    }
        1: 5847:  }
        1: 5847-block  0
        -: 5848:
function _ZN7testing8internal23ScopedPrematureExitFileD2Ev called 1 returned 100% blocks executed 25%
        1: 5849:  ~ScopedPrematureExitFile() {
        1: 5849-block  0
call    0 returned 1
        1: 5850:    if (!premature_exit_filepath_.empty()) {
        1: 5850-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5851:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5851-block  0
call    0 never executed
call    1 never executed
    #####: 5852:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5853:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5853-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5854:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5855:                          << retval;
call    0 never executed
        -: 5856:      }
        -: 5857:    }
        1: 5858:  }
        -: 5859:
        -: 5860: private:
        -: 5861:  const std::string premature_exit_filepath_;
        -: 5862:
        -: 5863:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 5864:};
        -: 5865:
        -: 5866:}  // namespace internal
        -: 5867:
        -: 5868:// class TestEventListeners
        -: 5869:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5870:TestEventListeners::TestEventListeners()
        1: 5871:    : repeater_(new internal::TestEventRepeater()),
        1: 5871-block  0
call    0 returned 1
call    1 returned 1
        -: 5872:      default_result_printer_(NULL),
        1: 5873:      default_xml_generator_(NULL) {
        1: 5874:}
        -: 5875:
function _ZN7testing18TestEventListenersD2Ev called 1 returned 100% blocks executed 100%
        1: 5876:TestEventListeners::~TestEventListeners() { delete repeater_; }
        1: 5876-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5876-block  1
call    2 returned 1
        -: 5877:
        -: 5878:// Returns the standard listener responsible for the default console
        -: 5879:// output.  Can be removed from the listeners list to shut down default
        -: 5880:// console output.  Note that removing this object from the listener list
        -: 5881:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5882:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5883:  repeater_->Append(listener);
        1: 5883-block  0
call    0 returned 1
        1: 5884:}
        -: 5885:
        -: 5886:// Removes the given event listener from the list and returns it.  It then
        -: 5887:// becomes the caller's responsibility to delete the listener. Returns
        -: 5888:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5889:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5890:  if (listener == default_result_printer_)
        1: 5890-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5891:    default_result_printer_ = NULL;
        1: 5891-block  0
    #####: 5892:  else if (listener == default_xml_generator_)
    %%%%%: 5892-block  0
branch  0 never executed
branch  1 never executed
    #####: 5893:    default_xml_generator_ = NULL;
    %%%%%: 5893-block  0
        1: 5894:  return repeater_->Release(listener);
        1: 5894-block  0
call    0 returned 1
        -: 5895:}
        -: 5896:
        -: 5897:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5898:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 14 returned 100% blocks executed 100%
       14: 5899:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       14: 5899-block  0
        -: 5900:
        -: 5901:// Sets the default_result_printer attribute to the provided listener.
        -: 5902:// The listener is also added to the listener list and previous
        -: 5903:// default_result_printer is removed from it and deleted. The listener can
        -: 5904:// also be NULL in which case it will not be added to the list. Does
        -: 5905:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5906:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5907:  if (default_result_printer_ != listener) {
        1: 5907-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5908:    // It is an error to pass this method a listener that is already in the
        -: 5909:    // list.
       1*: 5910:    delete Release(default_result_printer_);
        1: 5910-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5910-block  1
call    3 never executed
        1: 5911:    default_result_printer_ = listener;
        1: 5912:    if (listener != NULL)
        1: 5912-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5913:      Append(listener);
        1: 5913-block  0
call    0 returned 1
        -: 5914:  }
        1: 5915:}
        -: 5916:
        -: 5917:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5918:// listener is also added to the listener list and previous
        -: 5919:// default_xml_generator is removed from it and deleted. The listener can
        -: 5920:// also be NULL in which case it will not be added to the list. Does
        -: 5921:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5922:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5923:  if (default_xml_generator_ != listener) {
    %%%%%: 5923-block  0
branch  0 never executed
branch  1 never executed
        -: 5924:    // It is an error to pass this method a listener that is already in the
        -: 5925:    // list.
    #####: 5926:    delete Release(default_xml_generator_);
    %%%%%: 5926-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5926-block  1
call    3 never executed
    #####: 5927:    default_xml_generator_ = listener;
    #####: 5928:    if (listener != NULL)
    %%%%%: 5928-block  0
branch  0 never executed
branch  1 never executed
    #####: 5929:      Append(listener);
    %%%%%: 5929-block  0
call    0 never executed
        -: 5930:  }
    #####: 5931:}
        -: 5932:
        -: 5933:// Controls whether events will be forwarded by the repeater to the
        -: 5934:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5935:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5936:  return repeater_->forwarding_enabled();
    %%%%%: 5936-block  0
call    0 never executed
        -: 5937:}
        -: 5938:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5939:void TestEventListeners::SuppressEventForwarding() {
    #####: 5940:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5940-block  0
call    0 never executed
    #####: 5941:}
        -: 5942:
        -: 5943:// class UnitTest
        -: 5944:
        -: 5945:// Gets the singleton UnitTest object.  The first time this method is
        -: 5946:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5947:// calls will return the same object.
        -: 5948://
        -: 5949:// We don't protect this under mutex_ as a user is not supposed to
        -: 5950:// call this before main() starts, from which point on the return
        -: 5951:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 134 returned 100% blocks executed 82%
      134: 5952:UnitTest* UnitTest::GetInstance() {
        -: 5953:  // When compiled with MSVC 7.1 in optimized mode, destroying the
        -: 5954:  // UnitTest object upon exiting the program messes up the exit code,
        -: 5955:  // causing successful tests to appear failed.  We have to use a
        -: 5956:  // different implementation in this case to bypass the compiler bug.
        -: 5957:  // This implementation makes the compiler happy, at the cost of
        -: 5958:  // leaking the UnitTest object.
        -: 5959:
        -: 5960:  // CodeGear C++Builder insists on a public destructor for the
        -: 5961:  // default implementation.  Use this implementation to keep good OO
        -: 5962:  // design with private destructor.
        -: 5963:
        -: 5964:#if (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)
        -: 5965:  static UnitTest* const instance = new UnitTest;
        -: 5966:  return instance;
        -: 5967:#else
      134: 5968:  static UnitTest instance;
      134: 5968-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 133
        1: 5968-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5968-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5968-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5968-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5968-block  5
call   12 never executed
      134: 5969:  return &instance;
      134: 5969-block  0
      134: 5969-block  1
        -: 5970:#endif  // (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)
        -: 5971:}
        -: 5972:
        -: 5973:// Gets the number of successful test cases.
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5974:int UnitTest::successful_test_case_count() const {
    #####: 5975:  return impl()->successful_test_case_count();
    %%%%%: 5975-block  0
call    0 never executed
call    1 never executed
        -: 5976:}
        -: 5977:
        -: 5978:// Gets the number of failed test cases.
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5979:int UnitTest::failed_test_case_count() const {
    #####: 5980:  return impl()->failed_test_case_count();
    %%%%%: 5980-block  0
call    0 never executed
call    1 never executed
        -: 5981:}
        -: 5982:
        -: 5983:// Gets the number of all test cases.
function _ZNK7testing8UnitTest21total_test_case_countEv called 3 returned 100% blocks executed 100%
        3: 5984:int UnitTest::total_test_case_count() const {
        3: 5985:  return impl()->total_test_case_count();
        3: 5985-block  0
call    0 returned 3
call    1 returned 3
        -: 5986:}
        -: 5987:
        -: 5988:// Gets the number of all test cases that contain at least one test
        -: 5989:// that should run.
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5990:int UnitTest::test_case_to_run_count() const {
        2: 5991:  return impl()->test_case_to_run_count();
        2: 5991-block  0
call    0 returned 2
call    1 returned 2
        -: 5992:}
        -: 5993:
        -: 5994:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5995:int UnitTest::successful_test_count() const {
        1: 5996:  return impl()->successful_test_count();
        1: 5996-block  0
call    0 returned 1
call    1 returned 1
        -: 5997:}
        -: 5998:
        -: 5999:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 3 returned 100% blocks executed 100%
        3: 6000:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
        3: 6000-block  0
call    0 returned 3
call    1 returned 3
        -: 6001:
        -: 6002:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 6003:int UnitTest::reportable_disabled_test_count() const {
        1: 6004:  return impl()->reportable_disabled_test_count();
        1: 6004-block  0
call    0 returned 1
call    1 returned 1
        -: 6005:}
        -: 6006:
        -: 6007:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 6008:int UnitTest::disabled_test_count() const {
    #####: 6009:  return impl()->disabled_test_count();
    %%%%%: 6009-block  0
call    0 never executed
call    1 never executed
        -: 6010:}
        -: 6011:
        -: 6012:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 6013:int UnitTest::reportable_test_count() const {
    #####: 6014:  return impl()->reportable_test_count();
    %%%%%: 6014-block  0
call    0 never executed
call    1 never executed
        -: 6015:}
        -: 6016:
        -: 6017:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 6018:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 6018-block  0
call    0 never executed
call    1 never executed
        -: 6019:
        -: 6020:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 6021:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 6021-block  0
call    0 returned 2
call    1 returned 2
        -: 6022:
        -: 6023:// Gets the time of the test program start, in ms from the start of the
        -: 6024:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 6025:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 6026:    return impl()->start_timestamp();
    %%%%%: 6026-block  0
call    0 never executed
call    1 never executed
        -: 6027:}
        -: 6028:
        -: 6029:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 6030:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 6031:  return impl()->elapsed_time();
        1: 6031-block  0
call    0 returned 1
call    1 returned 1
        -: 6032:}
        -: 6033:
        -: 6034:// Returns true iff the unit test passed (i.e. all test cases passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 6035:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 6035-block  0
call    0 returned 1
call    1 returned 1
        -: 6036:
        -: 6037:// Returns true iff the unit test failed (i.e. some test case failed
        -: 6038:// or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 6039:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 6039-block  0
call    0 never executed
call    1 never executed
        -: 6040:
        -: 6041:// Gets the i-th test case among all the test cases. i can range from 0 to
        -: 6042:// total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest11GetTestCaseEi called 2 returned 100% blocks executed 100%
        2: 6043:const TestCase* UnitTest::GetTestCase(int i) const {
        2: 6044:  return impl()->GetTestCase(i);
        2: 6044-block  0
call    0 returned 2
call    1 returned 2
        -: 6045:}
        -: 6046:
        -: 6047:// Returns the TestResult containing information on test failures and
        -: 6048:// properties logged outside of individual test cases.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 6049:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 6050:  return *impl()->ad_hoc_test_result();
    %%%%%: 6050-block  0
call    0 never executed
call    1 never executed
        -: 6051:}
        -: 6052:
        -: 6053:// Gets the i-th test case among all the test cases. i can range from 0 to
        -: 6054:// total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest18GetMutableTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 6055:TestCase* UnitTest::GetMutableTestCase(int i) {
    #####: 6056:  return impl()->GetMutableTestCase(i);
    %%%%%: 6056-block  0
call    0 never executed
call    1 never executed
        -: 6057:}
        -: 6058:
        -: 6059:// Returns the list of event listeners that can be used to track events
        -: 6060:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 12 returned 100% blocks executed 100%
       12: 6061:TestEventListeners& UnitTest::listeners() {
       12: 6062:  return *impl()->listeners();
       12: 6062-block  0
call    0 returned 12
call    1 returned 12
        -: 6063:}
        -: 6064:
        -: 6065:// Registers and returns a global test environment.  When a test
        -: 6066:// program is run, all global test environments will be set-up in the
        -: 6067:// order they were registered.  After all tests in the program have
        -: 6068:// finished, all global test environments will be torn-down in the
        -: 6069:// *reverse* order they were registered.
        -: 6070://
        -: 6071:// The UnitTest object takes ownership of the given environment.
        -: 6072://
        -: 6073:// We don't protect this under mutex_, as we only support calling it
        -: 6074:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 6075:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 6076:  if (env == NULL) {
    %%%%%: 6076-block  0
branch  0 never executed
branch  1 never executed
    #####: 6077:    return NULL;
    %%%%%: 6077-block  0
        -: 6078:  }
        -: 6079:
    #####: 6080:  impl_->environments().push_back(env);
    %%%%%: 6080-block  0
call    0 never executed
call    1 never executed
    #####: 6081:  return env;
        -: 6082:}
        -: 6083:
        -: 6084:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 6085:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 6086:// this to report their results.  The user code should use the
        -: 6087:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 1 returned 100% blocks executed 40%
        1: 6088:void UnitTest::AddTestPartResult(
        -: 6089:    TestPartResult::Type result_type,
        -: 6090:    const char* file_name,
        -: 6091:    int line_number,
        -: 6092:    const std::string& message,
        -: 6093:    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {
        2: 6094:  Message msg;
        1: 6094-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$: 6094-block  1
call    4 never executed
        1: 6095:  msg << message;
        1: 6095-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6096:
        2: 6097:  internal::MutexLock lock(&mutex_);
        1: 6097-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$: 6097-block  1
call    4 never executed
        1: 6098:  if (impl_->gtest_trace_stack().size() > 0) {
        1: 6098-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6098-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####: 6099:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 6099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6099-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6099-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6100:
    #####: 6101:    for (int i = static_cast<int>(impl_->gtest_trace_stack().size());
    %%%%%: 6101-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6101-block  1
call    3 never executed
    #####: 6102:         i > 0; --i) {
    %%%%%: 6102-block  0
branch  0 never executed
branch  1 never executed
    #####: 6103:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 6103-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6103-block  1
call    3 never executed
    #####: 6104:      msg << "\n" << internal::FormatFileLocation(trace.file, trace.line)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6104-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6104-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6104-block  2
call    9 never executed
    $$$$$: 6104-block  3
call   10 never executed
    $$$$$: 6104-block  4
    #####: 6105:          << " " << trace.message;
    %%%%%: 6105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6105-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 6106:    }
        -: 6107:  }
        -: 6108:
       1*: 6109:  if (os_stack_trace.c_str() != NULL && !os_stack_trace.empty()) {
        1: 6109-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 6109-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 6109-block  2
        1: 6109-block  3
        1: 6109-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    #####: 6110:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 6110-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6110-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 6111:  }
        -: 6112:
        -: 6113:  const TestPartResult result =
        -: 6114:    TestPartResult(result_type, file_name, line_number,
        2: 6115:                   msg.GetString().c_str());
        1: 6115-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6115-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 6115-block  2
call    7 returned 1
    $$$$$: 6115-block  3
    $$$$$: 6115-block  4
call    8 never executed
        1: 6116:  impl_->GetTestPartResultReporterForCurrentThread()->
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6117:      ReportTestPartResult(result);
        1: 6117-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6118:
        1: 6119:  if (result_type != TestPartResult::kSuccess) {
        1: 6119-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6120:    // gtest_break_on_failure takes precedence over
        -: 6121:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 6122:    // in the code (perhaps in order to use Google Test assertions
        -: 6123:    // with another testing framework) and specify the former on the
        -: 6124:    // command line for debugging.
        1: 6125:    if (GTEST_FLAG(break_on_failure)) {
        1: 6125-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6126:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 6127:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 6128:      // when a failure happens and both the --gtest_break_on_failure and
        -: 6129:      // the --gtest_catch_exceptions flags are specified.
        -: 6130:      DebugBreak();
        -: 6131:#elif (!defined(__native_client__)) &&            \
        -: 6132:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 6133:     (defined(__x86_64__) || defined(__i386__)))
        -: 6134:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 6135:      asm("int3");
    %%%%%: 6135-block  0
call    0 never executed
        -: 6136:#else
        -: 6137:      // Dereference NULL through a volatile pointer to prevent the compiler
        -: 6138:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 6139:      // portability: Symbian doesn't implement abort() well, and some debuggers
        -: 6140:      // don't correctly trap abort().
        -: 6141:      *static_cast<volatile int*>(NULL) = 1;
        -: 6142:#endif  // GTEST_OS_WINDOWS
        1: 6143:    } else if (GTEST_FLAG(throw_on_failure)) {
        1: 6143-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6144:#if GTEST_HAS_EXCEPTIONS
    #####: 6145:      throw internal::GoogleTestFailureException(result);
    %%%%%: 6145-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6145-block  1
call    4 never executed
    $$$$$: 6145-block  2
call    5 never executed
        -: 6146:#else
        -: 6147:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 6148:      // that cannot be suppressed in VC 7.1 or below.
        -: 6149:      exit(1);
        -: 6150:#endif
        -: 6151:    }
        -: 6152:  }
        1: 6153:}
        -: 6154:
        -: 6155:// Adds a TestProperty to the current TestResult object when invoked from
        -: 6156:// inside a test, to current TestCase's ad_hoc_test_result_ when invoked
        -: 6157:// from SetUpTestCase or TearDownTestCase, or to the global property set
        -: 6158:// when invoked elsewhere.  If the result already contains a property with
        -: 6159:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 6160:void UnitTest::RecordProperty(const std::string& key,
        -: 6161:                              const std::string& value) {
    #####: 6162:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 6162-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6162-block  1
call    4 never executed
    $$$$$: 6162-block  2
call    5 never executed
    #####: 6163:}
        -: 6164:
        -: 6165:// Runs all tests in this UnitTest object and prints the result.
        -: 6166:// Returns 0 if successful, or 1 otherwise.
        -: 6167://
        -: 6168:// We don't protect this under mutex_, as we only support calling it
        -: 6169:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 6170:int UnitTest::Run() {
        -: 6171:  const bool in_death_test_child_process =
        1: 6172:      internal::GTEST_FLAG(internal_run_death_test).length() > 0;
        1: 6172-block  0
call    0 returned 1
        -: 6173:
        -: 6174:  // Google Test implements this protocol for catching that a test
        -: 6175:  // program exits before returning control to Google Test:
        -: 6176:  //
        -: 6177:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 6178:  //      is specified by the environment variable
        -: 6179:  //      TEST_PREMATURE_EXIT_FILE.
        -: 6180:  //   2. When Google Test has finished its work, it deletes the file.
        -: 6181:  //
        -: 6182:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 6183:  // running a Google-Test-based test program and check the existence
        -: 6184:  // of the file at the end of the test execution to see if it has
        -: 6185:  // exited prematurely.
        -: 6186:
        -: 6187:  // If we are in the child process of a death test, don't
        -: 6188:  // create/delete the premature exit file, as doing so is unnecessary
        -: 6189:  // and will confuse the parent process.  Otherwise, create/delete
        -: 6190:  // the file upon entering/leaving this function.  If the program
        -: 6191:  // somehow exits before this function has a chance to return, the
        -: 6192:  // premature-exit file will be left undeleted, causing a test runner
        -: 6193:  // that understands the premature-exit-file protocol to report the
        -: 6194:  // test as having failed.
        -: 6195:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 6196:      in_death_test_child_process ?
       1*: 6197:      NULL : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6197-block  0
        1: 6197-block  1
call    2 returned 1
        1: 6197-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 6197-block  3
call    6 never executed
        -: 6198:
        -: 6199:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 6200:  // used for the duration of the program.
        1: 6201:  impl()->set_catch_exceptions(GTEST_FLAG(catch_exceptions));
        1: 6201-block  0
call    0 returned 1
call    1 returned 1
        -: 6202:
        -: 6203:#if GTEST_OS_WINDOWS
        -: 6204:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 6205:  // tests or this is executing in the context of death test child
        -: 6206:  // process. In either case the user does not want to see pop-up dialogs
        -: 6207:  // about crashes - they are expected.
        -: 6208:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 6209:# if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 6210:    // SetErrorMode doesn't exist on CE.
        -: 6211:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 6212:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 6213:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 6214:
        -: 6215:# if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 6216:    // Death test children can be terminated with _abort().  On Windows,
        -: 6217:    // _abort() can show a dialog with a warning message.  This forces the
        -: 6218:    // abort message to go to stderr instead.
        -: 6219:    _set_error_mode(_OUT_TO_STDERR);
        -: 6220:# endif
        -: 6221:
        -: 6222:# if _MSC_VER >= 1400 && !GTEST_OS_WINDOWS_MOBILE
        -: 6223:    // In the debug version, Visual Studio pops up a separate dialog
        -: 6224:    // offering a choice to debug the aborted program. We need to suppress
        -: 6225:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 6226:    // executed. Google Test will notify the user of any unexpected
        -: 6227:    // failure via stderr.
        -: 6228:    //
        -: 6229:    // VC++ doesn't define _set_abort_behavior() prior to the version 8.0.
        -: 6230:    // Users of prior VC versions shall suffer the agony and pain of
        -: 6231:    // clicking through the countless debug dialogs.
        -: 6232:    // FIXME: find a way to suppress the abort dialog() in the
        -: 6233:    // debug mode when compiled with VC 7.1 or lower.
        -: 6234:    if (!GTEST_FLAG(break_on_failure))
        -: 6235:      _set_abort_behavior(
        -: 6236:          0x0,                                    // Clear the following flags:
        -: 6237:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 6238:# endif
        -: 6239:  }
        -: 6240:#endif  // GTEST_OS_WINDOWS
        -: 6241:
        1: 6242:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 6243:      impl(),
        -: 6244:      &internal::UnitTestImpl::RunAllTests,
       2*: 6245:      "auxiliary test code (environments or event listeners)") ? 0 : 1;
        1: 6245-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6245-block  1
        1: 6245-block  2
        1: 6245-block  3
call    2 returned 1
        1: 6245-block  4
        -: 6246:}
        -: 6247:
        -: 6248:// Returns the working directory when the first TEST() or TEST_F() was
        -: 6249:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 6250:const char* UnitTest::original_working_dir() const {
    #####: 6251:  return impl_->original_working_dir_.c_str();
    %%%%%: 6251-block  0
call    0 never executed
        -: 6252:}
        -: 6253:
        -: 6254:// Returns the TestCase object for the test that's currently running,
        -: 6255:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 6256:const TestCase* UnitTest::current_test_case() const
        -: 6257:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 6258:  internal::MutexLock lock(&mutex_);
    %%%%%: 6258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6259:  return impl_->current_test_case();
    %%%%%: 6259-block  0
call    0 never executed
    %%%%%: 6259-block  1
        -: 6260:}
        -: 6261:
        -: 6262:// Returns the TestInfo object for the test that's currently running,
        -: 6263:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 6264:const TestInfo* UnitTest::current_test_info() const
        -: 6265:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 6266:  internal::MutexLock lock(&mutex_);
    %%%%%: 6266-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6267:  return impl_->current_test_info();
    %%%%%: 6267-block  0
call    0 never executed
    %%%%%: 6267-block  1
        -: 6268:}
        -: 6269:
        -: 6270:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 6271:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 6271-block  0
call    0 never executed
        -: 6272:
        -: 6273:// Returns ParameterizedTestCaseRegistry object used to keep track of
        -: 6274:// value-parameterized tests and instantiate and register them.
        -: 6275:internal::ParameterizedTestCaseRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 6276:    UnitTest::parameterized_test_registry()
        -: 6277:        GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 6278:  return impl_->parameterized_test_registry();
    %%%%%: 6278-block  0
call    0 never executed
        -: 6279:}
        -: 6280:
        -: 6281:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 63%
        1: 6282:UnitTest::UnitTest() {
        1: 6282-block  0
call    0 returned 1
    $$$$$: 6282-block  1
call    1 never executed
        1: 6283:  impl_ = new internal::UnitTestImpl(this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6283-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 6283-block  1
call    6 never executed
        1: 6284:}
        1: 6284-block  0
        -: 6285:
        -: 6286:// Destructor of UnitTest.
       1*: 6287:UnitTest::~UnitTest() {
        1: 6288:  delete impl_;
       1*: 6289:}
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 6287:UnitTest::~UnitTest() {
        -: 6288:  delete impl_;
    #####: 6289:}
    %%%%%: 6289-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 1 returned 100% blocks executed 100%
        1: 6287:UnitTest::~UnitTest() {
        1: 6287-block  0
call    0 returned 1
        1: 6288:  delete impl_;
        1: 6288-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6288-block  1
call    2 returned 1
        1: 6289:}
------------------
        -: 6290:
        -: 6291:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 6292:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 6293:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 6294:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 6295:  internal::MutexLock lock(&mutex_);
    %%%%%: 6295-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6295-block  1
call    3 never executed
    $$$$$: 6295-block  2
call    4 never executed
    #####: 6296:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 6296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6296-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6297:}
        -: 6298:
        -: 6299:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 6300:void UnitTest::PopGTestTrace()
        -: 6301:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 6302:  internal::MutexLock lock(&mutex_);
    %%%%%: 6302-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6302-block  1
call    4 never executed
    #####: 6303:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 6303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6303-block  1
call    3 never executed
    #####: 6304:}
        -: 6305:
        -: 6306:namespace internal {
        -: 6307:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 45%
        1: 6308:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        -: 6309:    : parent_(parent),
        -: 6310:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 6311:      default_global_test_part_result_reporter_(this),
        -: 6312:      default_per_thread_test_part_result_reporter_(this),
        -: 6313:      GTEST_DISABLE_MSC_WARNINGS_POP_()
        -: 6314:      global_test_part_result_repoter_(
        -: 6315:          &default_global_test_part_result_reporter_),
        -: 6316:      per_thread_test_part_result_reporter_(
        -: 6317:          &default_per_thread_test_part_result_reporter_),
        -: 6318:      parameterized_test_registry_(),
        -: 6319:      parameterized_tests_registered_(false),
        -: 6320:      last_death_test_case_(-1),
        -: 6321:      current_test_case_(NULL),
        -: 6322:      current_test_info_(NULL),
        -: 6323:      ad_hoc_test_result_(),
        -: 6324:      os_stack_trace_getter_(NULL),
        -: 6325:      post_flag_parse_init_performed_(false),
        -: 6326:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 6327:      random_(0),  // Will be reseeded before first use.
        -: 6328:      start_timestamp_(0),
        -: 6329:      elapsed_time_(0),
        -: 6330:#if GTEST_HAS_DEATH_TEST
        1: 6331:      death_test_factory_(new DefaultDeathTestFactory),
        1: 6331-block  0
call    0 returned 1
        -: 6332:#endif
        -: 6333:      // Will be overridden by the flag before first use.
        2: 6334:      catch_exceptions_(false) {
        1: 6334-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6334-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 6334-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1: 6334-block  3
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1: 6334-block  4
call   19 returned 1
call   20 returned 1
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
call   24 returned 1
call   25 returned 1
branch 26 taken 1 (fallthrough)
branch 27 taken 0 (throw)
    $$$$$: 6334-block  5
    $$$$$: 6334-block  6
call   28 never executed
    $$$$$: 6334-block  7
call   29 never executed
    $$$$$: 6334-block  8
call   30 never executed
    $$$$$: 6334-block  9
call   31 never executed
    $$$$$: 6334-block 10
call   32 never executed
    $$$$$: 6334-block 11
call   33 never executed
    $$$$$: 6334-block 12
call   34 never executed
    $$$$$: 6334-block 13
call   35 never executed
    $$$$$: 6334-block 14
call   36 never executed
    $$$$$: 6334-block 15
call   37 never executed
    $$$$$: 6334-block 16
call   38 never executed
    $$$$$: 6334-block 17
call   39 never executed
    $$$$$: 6334-block 18
call   40 never executed
    $$$$$: 6334-block 19
call   41 never executed
        1: 6335:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 6335-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6335-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 6336:}
        1: 6336-block  0
        -: 6337:
        2: 6338:UnitTestImpl::~UnitTestImpl() {
        -: 6339:  // Deletes every TestCase.
        1: 6340:  ForEach(test_cases_, internal::Delete<TestCase>);
        -: 6341:
        -: 6342:  // Deletes every Environment.
        1: 6343:  ForEach(environments_, internal::Delete<Environment>);
        -: 6344:
        1: 6345:  delete os_stack_trace_getter_;
        2: 6346:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 1 returned 100% blocks executed 100%
        1: 6338:UnitTestImpl::~UnitTestImpl() {
        -: 6339:  // Deletes every TestCase.
        -: 6340:  ForEach(test_cases_, internal::Delete<TestCase>);
        -: 6341:
        -: 6342:  // Deletes every Environment.
        -: 6343:  ForEach(environments_, internal::Delete<Environment>);
        -: 6344:
        -: 6345:  delete os_stack_trace_getter_;
        1: 6346:}
        1: 6346-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 1 returned 100% blocks executed 100%
        1: 6338:UnitTestImpl::~UnitTestImpl() {
        1: 6338-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
        -: 6339:  // Deletes every TestCase.
        1: 6340:  ForEach(test_cases_, internal::Delete<TestCase>);
        1: 6340-block  0
call    0 returned 1
        -: 6341:
        -: 6342:  // Deletes every Environment.
        1: 6343:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 1
        -: 6344:
        1: 6345:  delete os_stack_trace_getter_;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6345-block  0
call    2 returned 1
        1: 6346:}
------------------
        -: 6347:
        -: 6348:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 6349:// context of a test, to current test case's ad_hoc_test_result when invoke
        -: 6350:// from SetUpTestCase/TearDownTestCase, or to the global property set
        -: 6351:// otherwise.  If the result already contains a property with the same key,
        -: 6352:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 6353:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 6354:  std::string xml_element;
    %%%%%: 6354-block  0
call    0 never executed
    %%%%%: 6354-block  1
call    1 never executed
    $$$$$: 6354-block  2
call    2 never executed
        -: 6355:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 6356:
    #####: 6357:  if (current_test_info_ != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 6358:    xml_element = "testcase";
    %%%%%: 6358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6359:    test_result = &(current_test_info_->result_);
    %%%%%: 6359-block  0
    #####: 6360:  } else if (current_test_case_ != NULL) {
    %%%%%: 6360-block  0
branch  0 never executed
branch  1 never executed
    #####: 6361:    xml_element = "testsuite";
    %%%%%: 6361-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6362:    test_result = &(current_test_case_->ad_hoc_test_result_);
    %%%%%: 6362-block  0
        -: 6363:  } else {
    #####: 6364:    xml_element = "testsuites";
    %%%%%: 6364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6365:    test_result = &ad_hoc_test_result_;
    %%%%%: 6365-block  0
        -: 6366:  }
    #####: 6367:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 6367-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6368:}
        -: 6369:
        -: 6370:#if GTEST_HAS_DEATH_TEST
        -: 6371:// Disables event forwarding if the control is currently in a death test
        -: 6372:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 6373:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 6374:  if (internal_run_death_test_flag_.get() != NULL)
        1: 6374-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6375:    listeners()->SuppressEventForwarding();
    %%%%%: 6375-block  0
call    0 never executed
call    1 never executed
        1: 6376:}
        -: 6377:#endif  // GTEST_HAS_DEATH_TEST
        -: 6378:
        -: 6379:// Initializes event listeners performing XML output as specified by
        -: 6380:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 6381:void UnitTestImpl::ConfigureXmlOutput() {
        2: 6382:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 6382-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6382-block  1
call    3 returned 1
    $$$$$: 6382-block  2
call    4 never executed
        1: 6383:  if (output_format == "xml") {
        1: 6383-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6384:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 6384-block  0
call    0 never executed
    %%%%%: 6384-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6385:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6385-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6385-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6385-block  2
call   10 never executed
    $$$$$: 6385-block  3
call   11 never executed
    $$$$$: 6385-block  4
call   12 never executed
    $$$$$: 6385-block  5
        1: 6386:  } else if (output_format == "json") {
        1: 6386-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6387:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 6387-block  0
call    0 never executed
    %%%%%: 6387-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6388:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6388-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6388-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6388-block  2
call   10 never executed
    $$$$$: 6388-block  3
call   11 never executed
    $$$$$: 6388-block  4
call   12 never executed
    $$$$$: 6388-block  5
        1: 6389:  } else if (output_format != "") {
        1: 6389-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6389-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 6390:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 6390-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6390-block  1
call    3 never executed
    %%%%%: 6390-block  2
call    4 never executed
    $$$$$: 6390-block  3
call    5 never executed
    $$$$$: 6390-block  4
    #####: 6391:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6391-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6391-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6392:  }
        1: 6393:}
        -: 6394:
        -: 6395:#if GTEST_CAN_STREAM_RESULTS_
        -: 6396:// Initializes event listeners for streaming test results in string form.
        -: 6397:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 1 returned 100% blocks executed 12%
        1: 6398:void UnitTestImpl::ConfigureStreamingOutput() {
        1: 6399:  const std::string& target = GTEST_FLAG(stream_result_to);
        1: 6400:  if (!target.empty()) {
        1: 6400-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6401:    const size_t pos = target.find(':');
    %%%%%: 6401-block  0
call    0 never executed
    #####: 6402:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 6403:      listeners()->Append(new StreamingListener(target.substr(0, pos),
    %%%%%: 6403-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6403-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 6403-block  2
call    5 never executed
    $$$$$: 6403-block  3
call    6 never executed
    #####: 6404:                                                target.substr(pos+1)));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6404-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6404-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6404-block  2
call    9 never executed
call   10 never executed
    $$$$$: 6404-block  3
call   11 never executed
    $$$$$: 6404-block  4
call   12 never executed
    $$$$$: 6404-block  5
        -: 6405:    } else {
    #####: 6406:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 6406-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6406-block  1
call    2 never executed
    $$$$$: 6406-block  2
call    3 never executed
    #####: 6407:                          << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6407-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6407-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6408:    }
        -: 6409:  }
        1: 6410:}
        1: 6410-block  0
        -: 6411:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6412:
        -: 6413:// Performs initialization dependent upon flag values obtained in
        -: 6414:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 6415:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 6416:// this function is also called from RunAllTests.  Since this function can be
        -: 6417:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 100%
        2: 6418:void UnitTestImpl::PostFlagParsingInit() {
        -: 6419:  // Ensures that this function does not execute more than once.
        2: 6420:  if (!post_flag_parse_init_performed_) {
        2: 6420-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 6421:    post_flag_parse_init_performed_ = true;
        -: 6422:
        -: 6423:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 6424:    // Register to send notifications about key process state changes.
        -: 6425:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 6426:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 6427:
        -: 6428:#if GTEST_HAS_DEATH_TEST
        1: 6429:    InitDeathTestSubprocessControlInfo();
        1: 6429-block  0
call    0 returned 1
        1: 6430:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 6431:#endif  // GTEST_HAS_DEATH_TEST
        -: 6432:
        -: 6433:    // Registers parameterized tests. This makes parameterized tests
        -: 6434:    // available to the UnitTest reflection API without running
        -: 6435:    // RUN_ALL_TESTS.
        1: 6436:    RegisterParameterizedTests();
call    0 returned 1
        -: 6437:
        -: 6438:    // Configures listeners for XML output. This makes it possible for users
        -: 6439:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 6440:    ConfigureXmlOutput();
call    0 returned 1
        -: 6441:
        -: 6442:#if GTEST_CAN_STREAM_RESULTS_
        -: 6443:    // Configures listeners for streaming test results to the specified server.
        1: 6444:    ConfigureStreamingOutput();
call    0 returned 1
        -: 6445:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6446:
        -: 6447:#if GTEST_HAS_ABSL
        -: 6448:    if (GTEST_FLAG(install_failure_signal_handler)) {
        -: 6449:      absl::FailureSignalHandlerOptions options;
        -: 6450:      absl::InstallFailureSignalHandler(options);
        -: 6451:    }
        -: 6452:#endif  // GTEST_HAS_ABSL
        -: 6453:  }
        2: 6454:}
        -: 6455:
        -: 6456:// A predicate that checks the name of a TestCase against a known
        -: 6457:// value.
        -: 6458://
        -: 6459:// This is used for implementation of the UnitTest class only.  We put
        -: 6460:// it in the anonymous namespace to prevent polluting the outer
        -: 6461:// namespace.
        -: 6462://
        -: 6463:// TestCaseNameIs is copyable.
        -: 6464:class TestCaseNameIs {
        -: 6465: public:
        -: 6466:  // Constructor.
function _ZN7testing8internal14TestCaseNameIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 10 returned 100% blocks executed 100%
       10: 6467:  explicit TestCaseNameIs(const std::string& name)
       10: 6468:      : name_(name) {}
       10: 6468-block  0
call    0 returned 10
        -: 6469:
        -: 6470:  // Returns true iff the name of test_case matches name_.
function _ZNK7testing8internal14TestCaseNameIsclEPKNS_8TestCaseE called 9 returned 100% blocks executed 100%
        9: 6471:  bool operator()(const TestCase* test_case) const {
        9: 6472:    return test_case != NULL && strcmp(test_case->name(), name_.c_str()) == 0;
        9: 6472-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9: 6472-block  1
call    2 returned 9
call    3 returned 9
branch  4 taken 8 (fallthrough)
branch  5 taken 1
        8: 6472-block  2
        1: 6472-block  3
        9: 6472-block  4
        -: 6473:  }
        -: 6474:
        -: 6475: private:
        -: 6476:  std::string name_;
        -: 6477:};
        -: 6478:
        -: 6479:// Finds and returns a TestCase with the given name.  If one doesn't
        -: 6480:// exist, creates one and returns it.  It's the CALLER'S
        -: 6481:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 6482:// TESTS ARE NOT SHUFFLED.
        -: 6483://
        -: 6484:// Arguments:
        -: 6485://
        -: 6486://   test_case_name: name of the test case
        -: 6487://   type_param:     the name of the test case's type parameter, or NULL if
        -: 6488://                   this is not a typed or a type-parameterized test case.
        -: 6489://   set_up_tc:      pointer to the function that sets up the test case
        -: 6490://   tear_down_tc:   pointer to the function that tears down the test case
function _ZN7testing8internal12UnitTestImpl11GetTestCaseEPKcS3_PFvvES5_ called 10 returned 100% blocks executed 50%
       10: 6491:TestCase* UnitTestImpl::GetTestCase(const char* test_case_name,
        -: 6492:                                    const char* type_param,
        -: 6493:                                    Test::SetUpTestCaseFunc set_up_tc,
        -: 6494:                                    Test::TearDownTestCaseFunc tear_down_tc) {
        -: 6495:  // Can we find a TestCase with the given name?
        -: 6496:  const std::vector<TestCase*>::const_reverse_iterator test_case =
       10: 6497:      std::find_if(test_cases_.rbegin(), test_cases_.rend(),
       10: 6497-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 6497-block  1
    $$$$$: 6497-block  2
    $$$$$: 6497-block  3
       20: 6498:                   TestCaseNameIs(test_case_name));
       10: 6498-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 6498-block  1
call    4 returned 10
branch  5 taken 10 (fallthrough)
branch  6 taken 0 (throw)
       10: 6498-block  2
call    7 returned 10
branch  8 taken 10 (fallthrough)
branch  9 taken 0 (throw)
       10: 6498-block  3
call   10 returned 10
call   11 returned 10
call   12 returned 10
    $$$$$: 6498-block  4
call   13 never executed
    $$$$$: 6498-block  5
    $$$$$: 6498-block  6
call   14 never executed
    $$$$$: 6498-block  7
    $$$$$: 6498-block  8
call   15 never executed
    $$$$$: 6498-block  9
        -: 6499:
       10: 6500:  if (test_case != test_cases_.rend())
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 6500-block  0
branch  4 taken 8 (fallthrough)
branch  5 taken 2
    $$$$$: 6500-block  1
        8: 6501:    return *test_case;
        8: 6501-block  0
call    0 returned 8
        -: 6502:
        -: 6503:  // No.  Let's create one.
        -: 6504:  TestCase* const new_test_case =
        2: 6505:      new TestCase(test_case_name, type_param, set_up_tc, tear_down_tc);
        2: 6505-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6505-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 6505-block  2
call    6 never executed
        -: 6506:
        -: 6507:  // Is this a death test case?
        2: 6508:  if (internal::UnitTestOptions::MatchesFilter(test_case_name,
        2: 6508-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6508-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2: 6508-block  2
call    7 returned 2
call    8 returned 2
branch  9 taken 0 (fallthrough)
branch 10 taken 2
    $$$$$: 6508-block  3
call   11 never executed
    $$$$$: 6508-block  4
    $$$$$: 6508-block  5
call   12 never executed
    $$$$$: 6508-block  6
        -: 6509:                                               kDeathTestCaseFilter)) {
        -: 6510:    // Yes.  Inserts the test case after the last death test case
        -: 6511:    // defined so far.  This only works when the test cases haven't
        -: 6512:    // been shuffled.  Otherwise we may end up running a death test
        -: 6513:    // after a non-death test.
    #####: 6514:    ++last_death_test_case_;
    #####: 6515:    test_cases_.insert(test_cases_.begin() + last_death_test_case_,
call    0 never executed
    $$$$$: 6515-block  0
    $$$$$: 6515-block  1
    #####: 6516:                       new_test_case);
    %%%%%: 6516-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6516-block  1
    $$$$$: 6516-block  2
        -: 6517:  } else {
        -: 6518:    // No.  Appends to the end of the list.
        2: 6519:    test_cases_.push_back(new_test_case);
        2: 6519-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6520:  }
        -: 6521:
        2: 6522:  test_case_indices_.push_back(static_cast<int>(test_case_indices_.size()));
        2: 6522-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 6522-block  1
        2: 6523:  return new_test_case;
        2: 6523-block  0
        -: 6524:}
        -: 6525:
        -: 6526:// Helpers for setting up / tearing down the given environment.  They
        -: 6527:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 6528:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 6528-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 6529:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 6529-block  0
call    0 never executed
        -: 6530:
        -: 6531:// Runs all tests in this UnitTest object, prints the result, and
        -: 6532:// returns true if all tests are successful.  If any exception is
        -: 6533:// thrown during a test, the test is considered to be failed, but the
        -: 6534:// rest of the tests will still be run.
        -: 6535://
        -: 6536:// When parameterized tests are enabled, it expands and registers
        -: 6537:// parameterized tests first in RegisterParameterizedTests().
        -: 6538:// All other functions called from RunAllTests() may safely assume that
        -: 6539:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 80%
        1: 6540:bool UnitTestImpl::RunAllTests() {
        -: 6541:  // True iff Google Test is initialized before RUN_ALL_TESTS() is called.
        1: 6542:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 6542-block  0
call    0 returned 1
        -: 6543:
        -: 6544:  // Do not run any test if the --help flag was specified.
        1: 6545:  if (g_help_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6546:    return true;
    %%%%%: 6546-block  0
        -: 6547:
        -: 6548:  // Repeats the call to the post-flag parsing initialization in case the
        -: 6549:  // user didn't call InitGoogleTest.
        1: 6550:  PostFlagParsingInit();
        1: 6550-block  0
call    0 returned 1
        -: 6551:
        -: 6552:  // Even if sharding is not on, test runners may want to use the
        -: 6553:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 6554:  // protocol.
        1: 6555:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 6556:
        -: 6557:  // True iff we are in a subprocess for running a thread-safe-style
        -: 6558:  // death test.
        1: 6559:  bool in_subprocess_for_death_test = false;
        -: 6560:
        -: 6561:#if GTEST_HAS_DEATH_TEST
        1: 6562:  in_subprocess_for_death_test = (internal_run_death_test_flag_.get() != NULL);
call    0 returned 1
        -: 6563:# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 6564:  if (in_subprocess_for_death_test) {
        -: 6565:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 6566:  }
        -: 6567:# endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 6568:#endif  // GTEST_HAS_DEATH_TEST
        -: 6569:
        1: 6570:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 6571:                                        in_subprocess_for_death_test);
        -: 6572:
        -: 6573:  // Compares the full test names with the filter to decide which
        -: 6574:  // tests to run.
       1*: 6575:  const bool has_tests_to_run = FilterTests(should_shard
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6575-block  0
        1: 6575-block  1
        1: 6575-block  2
call    2 returned 1
        -: 6576:                                              ? HONOR_SHARDING_PROTOCOL
        1: 6577:                                              : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 6578:
        -: 6579:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 6580:  if (GTEST_FLAG(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6581:    // This must be called *after* FilterTests() has been called.
    #####: 6582:    ListTestsMatchingFilter();
    %%%%%: 6582-block  0
call    0 never executed
    #####: 6583:    return true;
        -: 6584:  }
        -: 6585:
        1: 6586:  random_seed_ = GTEST_FLAG(shuffle) ?
        1: 6586-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6586-block  1
    #####: 6587:      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;
    %%%%%: 6587-block  0
call    0 never executed
        -: 6588:
        -: 6589:  // True iff at least one test has failed.
        1: 6590:  bool failed = false;
        -: 6591:
        1: 6592:  TestEventListener* repeater = listeners()->repeater();
        1: 6592-block  0
call    0 returned 1
call    1 returned 1
        -: 6593:
        1: 6594:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 6595:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 6596:
        -: 6597:  // How many times to repeat the tests?  We don't want to repeat them
        -: 6598:  // when we are inside the subprocess of a death test.
       1*: 6599:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6599-block  0
        1: 6599-block  1
        -: 6600:  // Repeats forever if the repeat count is negative.
        1: 6601:  const bool forever = repeat < 0;
        2: 6602:  for (int i = 0; forever || i != repeat; i++) {
        1: 6602-block  0
        2: 6602-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6602-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 6602-block  3
        -: 6603:    // We want to preserve failures generated by ad-hoc test
        -: 6604:    // assertions executed before RUN_ALL_TESTS().
        1: 6605:    ClearNonAdHocTestResult();
        1: 6605-block  0
call    0 returned 1
        -: 6606:
        1: 6607:    const TimeInMillis start = GetTimeInMillis();
call    0 returned 1
        -: 6608:
        -: 6609:    // Shuffles test cases and tests if requested.
        1: 6610:    if (has_tests_to_run && GTEST_FLAG(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6610-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 6611:      random()->Reseed(random_seed_);
    %%%%%: 6611-block  0
call    0 never executed
call    1 never executed
        -: 6612:      // This should be done before calling OnTestIterationStart(),
        -: 6613:      // such that a test event listener can see the actual test order
        -: 6614:      // in the event.
    #####: 6615:      ShuffleTests();
call    0 never executed
        -: 6616:    }
        -: 6617:
        -: 6618:    // Tells the unit test event listeners that the tests are about to start.
        1: 6619:    repeater->OnTestIterationStart(*parent_, i);
        1: 6619-block  0
call    0 returned 1
        -: 6620:
        -: 6621:    // Runs each test case if there is at least one test to run.
        1: 6622:    if (has_tests_to_run) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6623:      // Sets up all environments beforehand.
        1: 6624:      repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 6624-block  0
call    0 returned 1
        1: 6625:      ForEach(environments_, SetUpEnvironment);
call    0 returned 1
        1: 6626:      repeater->OnEnvironmentsSetUpEnd(*parent_);
call    0 returned 1
        -: 6627:
        -: 6628:      // Runs the tests only if there was no fatal failure during global
        -: 6629:      // set-up.
        1: 6630:      if (!Test::HasFatalFailure()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        3: 6631:        for (int test_index = 0; test_index < total_test_case_count();
        1: 6631-block  0
        3: 6631-block  1
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        -: 6632:             test_index++) {
        2: 6633:          GetMutableTestCase(test_index)->Run();
        2: 6633-block  0
call    0 returned 2
call    1 returned 2
        -: 6634:        }
        -: 6635:      }
        -: 6636:
        -: 6637:      // Tears down all environments in reverse order afterwards.
        1: 6638:      repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 6638-block  0
call    0 returned 1
        1: 6639:      std::for_each(environments_.rbegin(), environments_.rend(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 6639-block  0
        -: 6640:                    TearDownEnvironment);
        1: 6641:      repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 6641-block  0
call    0 returned 1
        -: 6642:    }
        -: 6643:
        1: 6644:    elapsed_time_ = GetTimeInMillis() - start;
        1: 6644-block  0
call    0 returned 1
        -: 6645:
        -: 6646:    // Tells the unit test event listener that the tests have just finished.
        1: 6647:    repeater->OnTestIterationEnd(*parent_, i);
call    0 returned 1
        -: 6648:
        -: 6649:    // Gets the result and clears it.
        1: 6650:    if (!Passed()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 6651:      failed = true;
        1: 6651-block  0
        -: 6652:    }
        -: 6653:
        -: 6654:    // Restores the original test order after the iteration.  This
        -: 6655:    // allows the user to quickly repro a failure that happens in the
        -: 6656:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 6657:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 6658:    // case the user somehow changes the value of the flag somewhere
        -: 6659:    // (it's always safe to unshuffle the tests).
        1: 6660:    UnshuffleTests();
        1: 6660-block  0
call    0 returned 1
        -: 6661:
        1: 6662:    if (GTEST_FLAG(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6663:      // Picks a new random seed for each iteration.
    #####: 6664:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 6664-block  0
call    0 never executed
        -: 6665:    }
        -: 6666:  }
        -: 6667:
        1: 6668:  repeater->OnTestProgramEnd(*parent_);
        1: 6668-block  0
call    0 returned 1
        -: 6669:
        1: 6670:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6671:    ColoredPrintf(
    %%%%%: 6671-block  0
call    0 never executed
        -: 6672:        COLOR_RED,
        -: 6673:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 6674:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 6675:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 6676:        " will start to enforce the valid usage. "
        -: 6677:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 6678:#if GTEST_FOR_GOOGLE_
        -: 6679:    ColoredPrintf(COLOR_RED,
        -: 6680:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 6681:#endif  // GTEST_FOR_GOOGLE_
        -: 6682:  }
        -: 6683:
        1: 6684:  return !failed;
        1: 6684-block  0
        -: 6685:}
        -: 6686:
        -: 6687:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 6688:// if the variable is present. If a file already exists at this location, this
        -: 6689:// function will write over it. If the variable is present, but the file cannot
        -: 6690:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 6691:void WriteToShardStatusFileIfNeeded() {
        1: 6692:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 6692-block  0
call    0 returned 1
        1: 6693:  if (test_shard_file != NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6694:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 6694-block  0
call    0 never executed
    #####: 6695:    if (file == NULL) {
branch  0 never executed
branch  1 never executed
    #####: 6696:      ColoredPrintf(COLOR_RED,
    %%%%%: 6696-block  0
call    0 never executed
        -: 6697:                    "Could not write to the test shard status file \"%s\" "
        -: 6698:                    "specified by the %s environment variable.\n",
        -: 6699:                    test_shard_file, kTestShardStatusFile);
    #####: 6700:      fflush(stdout);
call    0 never executed
    #####: 6701:      exit(EXIT_FAILURE);
call    0 never executed
        -: 6702:    }
    #####: 6703:    fclose(file);
    %%%%%: 6703-block  0
call    0 never executed
        -: 6704:  }
        1: 6705:}
        -: 6706:
        -: 6707:// Checks whether sharding is enabled by examining the relevant
        -: 6708:// environment variable values. If the variables are present,
        -: 6709:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 6710:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6711:// disabled because it must only be applied to the original test
        -: 6712:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 6713:bool ShouldShard(const char* total_shards_env,
        -: 6714:                 const char* shard_index_env,
        -: 6715:                 bool in_subprocess_for_death_test) {
        2: 6716:  if (in_subprocess_for_death_test) {
        2: 6716-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6717:    return false;
    %%%%%: 6717-block  0
        -: 6718:  }
        -: 6719:
        2: 6720:  const Int32 total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6720-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6721:  const Int32 shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6721-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6722:
        2: 6723:  if (total_shards == -1 && shard_index == -1) {
        2: 6723-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6723-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6724:    return false;
        2: 6724-block  0
    #####: 6725:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6725-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6725-block  1
branch  2 never executed
branch  3 never executed
    #####: 6726:    const Message msg = Message()
    %%%%%: 6726-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6726-block  1
    #####: 6727:      << "Invalid environment variables: you have "
    %%%%%: 6727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6728:      << kTestShardIndex << " = " << shard_index
    %%%%%: 6728-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6728-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6728-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6729:      << ", but have left " << kTestTotalShards << " unset.\n";
    %%%%%: 6729-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6729-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6729-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6729-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 6729-block  4
call   12 never executed
    #####: 6730:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6730-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6730-block  1
call    7 never executed
    $$$$$: 6730-block  2
call    8 never executed
    $$$$$: 6730-block  3
    #####: 6731:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6732:    exit(EXIT_FAILURE);
    %%%%%: 6732-block  0
call    0 never executed
    #####: 6733:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6733-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6733-block  1
branch  2 never executed
branch  3 never executed
    #####: 6734:    const Message msg = Message()
    %%%%%: 6734-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6734-block  1
    #####: 6735:      << "Invalid environment variables: you have "
    %%%%%: 6735-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6736:      << kTestTotalShards << " = " << total_shards
    %%%%%: 6736-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6736-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6736-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6737:      << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6737-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6737-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6737-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 6737-block  4
call   12 never executed
    #####: 6738:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6738-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6738-block  1
call    7 never executed
    $$$$$: 6738-block  2
call    8 never executed
    $$$$$: 6738-block  3
    #####: 6739:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6740:    exit(EXIT_FAILURE);
    %%%%%: 6740-block  0
call    0 never executed
    #####: 6741:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6741-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6741-block  1
branch  2 never executed
branch  3 never executed
    #####: 6742:    const Message msg = Message()
    %%%%%: 6742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 6742-block  1
    #####: 6743:      << "Invalid environment variables: we require 0 <= "
    %%%%%: 6743-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6744:      << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6744-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6744-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6744-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6745:      << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6745-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6745-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6745-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6745-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6746:      << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6746-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6746-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6746-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 6746-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 6746-block  6
call   18 never executed
    #####: 6747:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6747-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6747-block  1
call    7 never executed
    $$$$$: 6747-block  2
call    8 never executed
    $$$$$: 6747-block  3
    #####: 6748:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6749:    exit(EXIT_FAILURE);
    %%%%%: 6749-block  0
call    0 never executed
        -: 6750:  }
        -: 6751:
    #####: 6752:  return total_shards > 1;
    %%%%%: 6752-block  0
        -: 6753:}
        -: 6754:
        -: 6755:// Parses the environment variable var as an Int32. If it is unset,
        -: 6756:// returns default_val. If it is not an Int32, prints an error
        -: 6757:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6758:Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {
        4: 6759:  const char* str_val = posix::GetEnv(var);
        4: 6759-block  0
call    0 returned 4
        4: 6760:  if (str_val == NULL) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6761:    return default_val;
        4: 6761-block  0
        -: 6762:  }
        -: 6763:
        -: 6764:  Int32 result;
    #####: 6765:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6765-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6765-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6765-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6765-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6765-block  5
call   15 never executed
    $$$$$: 6765-block  6
        -: 6766:                  str_val, &result)) {
    #####: 6767:    exit(EXIT_FAILURE);
    %%%%%: 6767-block  0
call    0 never executed
        -: 6768:  }
    #####: 6769:  return result;
    %%%%%: 6769-block  0
        -: 6770:}
        -: 6771:
        -: 6772:// Given the total number of shards, the shard index, and the test id,
        -: 6773:// returns true iff the test should be run on this shard. The test id is
        -: 6774:// some arbitrary but unique non-negative integer assigned to each test
        -: 6775:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6776:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6777:  return (test_id % total_shards) == shard_index;
    %%%%%: 6777-block  0
        -: 6778:}
        -: 6779:
        -: 6780:// Compares the name of each test with the user-specified filter to
        -: 6781:// decide whether the test should be run, then records the result in
        -: 6782:// each TestCase and TestInfo object.
        -: 6783:// If shard_tests == true, further filters tests based on sharding
        -: 6784:// variables in the environment - see
        -: 6785:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 6786:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 69%
        1: 6787:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        1: 6788:  const Int32 total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 6788-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6788-block  1
    #####: 6789:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
    %%%%%: 6789-block  0
call    0 never executed
        1: 6790:  const Int32 shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 6790-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6790-block  1
    #####: 6791:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
    %%%%%: 6791-block  0
call    0 never executed
        -: 6792:
        -: 6793:  // num_runnable_tests are the number of tests that will
        -: 6794:  // run across all shards (i.e., match filter and are not disabled).
        -: 6795:  // num_selected_tests are the number of tests to be run on
        -: 6796:  // this shard.
        1: 6797:  int num_runnable_tests = 0;
        1: 6798:  int num_selected_tests = 0;
        3: 6799:  for (size_t i = 0; i < test_cases_.size(); i++) {
        1: 6799-block  0
        3: 6799-block  1
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2: 6800:    TestCase* const test_case = test_cases_[i];
        2: 6800-block  0
call    0 returned 2
        4: 6801:    const std::string &test_case_name = test_case->name();
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2: 6801-block  0
call    5 returned 2
        2: 6801-block  1
call    6 returned 2
    $$$$$: 6801-block  2
call    7 never executed
    $$$$$: 6801-block  3
    $$$$$: 6801-block  4
call    8 never executed
        2: 6802:    test_case->set_should_run(false);
call    0 returned 2
        -: 6803:
       12: 6804:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
       12: 6804-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 10 (fallthrough)
branch  3 taken 2
       10: 6805:      TestInfo* const test_info = test_case->test_info_list()[j];
       10: 6805-block  0
call    0 returned 10
call    1 returned 10
       20: 6806:      const std::string test_name(test_info->name());
call    0 returned 10
call    1 returned 10
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 10
    $$$$$: 6806-block  0
    $$$$$: 6806-block  1
call    6 never executed
        -: 6807:      // A test is disabled if test case name or test name matches
        -: 6808:      // kDisableTestFilter.
        -: 6809:      const bool is_disabled =
       10: 6810:          internal::UnitTestOptions::MatchesFilter(test_case_name,
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
      20*: 6811:                                                   kDisableTestFilter) ||
       10: 6811-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
    %%%%%: 6811-block  1
       10: 6811-block  2
       10: 6812:          internal::UnitTestOptions::MatchesFilter(test_name,
       10: 6812-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 6812-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
       10: 6813:                                                   kDisableTestFilter);
       10: 6814:      test_info->is_disabled_ = is_disabled;
        -: 6815:
        -: 6816:      const bool matches_filter =
       10: 6817:          internal::UnitTestOptions::FilterMatchesTest(test_case_name,
       10: 6817-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 6818:                                                       test_name);
       10: 6819:      test_info->matches_filter_ = matches_filter;
        -: 6820:
       10: 6821:      const bool is_runnable =
      10*: 6822:          (GTEST_FLAG(also_run_disabled_tests) || !is_disabled) &&
       10: 6822-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 6822-block  1
branch  2 taken 10 (fallthrough)
branch  3 taken 0
       10: 6822-block  2
branch  4 taken 10 (fallthrough)
branch  5 taken 0
       10: 6822-block  3
    %%%%%: 6822-block  4
        -: 6823:          matches_filter;
        -: 6824:
        -: 6825:      const bool is_in_another_shard =
      10*: 6826:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       10: 6826-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 6826-block  1
       10: 6826-block  2
    #####: 6827:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6827-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       10: 6828:      test_info->is_in_another_shard_ = is_in_another_shard;
      10*: 6829:      const bool is_selected = is_runnable && !is_in_another_shard;
       10: 6829-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 6829-block  1
branch  2 taken 10 (fallthrough)
branch  3 taken 0
       10: 6829-block  2
    %%%%%: 6829-block  3
        -: 6830:
       10: 6831:      num_runnable_tests += is_runnable;
       10: 6832:      num_selected_tests += is_selected;
        -: 6833:
       10: 6834:      test_info->should_run_ = is_selected;
      10*: 6835:      test_case->set_should_run(test_case->should_run() || is_selected);
       10: 6835-block  0
call    0 returned 10
branch  1 taken 2 (fallthrough)
branch  2 taken 8
        2: 6835-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 0
       10: 6835-block  2
    %%%%%: 6835-block  3
       10: 6835-block  4
call    5 returned 10
        -: 6836:    }
        -: 6837:  }
        1: 6838:  return num_selected_tests;
        1: 6838-block  0
        1: 6838-block  1
        -: 6839:}
        -: 6840:
        -: 6841:// Prints the given C-string on a single line by replacing all '\n'
        -: 6842:// characters with string "\\n".  If the output takes more than
        -: 6843:// max_length characters, only prints the first max_length characters
        -: 6844:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6845:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6846:  if (str != NULL) {
    %%%%%: 6846-block  0
branch  0 never executed
branch  1 never executed
    #####: 6847:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6847-block  0
    %%%%%: 6847-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 6847-block  2
    #####: 6848:      if (i >= max_length) {
    %%%%%: 6848-block  0
branch  0 never executed
branch  1 never executed
    #####: 6849:        printf("...");
    %%%%%: 6849-block  0
call    0 never executed
    #####: 6850:        break;
        -: 6851:      }
    #####: 6852:      if (*str == '\n') {
    %%%%%: 6852-block  0
branch  0 never executed
branch  1 never executed
    #####: 6853:        printf("\\n");
    %%%%%: 6853-block  0
call    0 never executed
    #####: 6854:        i += 2;
        -: 6855:      } else {
    #####: 6856:        printf("%c", *str);
    %%%%%: 6856-block  0
call    0 never executed
    #####: 6857:        ++i;
        -: 6858:      }
        -: 6859:    }
        -: 6860:  }
    #####: 6861:}
        -: 6862:
        -: 6863:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6864:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6865:  // Print at most this many characters for each type/value parameter.
    #####: 6866:  const int kMaxParamLength = 250;
        -: 6867:
    #####: 6868:  for (size_t i = 0; i < test_cases_.size(); i++) {
    %%%%%: 6868-block  0
    %%%%%: 6868-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6868-block  2
    #####: 6869:    const TestCase* const test_case = test_cases_[i];
    %%%%%: 6869-block  0
call    0 never executed
    #####: 6870:    bool printed_test_case_name = false;
        -: 6871:
    #####: 6872:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
    %%%%%: 6872-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6872-block  1
        -: 6873:      const TestInfo* const test_info =
    #####: 6874:          test_case->test_info_list()[j];
    %%%%%: 6874-block  0
call    0 never executed
call    1 never executed
    #####: 6875:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 6876:        if (!printed_test_case_name) {
    %%%%%: 6876-block  0
branch  0 never executed
branch  1 never executed
    #####: 6877:          printed_test_case_name = true;
    #####: 6878:          printf("%s.", test_case->name());
    %%%%%: 6878-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6879:          if (test_case->type_param() != NULL) {
    %%%%%: 6879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6879-block  1
branch  3 never executed
branch  4 never executed
    #####: 6880:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6880-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6881:            // We print the type parameter on a single line to make
        -: 6882:            // the output easy to parse by a program.
    #####: 6883:            PrintOnOneLine(test_case->type_param(), kMaxParamLength);
    %%%%%: 6883-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6883-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 6884:          }
    #####: 6885:          printf("\n");
    %%%%%: 6885-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6886:        }
    #####: 6887:        printf("  %s", test_info->name());
    %%%%%: 6887-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6888:        if (test_info->value_param() != NULL) {
    %%%%%: 6888-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6888-block  1
branch  3 never executed
branch  4 never executed
    #####: 6889:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6890:          // We print the value parameter on a single line to make the
        -: 6891:          // output easy to parse by a program.
    #####: 6892:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6892-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6892-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 6893:        }
    #####: 6894:        printf("\n");
    %%%%%: 6894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6895:      }
        -: 6896:    }
        -: 6897:  }
    #####: 6898:  fflush(stdout);
    %%%%%: 6898-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6899:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6899-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6899-block  1
call    3 never executed
    $$$$$: 6899-block  2
call    4 never executed
    #####: 6900:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6900-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6900-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6900-block  2
    %%%%%: 6900-block  3
    %%%%%: 6900-block  4
branch  6 never executed
branch  7 never executed
    #####: 6901:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6901-block  0
call    0 never executed
    %%%%%: 6901-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6901-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6901-block  3
call    8 never executed
    $$$$$: 6901-block  4
call    9 never executed
    $$$$$: 6901-block  5
    $$$$$: 6901-block  6
call   10 never executed
    $$$$$: 6901-block  7
    #####: 6902:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 6902-block  0
call    5 never executed
    $$$$$: 6902-block  1
    #####: 6903:    std::stringstream stream;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6903-block  0
call    4 never executed
    $$$$$: 6903-block  1
call    5 never executed
    #####: 6904:    if (output_format == "xml") {
    %%%%%: 6904-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6905:      XmlUnitTestResultPrinter(
    %%%%%: 6905-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6905-block  1
call    4 never executed
    $$$$$: 6905-block  2
call    5 never executed
    $$$$$: 6905-block  3
    #####: 6906:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6906-block  1
call    4 never executed
    $$$$$: 6906-block  2
    #####: 6907:          .PrintXmlTestsList(&stream, test_cases_);
    %%%%%: 6907-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6908:    } else if (output_format == "json") {
    %%%%%: 6908-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6909:      JsonUnitTestResultPrinter(
    %%%%%: 6909-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6909-block  1
call    4 never executed
    $$$$$: 6909-block  2
call    5 never executed
    $$$$$: 6909-block  3
    #####: 6910:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6910-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6910-block  1
call    4 never executed
    $$$$$: 6910-block  2
    #####: 6911:          .PrintJsonTestList(&stream, test_cases_);
    %%%%%: 6911-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6912:    }
    #####: 6913:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6913-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6913-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6913-block  2
call    7 never executed
    $$$$$: 6913-block  3
call    8 never executed
    $$$$$: 6913-block  4
    #####: 6914:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6915:  }
    #####: 6916:}
        -: 6917:
        -: 6918:// Sets the OS stack trace getter.
        -: 6919://
        -: 6920:// Does nothing if the input and the current OS stack trace getter are
        -: 6921:// the same; otherwise, deletes the old getter and makes the input the
        -: 6922:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6923:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6924:    OsStackTraceGetterInterface* getter) {
    #####: 6925:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6925-block  0
branch  0 never executed
branch  1 never executed
    #####: 6926:    delete os_stack_trace_getter_;
    %%%%%: 6926-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6926-block  1
call    2 never executed
    #####: 6927:    os_stack_trace_getter_ = getter;
    %%%%%: 6927-block  0
        -: 6928:  }
    #####: 6929:}
        -: 6930:
        -: 6931:// Returns the current OS stack trace getter if it is not NULL;
        -: 6932:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6933:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 55 returned 100% blocks executed 100%
       55: 6934:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       55: 6935:  if (os_stack_trace_getter_ == NULL) {
       55: 6935-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 54
        -: 6936:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6937:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6938:#else
        1: 6939:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6939-block  0
call    0 returned 1
call    1 returned 1
        -: 6940:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6941:  }
        -: 6942:
       55: 6943:  return os_stack_trace_getter_;
       55: 6943-block  0
        -: 6944:}
        -: 6945:
        -: 6946:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 22 returned 100% blocks executed 83%
       22: 6947:TestResult* UnitTestImpl::current_test_result() {
       22: 6948:  if (current_test_info_ != NULL) {
       22: 6948-block  0
branch  0 taken 21 (fallthrough)
branch  1 taken 1
       21: 6949:    return &current_test_info_->result_;
       21: 6949-block  0
        -: 6950:  }
        1: 6951:  if (current_test_case_ != NULL) {
        1: 6951-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6952:    return &current_test_case_->ad_hoc_test_result_;
    %%%%%: 6952-block  0
        -: 6953:  }
        1: 6954:  return &ad_hoc_test_result_;
        1: 6954-block  0
        -: 6955:}
        -: 6956:
        -: 6957:// Shuffles all test cases, and the tests within each test case,
        -: 6958:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6959:void UnitTestImpl::ShuffleTests() {
        -: 6960:  // Shuffles the death test cases.
    #####: 6961:  ShuffleRange(random(), 0, last_death_test_case_ + 1, &test_case_indices_);
    %%%%%: 6961-block  0
call    0 never executed
call    1 never executed
        -: 6962:
        -: 6963:  // Shuffles the non-death test cases.
    #####: 6964:  ShuffleRange(random(), last_death_test_case_ + 1,
call    0 never executed
call    1 never executed
    #####: 6965:               static_cast<int>(test_cases_.size()), &test_case_indices_);
call    0 never executed
        -: 6966:
        -: 6967:  // Shuffles the tests inside each test case.
    #####: 6968:  for (size_t i = 0; i < test_cases_.size(); i++) {
    %%%%%: 6968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6969:    test_cases_[i]->ShuffleTests(random());
    %%%%%: 6969-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 6970:  }
    #####: 6971:}
        -: 6972:
        -: 6973:// Restores the test cases and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6974:void UnitTestImpl::UnshuffleTests() {
        3: 6975:  for (size_t i = 0; i < test_cases_.size(); i++) {
        1: 6975-block  0
        3: 6975-block  1
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        -: 6976:    // Unshuffles the tests in each test case.
        2: 6977:    test_cases_[i]->UnshuffleTests();
        2: 6977-block  0
call    0 returned 2
call    1 returned 2
        -: 6978:    // Resets the index of each test case.
        2: 6979:    test_case_indices_[i] = static_cast<int>(i);
call    0 returned 2
        -: 6980:  }
        1: 6981:}
        -: 6982:
        -: 6983:// Returns the current OS stack trace as an std::string.
        -: 6984://
        -: 6985:// The maximum number of stack frames to be included is specified by
        -: 6986:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6987:// specifies the number of top frames to be skipped, which doesn't
        -: 6988:// count against the number of frames to be included.
        -: 6989://
        -: 6990:// For example, if Foo() calls Bar(), which in turn calls
        -: 6991:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6992:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 6993:std::string GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/,
        -: 6994:                                            int skip_count) {
        -: 6995:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6996:  // to what the user really wants to skip.
    #####: 6997:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6997-block  0
call    0 never executed
call    1 never executed
        -: 6998:}
        -: 6999:
        -: 7000:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 7001:// suppress unreachable code warnings.
        -: 7002:namespace {
        -: 7003:class ClassUniqueToAlwaysTrue {};
        -: 7004:}
        -: 7005:
function _ZN7testing8internal6IsTrueEb called 85 returned 100% blocks executed 100%
       85: 7006:bool IsTrue(bool condition) { return condition; }
       85: 7006-block  0
        -: 7007:
function _ZN7testing8internal10AlwaysTrueEv called 0 returned 0% blocks executed 0%
    #####: 7008:bool AlwaysTrue() {
        -: 7009:#if GTEST_HAS_EXCEPTIONS
        -: 7010:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 7011:  // but it makes the compiler think that it may throw.
    #####: 7012:  if (IsTrue(false))
    %%%%%: 7012-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7013:    throw ClassUniqueToAlwaysTrue();
    %%%%%: 7013-block  0
call    0 never executed
call    1 never executed
        -: 7014:#endif  // GTEST_HAS_EXCEPTIONS
    #####: 7015:  return true;
    %%%%%: 7015-block  0
        -: 7016:}
        -: 7017:
        -: 7018:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 7019:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 7020:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 7021:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 7022:  const size_t prefix_len = strlen(prefix);
    #####: 7023:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 7023-block  0
branch  0 never executed
branch  1 never executed
    #####: 7024:    *pstr += prefix_len;
    #####: 7025:    return true;
    %%%%%: 7025-block  0
        -: 7026:  }
    #####: 7027:  return false;
    %%%%%: 7027-block  0
        -: 7028:}
        -: 7029:
        -: 7030:// Parses a string as a command line flag.  The string should have
        -: 7031:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 7032:// part can be omitted.
        -: 7033://
        -: 7034:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 61%
        4: 7035:static const char* ParseFlagValue(const char* str, const char* flag,
        -: 7036:                                  bool def_optional) {
        -: 7037:  // str and flag must not be NULL.
       4*: 7038:  if (str == NULL || flag == NULL) return NULL;
        4: 7038-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 7038-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 7038-block  2
        -: 7039:
        -: 7040:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
       12: 7041:  const std::string flag_str = std::string("--") + GTEST_FLAG_PREFIX_ + flag;
        4: 7041-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 7041-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 7041-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 4
call   11 returned 4
        4: 7041-block  3
call   12 returned 4
    $$$$$: 7041-block  4
    $$$$$: 7041-block  5
    $$$$$: 7041-block  6
        4: 7042:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 7043:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return NULL;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 7043-block  0
        -: 7044:
        -: 7045:  // Skips the flag name.
        1: 7046:  const char* flag_end = str + flag_len;
        -: 7047:
        -: 7048:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 7049:  if (def_optional && (flag_end[0] == '\0')) {
        1: 7049-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 7049-block  1
branch  2 never executed
branch  3 never executed
    #####: 7050:    return flag_end;
    %%%%%: 7050-block  0
        -: 7051:  }
        -: 7052:
        -: 7053:  // If def_optional is true and there are more characters after the
        -: 7054:  // flag name, or if def_optional is false, there must be a '=' after
        -: 7055:  // the flag name.
       1*: 7056:  if (flag_end[0] != '=') return NULL;
        1: 7056-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 7056-block  1
        -: 7057:
        -: 7058:  // Returns the string after "=".
        1: 7059:  return flag_end + 1;
        1: 7059-block  0
        -: 7060:}
        -: 7061:
        -: 7062:// Parses a string for a bool flag, in the form of either
        -: 7063:// "--flag=value" or "--flag".
        -: 7064://
        -: 7065:// In the former case, the value is taken as true as long as it does
        -: 7066:// not start with '0', 'f', or 'F'.
        -: 7067://
        -: 7068:// In the latter case, the value is taken as true.
        -: 7069://
        -: 7070:// On success, stores the value of the flag in *value, and returns
        -: 7071:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL13ParseBoolFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 7072:static bool ParseBoolFlag(const char* str, const char* flag, bool* value) {
        -: 7073:  // Gets the value of the flag as a string.
        3: 7074:  const char* const value_str = ParseFlagValue(str, flag, true);
        3: 7074-block  0
call    0 returned 3
        -: 7075:
        -: 7076:  // Aborts if the parsing failed.
        3: 7077:  if (value_str == NULL) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 7077-block  0
        -: 7078:
        -: 7079:  // Converts the string value to a bool.
    #####: 7080:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 7080-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7080-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 7080-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 7080-block  3
    %%%%%: 7080-block  4
    #####: 7081:  return true;
    %%%%%: 7081-block  0
        -: 7082:}
        -: 7083:
        -: 7084:// Parses a string for an Int32 flag, in the form of
        -: 7085:// "--flag=value".
        -: 7086://
        -: 7087:// On success, stores the value of the flag in *value, and returns
        -: 7088:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal14ParseInt32FlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 7089:bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {
        -: 7090:  // Gets the value of the flag as a string.
    #####: 7091:  const char* const value_str = ParseFlagValue(str, flag, false);
    %%%%%: 7091-block  0
call    0 never executed
        -: 7092:
        -: 7093:  // Aborts if the parsing failed.
    #####: 7094:  if (value_str == NULL) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 7094-block  0
        -: 7095:
        -: 7096:  // Sets *value to the value of the flag.
    #####: 7097:  return ParseInt32(Message() << "The value of flag --" << flag,
    %%%%%: 7097-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 7097-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 7097-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 7097-block  3
call   10 never executed
    $$$$$: 7097-block  4
call   11 never executed
    #####: 7098:                    value_str, value);
    %%%%%: 7098-block  0
        -: 7099:}
        -: 7100:
        -: 7101:// Parses a string for a string flag, in the form of
        -: 7102:// "--flag=value".
        -: 7103://
        -: 7104:// On success, stores the value of the flag in *value, and returns
        -: 7105:// true.  On failure, returns false without changing *value.
        -: 7106:template <typename String>
function _ZN7testing8internalL15ParseStringFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 7107:static bool ParseStringFlag(const char* str, const char* flag, String* value) {
        -: 7108:  // Gets the value of the flag as a string.
        1: 7109:  const char* const value_str = ParseFlagValue(str, flag, false);
        1: 7109-block  0
call    0 returned 1
        -: 7110:
        -: 7111:  // Aborts if the parsing failed.
       1*: 7112:  if (value_str == NULL) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 7112-block  0
        -: 7113:
        -: 7114:  // Sets *value to the value of the flag.
        1: 7115:  *value = value_str;
        1: 7115-block  0
call    0 returned 1
        1: 7116:  return true;
        -: 7117:}
        -: 7118:
        -: 7119:// Determines whether a string has a prefix that Google Test uses for its
        -: 7120:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 7121:// If Google Test detects that a command line flag has its prefix but is not
        -: 7122:// recognized, it will print its help message. Flags starting with
        -: 7123:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 7124:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 7125:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 7126:  return (SkipPrefix("--", &str) ||
    %%%%%: 7126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7127:          SkipPrefix("-", &str) ||
    %%%%%: 7127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7128:          SkipPrefix("/", &str)) &&
    %%%%%: 7128-block  0
call    0 never executed
    #####: 7129:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 7129-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 7129-block  1
    %%%%%: 7129-block  2
    #####: 7130:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 7130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7131:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 7131-block  0
call    0 never executed
    %%%%%: 7131-block  1
        -: 7132:}
        -: 7133:
        -: 7134:// Prints a string containing code-encoded text.  The following escape
        -: 7135:// sequences can be used in the string to control the text color:
        -: 7136://
        -: 7137://   @@    prints a single '@' character.
        -: 7138://   @R    changes the color to red.
        -: 7139://   @G    changes the color to green.
        -: 7140://   @Y    changes the color to yellow.
        -: 7141://   @D    changes to the default terminal text color.
        -: 7142://
        -: 7143:// FIXME: Write tests for this once we add stdout
        -: 7144:// capturing to Google Test.
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 7145:static void PrintColorEncoded(const char* str) {
    #####: 7146:  GTestColor color = COLOR_DEFAULT;  // The current color.
    %%%%%: 7146-block  0
        -: 7147:
        -: 7148:  // Conceptually, we split the string into segments divided by escape
        -: 7149:  // sequences.  Then we print one segment at a time.  At the end of
        -: 7150:  // each iteration, the str pointer advances to the beginning of the
        -: 7151:  // next segment.
        -: 7152:  for (;;) {
    #####: 7153:    const char* p = strchr(str, '@');
    #####: 7154:    if (p == NULL) {
    %%%%%: 7154-block  0
branch  0 never executed
branch  1 never executed
    #####: 7155:      ColoredPrintf(color, "%s", str);
    %%%%%: 7155-block  0
call    0 never executed
    #####: 7156:      return;
    %%%%%: 7156-block  0
        -: 7157:    }
        -: 7158:
    #####: 7159:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 7159-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 7159-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 7159-block  2
call    8 never executed
call    9 never executed
    $$$$$: 7159-block  3
call   10 never executed
    $$$$$: 7159-block  4
    $$$$$: 7159-block  5
call   11 never executed
        -: 7160:
    #####: 7161:    const char ch = p[1];
    #####: 7162:    str = p + 2;
    #####: 7163:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 7164:      ColoredPrintf(color, "@");
    %%%%%: 7164-block  0
call    0 never executed
    #####: 7165:    } else if (ch == 'D') {
    %%%%%: 7165-block  0
branch  0 never executed
branch  1 never executed
    #####: 7166:      color = COLOR_DEFAULT;
    %%%%%: 7166-block  0
    #####: 7167:    } else if (ch == 'R') {
    %%%%%: 7167-block  0
branch  0 never executed
branch  1 never executed
    #####: 7168:      color = COLOR_RED;
    %%%%%: 7168-block  0
    #####: 7169:    } else if (ch == 'G') {
    %%%%%: 7169-block  0
branch  0 never executed
branch  1 never executed
    #####: 7170:      color = COLOR_GREEN;
    %%%%%: 7170-block  0
    #####: 7171:    } else if (ch == 'Y') {
    %%%%%: 7171-block  0
branch  0 never executed
branch  1 never executed
    #####: 7172:      color = COLOR_YELLOW;
    %%%%%: 7172-block  0
        -: 7173:    } else {
    #####: 7174:      --str;
    %%%%%: 7174-block  0
        -: 7175:    }
    #####: 7176:  }
    %%%%%: 7176-block  0
        -: 7177:}
        -: 7178:
        -: 7179:static const char kColorEncodedHelpMessage[] =
        -: 7180:"This program contains tests written using " GTEST_NAME_ ". You can use the\n"
        -: 7181:"following command line flags to control its behavior:\n"
        -: 7182:"\n"
        -: 7183:"Test Selection:\n"
        -: 7184:"  @G--" GTEST_FLAG_PREFIX_ "list_tests@D\n"
        -: 7185:"      List the names of all tests instead of running them. The name of\n"
        -: 7186:"      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 7187:"  @G--" GTEST_FLAG_PREFIX_ "filter=@YPOSTIVE_PATTERNS"
        -: 7188:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 7189:"      Run only the tests whose name matches one of the positive patterns but\n"
        -: 7190:"      none of the negative patterns. '?' matches any single character; '*'\n"
        -: 7191:"      matches any substring; ':' separates two patterns.\n"
        -: 7192:"  @G--" GTEST_FLAG_PREFIX_ "also_run_disabled_tests@D\n"
        -: 7193:"      Run all disabled tests too.\n"
        -: 7194:"\n"
        -: 7195:"Test Execution:\n"
        -: 7196:"  @G--" GTEST_FLAG_PREFIX_ "repeat=@Y[COUNT]@D\n"
        -: 7197:"      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 7198:"  @G--" GTEST_FLAG_PREFIX_ "shuffle@D\n"
        -: 7199:"      Randomize tests' orders on every iteration.\n"
        -: 7200:"  @G--" GTEST_FLAG_PREFIX_ "random_seed=@Y[NUMBER]@D\n"
        -: 7201:"      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 7202:"      99999, or 0 to use a seed based on the current time).\n"
        -: 7203:"\n"
        -: 7204:"Test Output:\n"
        -: 7205:"  @G--" GTEST_FLAG_PREFIX_ "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 7206:"      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 7207:"  -@G-" GTEST_FLAG_PREFIX_ "print_time=0@D\n"
        -: 7208:"      Don't print the elapsed time of each test.\n"
        -: 7209:"  @G--" GTEST_FLAG_PREFIX_ "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G"
        -: 7210:    GTEST_PATH_SEP_ "@Y|@G:@YFILE_PATH]@D\n"
        -: 7211:"      Generate a JSON or XML report in the given directory or with the given\n"
        -: 7212:"      file name. @YFILE_PATH@D defaults to @Gtest_details.xml@D.\n"
        -: 7213:# if GTEST_CAN_STREAM_RESULTS_
        -: 7214:"  @G--" GTEST_FLAG_PREFIX_ "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 7215:"      Stream test results to the given server.\n"
        -: 7216:# endif  // GTEST_CAN_STREAM_RESULTS_
        -: 7217:"\n"
        -: 7218:"Assertion Behavior:\n"
        -: 7219:# if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 7220:"  @G--" GTEST_FLAG_PREFIX_ "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 7221:"      Set the default death test style.\n"
        -: 7222:# endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 7223:"  @G--" GTEST_FLAG_PREFIX_ "break_on_failure@D\n"
        -: 7224:"      Turn assertion failures into debugger break-points.\n"
        -: 7225:"  @G--" GTEST_FLAG_PREFIX_ "throw_on_failure@D\n"
        -: 7226:"      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 7227:"      test framework.\n"
        -: 7228:"  @G--" GTEST_FLAG_PREFIX_ "catch_exceptions=0@D\n"
        -: 7229:"      Do not report exceptions as test failures. Instead, allow them\n"
        -: 7230:"      to crash the program or throw a pop-up (on Windows).\n"
        -: 7231:"\n"
        -: 7232:"Except for @G--" GTEST_FLAG_PREFIX_ "list_tests@D, you can alternatively set "
        -: 7233:    "the corresponding\n"
        -: 7234:"environment variable of a flag (all letters in upper-case). For example, to\n"
        -: 7235:"disable colored text output, you can either specify @G--" GTEST_FLAG_PREFIX_
        -: 7236:    "color=no@D or set\n"
        -: 7237:"the @G" GTEST_FLAG_PREFIX_UPPER_ "COLOR@D environment variable to @Gno@D.\n"
        -: 7238:"\n"
        -: 7239:"For more information, please read the " GTEST_NAME_ " documentation at\n"
        -: 7240:"@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_ "\n"
        -: 7241:"(not one in your own code or tests), please report it to\n"
        -: 7242:"@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 7243:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 28%
        1: 7244:static bool ParseGoogleTestFlag(const char* const arg) {
        1: 7245:  return ParseBoolFlag(arg, kAlsoRunDisabledTestsFlag,
        1: 7245-block  0
call    0 returned 1
        1: 7246:                       &GTEST_FLAG(also_run_disabled_tests)) ||
        1: 7247:      ParseBoolFlag(arg, kBreakOnFailureFlag,
        1: 7247-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 7248:                    &GTEST_FLAG(break_on_failure)) ||
        1: 7249:      ParseBoolFlag(arg, kCatchExceptionsFlag,
        1: 7249-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 7250:                    &GTEST_FLAG(catch_exceptions)) ||
       1*: 7251:      ParseStringFlag(arg, kColorFlag, &GTEST_FLAG(color)) ||
        1: 7251-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 7252:      ParseStringFlag(arg, kDeathTestStyleFlag,
    %%%%%: 7252-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7253:                      &GTEST_FLAG(death_test_style)) ||
    #####: 7254:      ParseBoolFlag(arg, kDeathTestUseFork,
    %%%%%: 7254-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7255:                    &GTEST_FLAG(death_test_use_fork)) ||
    #####: 7256:      ParseStringFlag(arg, kFilterFlag, &GTEST_FLAG(filter)) ||
    %%%%%: 7256-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7257:      ParseStringFlag(arg, kInternalRunDeathTestFlag,
    %%%%%: 7257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7258:                      &GTEST_FLAG(internal_run_death_test)) ||
    #####: 7259:      ParseBoolFlag(arg, kListTestsFlag, &GTEST_FLAG(list_tests)) ||
    %%%%%: 7259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7260:      ParseStringFlag(arg, kOutputFlag, &GTEST_FLAG(output)) ||
    %%%%%: 7260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7261:      ParseBoolFlag(arg, kPrintTimeFlag, &GTEST_FLAG(print_time)) ||
    %%%%%: 7261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7262:      ParseBoolFlag(arg, kPrintUTF8Flag, &GTEST_FLAG(print_utf8)) ||
    %%%%%: 7262-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7263:      ParseInt32Flag(arg, kRandomSeedFlag, &GTEST_FLAG(random_seed)) ||
    %%%%%: 7263-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7264:      ParseInt32Flag(arg, kRepeatFlag, &GTEST_FLAG(repeat)) ||
    %%%%%: 7264-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7265:      ParseBoolFlag(arg, kShuffleFlag, &GTEST_FLAG(shuffle)) ||
    %%%%%: 7265-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7266:      ParseInt32Flag(arg, kStackTraceDepthFlag,
    %%%%%: 7266-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7267:                     &GTEST_FLAG(stack_trace_depth)) ||
    #####: 7268:      ParseStringFlag(arg, kStreamResultToFlag,
    %%%%%: 7268-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       2*: 7269:                      &GTEST_FLAG(stream_result_to)) ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 7269-block  0
    %%%%%: 7269-block  1
    #####: 7270:      ParseBoolFlag(arg, kThrowOnFailureFlag,
    %%%%%: 7270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 7271:                    &GTEST_FLAG(throw_on_failure));
        1: 7271-block  0
        -: 7272:}
        -: 7273:
        -: 7274:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 7275:static void LoadFlagsFromFile(const std::string& path) {
    #####: 7276:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 7276-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7277:  if (!flagfile) {
    %%%%%: 7277-block  0
branch  0 never executed
branch  1 never executed
    #####: 7278:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG(flagfile)
    %%%%%: 7278-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7278-block  1
call    3 never executed
    %%%%%: 7278-block  2
call    4 never executed
    $$$$$: 7278-block  3
call    5 never executed
    $$$$$: 7278-block  4
    #####: 7279:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7279-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7279-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 7280:  }
    #####: 7281:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 7281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 7281-block  1
call    4 never executed
    #####: 7282:  posix::FClose(flagfile);
    %%%%%: 7282-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7283:  std::vector<std::string> lines;
    %%%%%: 7283-block  0
call    0 never executed
    %%%%%: 7283-block  1
call    1 never executed
    $$$$$: 7283-block  2
call    2 never executed
    #####: 7284:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7285:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 7285-block  0
    %%%%%: 7285-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7285-block  2
    #####: 7286:    if (lines[i].empty())
    %%%%%: 7286-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7287:      continue;
    %%%%%: 7287-block  0
    #####: 7288:    if (!ParseGoogleTestFlag(lines[i].c_str()))
    %%%%%: 7288-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 7288-block  1
branch  5 never executed
branch  6 never executed
    #####: 7289:      g_help_flag = true;
    %%%%%: 7289-block  0
        -: 7290:  }
    #####: 7291:}
        -: 7292:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 7293:
        -: 7294:// Parses the command line for Google Test flags, without initializing
        -: 7295:// other parts of Google Test.  The type parameter CharType can be
        -: 7296:// instantiated to either char or wchar_t.
        -: 7297:template <typename CharType>
       1*: 7298:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 7299:  for (int i = 1; i < *argc; i++) {
       2*: 7300:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 7301:    const char* const arg = arg_string.c_str();
        -: 7302:
        -: 7303:    using internal::ParseBoolFlag;
        -: 7304:    using internal::ParseInt32Flag;
        -: 7305:    using internal::ParseStringFlag;
        -: 7306:
       1*: 7307:    bool remove_flag = false;
       1*: 7308:    if (ParseGoogleTestFlag(arg)) {
       1*: 7309:      remove_flag = true;
        -: 7310:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 7311:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    #####: 7312:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    #####: 7313:      remove_flag = true;
        -: 7314:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 7315:    } else if (arg_string == "--help" || arg_string == "-h" ||
    #####: 7316:               arg_string == "-?" || arg_string == "/?" ||
    #####: 7317:               HasGoogleTestFlagPrefix(arg)) {
        -: 7318:      // Both help flag and unrecognized Google Test flags (excluding
        -: 7319:      // internal ones) trigger help display.
    #####: 7320:      g_help_flag = true;
        -: 7321:    }
        -: 7322:
       1*: 7323:    if (remove_flag) {
        -: 7324:      // Shift the remainder of the argv list left by one.  Note
        -: 7325:      // that argv has (*argc + 1) elements, the last one always being
        -: 7326:      // NULL.  The following loop moves the trailing NULL element as
        -: 7327:      // well.
       2*: 7328:      for (int j = i; j != *argc; j++) {
       1*: 7329:        argv[j] = argv[j + 1];
        -: 7330:      }
        -: 7331:
        -: 7332:      // Decrements the argument count.
       1*: 7333:      (*argc)--;
        -: 7334:
        -: 7335:      // We also need to decrement the iterator as we just removed
        -: 7336:      // an element.
       1*: 7337:      i--;
        -: 7338:    }
        -: 7339:  }
        -: 7340:
       1*: 7341:  if (g_help_flag) {
        -: 7342:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 7343:    // latter may not be called at all if the user is using Google
        -: 7344:    // Test with another testing framework.
    #####: 7345:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 7346:  }
       1*: 7347:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 7298:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 7299:  for (int i = 1; i < *argc; i++) {
    %%%%%: 7299-block  0
    %%%%%: 7299-block  1
branch  0 never executed
branch  1 never executed
    #####: 7300:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 7300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7300-block  1
call    3 never executed
    $$$$$: 7300-block  2
call    4 never executed
    #####: 7301:    const char* const arg = arg_string.c_str();
    %%%%%: 7301-block  0
call    0 never executed
        -: 7302:
        -: 7303:    using internal::ParseBoolFlag;
        -: 7304:    using internal::ParseInt32Flag;
        -: 7305:    using internal::ParseStringFlag;
        -: 7306:
    #####: 7307:    bool remove_flag = false;
    #####: 7308:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7308-block  0
branch  3 never executed
branch  4 never executed
    #####: 7309:      remove_flag = true;
    %%%%%: 7309-block  0
        -: 7310:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 7311:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 7311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7311-block  1
branch  3 never executed
branch  4 never executed
    #####: 7312:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 7312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7313:      remove_flag = true;
    %%%%%: 7313-block  0
        -: 7314:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 7315:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 7315-block  0
call    0 never executed
    %%%%%: 7315-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7316:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 7316-block  0
call    2 never executed
    %%%%%: 7316-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 7316-block  2
    %%%%%: 7316-block  3
    %%%%%: 7316-block  4
branch  8 never executed
branch  9 never executed
    #####: 7317:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 7317-block  0
call    0 never executed
        -: 7318:      // Both help flag and unrecognized Google Test flags (excluding
        -: 7319:      // internal ones) trigger help display.
    #####: 7320:      g_help_flag = true;
    %%%%%: 7320-block  0
        -: 7321:    }
        -: 7322:
    #####: 7323:    if (remove_flag) {
    %%%%%: 7323-block  0
branch  0 never executed
branch  1 never executed
        -: 7324:      // Shift the remainder of the argv list left by one.  Note
        -: 7325:      // that argv has (*argc + 1) elements, the last one always being
        -: 7326:      // NULL.  The following loop moves the trailing NULL element as
        -: 7327:      // well.
    #####: 7328:      for (int j = i; j != *argc; j++) {
    %%%%%: 7328-block  0
    %%%%%: 7328-block  1
branch  0 never executed
branch  1 never executed
    #####: 7329:        argv[j] = argv[j + 1];
    %%%%%: 7329-block  0
        -: 7330:      }
        -: 7331:
        -: 7332:      // Decrements the argument count.
    #####: 7333:      (*argc)--;
        -: 7334:
        -: 7335:      // We also need to decrement the iterator as we just removed
        -: 7336:      // an element.
    #####: 7337:      i--;
    %%%%%: 7337-block  0
        -: 7338:    }
        -: 7339:  }
        -: 7340:
    #####: 7341:  if (g_help_flag) {
    %%%%%: 7341-block  0
branch  0 never executed
branch  1 never executed
        -: 7342:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 7343:    // latter may not be called at all if the user is using Google
        -: 7344:    // Test with another testing framework.
    #####: 7345:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 7345-block  0
call    0 never executed
        -: 7346:  }
    #####: 7347:}
    %%%%%: 7347-block  0
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 45%
        1: 7298:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 7299:  for (int i = 1; i < *argc; i++) {
        1: 7299-block  0
        2: 7299-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        2: 7300:    const std::string arg_string = StreamableToString(argv[i]);
        1: 7300-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 7300-block  1
call    3 returned 1
    $$$$$: 7300-block  2
call    4 never executed
        1: 7301:    const char* const arg = arg_string.c_str();
        1: 7301-block  0
call    0 returned 1
        -: 7302:
        -: 7303:    using internal::ParseBoolFlag;
        -: 7304:    using internal::ParseInt32Flag;
        -: 7305:    using internal::ParseStringFlag;
        -: 7306:
        1: 7307:    bool remove_flag = false;
        1: 7308:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 7308-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 7309:      remove_flag = true;
        1: 7309-block  0
        -: 7310:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 7311:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 7311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7311-block  1
branch  3 never executed
branch  4 never executed
    #####: 7312:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 7312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7313:      remove_flag = true;
    %%%%%: 7313-block  0
        -: 7314:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 7315:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 7315-block  0
call    0 never executed
    %%%%%: 7315-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7316:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 7316-block  0
call    2 never executed
    %%%%%: 7316-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 7316-block  2
    %%%%%: 7316-block  3
    %%%%%: 7316-block  4
branch  8 never executed
branch  9 never executed
    #####: 7317:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 7317-block  0
call    0 never executed
        -: 7318:      // Both help flag and unrecognized Google Test flags (excluding
        -: 7319:      // internal ones) trigger help display.
    #####: 7320:      g_help_flag = true;
    %%%%%: 7320-block  0
        -: 7321:    }
        -: 7322:
        1: 7323:    if (remove_flag) {
        1: 7323-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 7324:      // Shift the remainder of the argv list left by one.  Note
        -: 7325:      // that argv has (*argc + 1) elements, the last one always being
        -: 7326:      // NULL.  The following loop moves the trailing NULL element as
        -: 7327:      // well.
        2: 7328:      for (int j = i; j != *argc; j++) {
        1: 7328-block  0
        2: 7328-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 7329:        argv[j] = argv[j + 1];
        1: 7329-block  0
        -: 7330:      }
        -: 7331:
        -: 7332:      // Decrements the argument count.
        1: 7333:      (*argc)--;
        -: 7334:
        -: 7335:      // We also need to decrement the iterator as we just removed
        -: 7336:      // an element.
        1: 7337:      i--;
        1: 7337-block  0
        -: 7338:    }
        -: 7339:  }
        -: 7340:
        1: 7341:  if (g_help_flag) {
        1: 7341-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 7342:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 7343:    // latter may not be called at all if the user is using Google
        -: 7344:    // Test with another testing framework.
    #####: 7345:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 7345-block  0
call    0 never executed
        -: 7346:  }
        1: 7347:}
        1: 7347-block  0
------------------
        -: 7348:
        -: 7349:// Parses the command line for Google Test flags, without initializing
        -: 7350:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 7351:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 7352:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 7352-block  0
call    0 returned 1
        -: 7353:
        -: 7354:  // Fix the value of *_NSGetArgc() on macOS, but iff
        -: 7355:  // *_NSGetArgv() == argv
        -: 7356:  // Only applicable to char** version of argv
        -: 7357:#if GTEST_OS_MAC
        -: 7358:#ifndef GTEST_OS_IOS
        -: 7359:  if (*_NSGetArgv() == argv) {
        -: 7360:    *_NSGetArgc() = *argc;
        -: 7361:  }
        -: 7362:#endif
        -: 7363:#endif
        1: 7364:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 7365:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 7366:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 7366-block  0
call    0 never executed
    #####: 7367:}
        -: 7368:
        -: 7369:// The internal implementation of InitGoogleTest().
        -: 7370://
        -: 7371:// The type parameter CharType can be instantiated to either char or
        -: 7372:// wchar_t.
        -: 7373:template <typename CharType>
       1*: 7374:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 7375:  // We don't want to run the initialization code twice.
       1*: 7376:  if (GTestIsInitialized()) return;
        -: 7377:
       1*: 7378:  if (*argc <= 0) return;
        -: 7379:
       1*: 7380:  g_argvs.clear();
       3*: 7381:  for (int i = 0; i != *argc; i++) {
       2*: 7382:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 7383:  }
        -: 7384:
        -: 7385:#if GTEST_HAS_ABSL
        -: 7386:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 7387:#endif  // GTEST_HAS_ABSL
        -: 7388:
       1*: 7389:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 7390:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 7391:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 7374:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 7375:  // We don't want to run the initialization code twice.
    #####: 7376:  if (GTestIsInitialized()) return;
    %%%%%: 7376-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7376-block  1
        -: 7377:
    #####: 7378:  if (*argc <= 0) return;
    %%%%%: 7378-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7378-block  1
        -: 7379:
    #####: 7380:  g_argvs.clear();
    %%%%%: 7380-block  0
call    0 never executed
    #####: 7381:  for (int i = 0; i != *argc; i++) {
    %%%%%: 7381-block  0
branch  0 never executed
branch  1 never executed
    #####: 7382:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 7382-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 7382-block  1
call    4 never executed
    $$$$$: 7382-block  2
call    5 never executed
        -: 7383:  }
        -: 7384:
        -: 7385:#if GTEST_HAS_ABSL
        -: 7386:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 7387:#endif  // GTEST_HAS_ABSL
        -: 7388:
    #####: 7389:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 7389-block  0
call    0 never executed
    #####: 7390:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 7391:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 7374:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 7375:  // We don't want to run the initialization code twice.
       1*: 7376:  if (GTestIsInitialized()) return;
        1: 7376-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 7376-block  1
        -: 7377:
       1*: 7378:  if (*argc <= 0) return;
        1: 7378-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 7378-block  1
        -: 7379:
        1: 7380:  g_argvs.clear();
        1: 7380-block  0
call    0 returned 1
        3: 7381:  for (int i = 0; i != *argc; i++) {
        3: 7381-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2: 7382:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 7382-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 7382-block  1
call    4 returned 2
    $$$$$: 7382-block  2
call    5 never executed
        -: 7383:  }
        -: 7384:
        -: 7385:#if GTEST_HAS_ABSL
        -: 7386:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 7387:#endif  // GTEST_HAS_ABSL
        -: 7388:
        1: 7389:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 7389-block  0
call    0 returned 1
        1: 7390:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 7391:}
------------------
        -: 7392:
        -: 7393:}  // namespace internal
        -: 7394:
        -: 7395:// Initializes Google Test.  This must be called before calling
        -: 7396:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 7397:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 7398:// seen, it is removed from argv, and *argc is decremented.
        -: 7399://
        -: 7400:// No value is returned.  Instead, the Google Test flag variables are
        -: 7401:// updated.
        -: 7402://
        -: 7403:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 7404:void InitGoogleTest(int* argc, char** argv) {
        -: 7405:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 7406:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 7407:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 7408:  internal::InitGoogleTestImpl(argc, argv);
        1: 7408-block  0
call    0 returned 1
        -: 7409:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 7410:}
        -: 7411:
        -: 7412:// This overloaded version can be used in Windows programs compiled in
        -: 7413:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 7414:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 7415:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 7416:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 7417:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 7418:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 7418-block  0
call    0 never executed
        -: 7419:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 7420:}
        -: 7421:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 7422:std::string TempDir() {
        -: 7423:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 7424:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 7425:#endif
        -: 7426:
        -: 7427:#if GTEST_OS_WINDOWS_MOBILE
        -: 7428:  return "\\temp\\";
        -: 7429:#elif GTEST_OS_WINDOWS
        -: 7430:  const char* temp_dir = internal::posix::GetEnv("TEMP");
        -: 7431:  if (temp_dir == NULL || temp_dir[0] == '\0')
        -: 7432:    return "\\temp\\";
        -: 7433:  else if (temp_dir[strlen(temp_dir) - 1] == '\\')
        -: 7434:    return temp_dir;
        -: 7435:  else
        -: 7436:    return std::string(temp_dir) + "\\";
        -: 7437:#elif GTEST_OS_LINUX_ANDROID
        -: 7438:  return "/sdcard/";
        -: 7439:#else
    #####: 7440:  return "/tmp/";
    %%%%%: 7440-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 7440-block  1
call    4 never executed
    %%%%%: 7440-block  2
    $$$$$: 7440-block  3
call    5 never executed
        -: 7441:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 7442:}
        -: 7443:
        -: 7444:// Class ScopedTrace
        -: 7445:
        -: 7446:// Pushes the given source file location and message onto a per-thread
        -: 7447:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 7448:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 7449:  internal::TraceInfo trace;
    %%%%%: 7449-block  0
call    0 never executed
    %%%%%: 7449-block  1
call    1 never executed
    $$$$$: 7449-block  2
call    2 never executed
    #####: 7450:  trace.file = file;
    #####: 7451:  trace.line = line;
    #####: 7452:  trace.message.swap(message);
call    0 never executed
        -: 7453:
    #####: 7454:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7454-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7455:}
        -: 7456:
        -: 7457:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 7458:ScopedTrace::~ScopedTrace()
        -: 7459:    GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 7460:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 7460-block  0
call    0 never executed
call    1 never executed
    #####: 7461:}
        -: 7462:
        -: 7463:}  // namespace testing
        -: 7464:// Copyright 2005, Google Inc.
        -: 7465:// All rights reserved.
        -: 7466://
        -: 7467:// Redistribution and use in source and binary forms, with or without
        -: 7468:// modification, are permitted provided that the following conditions are
        -: 7469:// met:
        -: 7470://
        -: 7471://     * Redistributions of source code must retain the above copyright
        -: 7472:// notice, this list of conditions and the following disclaimer.
        -: 7473://     * Redistributions in binary form must reproduce the above
        -: 7474:// copyright notice, this list of conditions and the following disclaimer
        -: 7475:// in the documentation and/or other materials provided with the
        -: 7476:// distribution.
        -: 7477://     * Neither the name of Google Inc. nor the names of its
        -: 7478:// contributors may be used to endorse or promote products derived from
        -: 7479:// this software without specific prior written permission.
        -: 7480://
        -: 7481:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -: 7482:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -: 7483:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -: 7484:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -: 7485:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -: 7486:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -: 7487:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -: 7488:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -: 7489:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -: 7490:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -: 7491:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -: 7492:
        -: 7493://
        -: 7494:// This file implements death tests.
        -: 7495:
        -: 7496:
        -: 7497:#if GTEST_HAS_DEATH_TEST
        -: 7498:
        -: 7499:# if GTEST_OS_MAC
        -: 7500:#  include <crt_externs.h>
        -: 7501:# endif  // GTEST_OS_MAC
        -: 7502:
        -: 7503:# include <errno.h>
        -: 7504:# include <fcntl.h>
        -: 7505:# include <limits.h>
        -: 7506:
        -: 7507:# if GTEST_OS_LINUX
        -: 7508:#  include <signal.h>
        -: 7509:# endif  // GTEST_OS_LINUX
        -: 7510:
        -: 7511:# include <stdarg.h>
        -: 7512:
        -: 7513:# if GTEST_OS_WINDOWS
        -: 7514:#  include <windows.h>
        -: 7515:# else
        -: 7516:#  include <sys/mman.h>
        -: 7517:#  include <sys/wait.h>
        -: 7518:# endif  // GTEST_OS_WINDOWS
        -: 7519:
        -: 7520:# if GTEST_OS_QNX
        -: 7521:#  include <spawn.h>
        -: 7522:# endif  // GTEST_OS_QNX
        -: 7523:
        -: 7524:# if GTEST_OS_FUCHSIA
        -: 7525:#  include <lib/fdio/io.h>
        -: 7526:#  include <lib/fdio/spawn.h>
        -: 7527:#  include <zircon/processargs.h>
        -: 7528:#  include <zircon/syscalls.h>
        -: 7529:#  include <zircon/syscalls/port.h>
        -: 7530:# endif  // GTEST_OS_FUCHSIA
        -: 7531:
        -: 7532:#endif  // GTEST_HAS_DEATH_TEST
        -: 7533:
        -: 7534:
        -: 7535:namespace testing {
        -: 7536:
        -: 7537:// Constants.
        -: 7538:
        -: 7539:// The default death test style.
        -: 7540://
        -: 7541:// This is defined in internal/gtest-port.h as "fast", but can be overridden by
        -: 7542:// a definition in internal/custom/gtest-port.h. The recommended value, which is
        -: 7543:// used internally at Google, is "threadsafe".
        -: 7544:static const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;
        -: 7545:
        -: 7546:GTEST_DEFINE_string_(
        -: 7547:    death_test_style,
        -: 7548:    internal::StringFromGTestEnv("death_test_style", kDefaultDeathTestStyle),
        -: 7549:    "Indicates how to run a death test in a forked child process: "
        -: 7550:    "\"threadsafe\" (child process re-executes the test binary "
        -: 7551:    "from the beginning, running only the specific death test) or "
        -: 7552:    "\"fast\" (child process runs the death test immediately "
        -: 7553:    "after forking).");
        -: 7554:
        -: 7555:GTEST_DEFINE_bool_(
        -: 7556:    death_test_use_fork,
        -: 7557:    internal::BoolFromGTestEnv("death_test_use_fork", false),
        -: 7558:    "Instructs to use fork()/_exit() instead of clone() in death tests. "
        -: 7559:    "Ignored and always uses fork() on POSIX systems where clone() is not "
        -: 7560:    "implemented. Useful when running under valgrind or similar tools if "
        -: 7561:    "those do not support clone(). Valgrind 3.3.1 will just fail if "
        -: 7562:    "it sees an unsupported combination of clone() flags. "
        -: 7563:    "It is not recommended to use this flag w/o valgrind though it will "
        -: 7564:    "work in 99% of the cases. Once valgrind is fixed, this flag will "
        -: 7565:    "most likely be removed.");
        -: 7566:
        -: 7567:namespace internal {
        -: 7568:GTEST_DEFINE_string_(
        -: 7569:    internal_run_death_test, "",
        -: 7570:    "Indicates the file, line number, temporal index of "
        -: 7571:    "the single death test to run, and a file descriptor to "
        -: 7572:    "which a success code may be sent, all separated by "
        -: 7573:    "the '|' characters.  This flag is specified if and only if the current "
        -: 7574:    "process is a sub-process launched for running a thread-safe "
        -: 7575:    "death test.  FOR INTERNAL USE ONLY.");
        -: 7576:}  // namespace internal
        -: 7577:
        -: 7578:#if GTEST_HAS_DEATH_TEST
        -: 7579:
        -: 7580:namespace internal {
        -: 7581:
        -: 7582:// Valid only for fast death tests. Indicates the code is running in the
        -: 7583:// child process of a fast style death test.
        -: 7584:# if !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA
        -: 7585:static bool g_in_fast_death_test_child = false;
        -: 7586:# endif
        -: 7587:
        -: 7588:// Returns a Boolean value indicating whether the caller is currently
        -: 7589:// executing in the context of the death test child process.  Tools such as
        -: 7590:// Valgrind heap checkers may need this to modify their behavior in death
        -: 7591:// tests.  IMPORTANT: This is an internal utility.  Using it may break the
        -: 7592:// implementation of death tests.  User code MUST NOT use it.
function _ZN7testing8internal16InDeathTestChildEv called 0 returned 0% blocks executed 0%
    #####: 7593:bool InDeathTestChild() {
        -: 7594:# if GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA
        -: 7595:
        -: 7596:  // On Windows and Fuchsia, death tests are thread-safe regardless of the value
        -: 7597:  // of the death_test_style flag.
        -: 7598:  return !GTEST_FLAG(internal_run_death_test).empty();
        -: 7599:
        -: 7600:# else
        -: 7601:
    #####: 7602:  if (GTEST_FLAG(death_test_style) == "threadsafe")
    %%%%%: 7602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7603:    return !GTEST_FLAG(internal_run_death_test).empty();
    %%%%%: 7603-block  0
call    0 never executed
        -: 7604:  else
    #####: 7605:    return g_in_fast_death_test_child;
    %%%%%: 7605-block  0
        -: 7606:#endif
        -: 7607:}
        -: 7608:
        -: 7609:}  // namespace internal
        -: 7610:
        -: 7611:// ExitedWithCode constructor.
function _ZN7testing14ExitedWithCodeC2Ei called 0 returned 0% blocks executed 0%
    #####: 7612:ExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {
    #####: 7613:}
        -: 7614:
        -: 7615:// ExitedWithCode function-call operator.
function _ZNK7testing14ExitedWithCodeclEi called 0 returned 0% blocks executed 0%
    #####: 7616:bool ExitedWithCode::operator()(int exit_status) const {
        -: 7617:# if GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA
        -: 7618:
        -: 7619:  return exit_status == exit_code_;
        -: 7620:
        -: 7621:# else
        -: 7622:
    #####: 7623:  return WIFEXITED(exit_status) && WEXITSTATUS(exit_status) == exit_code_;
    %%%%%: 7623-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7623-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 7623-block  2
    %%%%%: 7623-block  3
    %%%%%: 7623-block  4
        -: 7624:
        -: 7625:# endif  // GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA
        -: 7626:}
        -: 7627:
        -: 7628:# if !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA
        -: 7629:// KilledBySignal constructor.
function _ZN7testing14KilledBySignalC2Ei called 0 returned 0% blocks executed 0%
    #####: 7630:KilledBySignal::KilledBySignal(int signum) : signum_(signum) {
    #####: 7631:}
        -: 7632:
        -: 7633:// KilledBySignal function-call operator.
function _ZNK7testing14KilledBySignalclEi called 0 returned 0% blocks executed 0%
    #####: 7634:bool KilledBySignal::operator()(int exit_status) const {
        -: 7635:#  if defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)
        -: 7636:  {
        -: 7637:    bool result;
        -: 7638:    if (GTEST_KILLED_BY_SIGNAL_OVERRIDE_(signum_, exit_status, &result)) {
        -: 7639:      return result;
        -: 7640:    }
        -: 7641:  }
        -: 7642:#  endif  // defined(GTEST_KILLED_BY_SIGNAL_OVERRIDE_)
    #####: 7643:  return WIFSIGNALED(exit_status) && WTERMSIG(exit_status) == signum_;
    %%%%%: 7643-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7643-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 7643-block  2
    %%%%%: 7643-block  3
    %%%%%: 7643-block  4
        -: 7644:}
        -: 7645:# endif  // !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA
        -: 7646:
        -: 7647:namespace internal {
        -: 7648:
        -: 7649:// Utilities needed for death tests.
        -: 7650:
        -: 7651:// Generates a textual description of a given exit code, in the format
        -: 7652:// specified by wait(2).
function _ZN7testing8internalL11ExitSummaryEi called 0 returned 0% blocks executed 0%
    #####: 7653:static std::string ExitSummary(int exit_code) {
    #####: 7654:  Message m;
    %%%%%: 7654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7654-block  1
call    3 never executed
    $$$$$: 7654-block  2
call    4 never executed
        -: 7655:
        -: 7656:# if GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA
        -: 7657:
        -: 7658:  m << "Exited with exit status " << exit_code;
        -: 7659:
        -: 7660:# else
        -: 7661:
    #####: 7662:  if (WIFEXITED(exit_code)) {
    %%%%%: 7662-block  0
branch  0 never executed
branch  1 never executed
    #####: 7663:    m << "Exited with exit status " << WEXITSTATUS(exit_code);
    %%%%%: 7663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7663-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7663-block  2
    $$$$$: 7663-block  3
    #####: 7664:  } else if (WIFSIGNALED(exit_code)) {
    %%%%%: 7664-block  0
branch  0 never executed
branch  1 never executed
    #####: 7665:    m << "Terminated by signal " << WTERMSIG(exit_code);
    %%%%%: 7665-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7665-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7665-block  2
    $$$$$: 7665-block  3
        -: 7666:  }
        -: 7667:#  ifdef WCOREDUMP
    #####: 7668:  if (WCOREDUMP(exit_code)) {
    %%%%%: 7668-block  0
branch  0 never executed
branch  1 never executed
    #####: 7669:    m << " (core dumped)";
    %%%%%: 7669-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7670:  }
        -: 7671:#  endif
        -: 7672:# endif  // GTEST_OS_WINDOWS || GTEST_OS_FUCHSIA
        -: 7673:
    #####: 7674:  return m.GetString();
    %%%%%: 7674-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7674-block  1
    %%%%%: 7674-block  2
        -: 7675:}
        -: 7676:
        -: 7677:// Returns true if exit_status describes a process that was terminated
        -: 7678:// by a signal, or exited normally with a nonzero exit code.
function _ZN7testing8internal20ExitedUnsuccessfullyEi called 0 returned 0% blocks executed 0%
    #####: 7679:bool ExitedUnsuccessfully(int exit_status) {
    #####: 7680:  return !ExitedWithCode(0)(exit_status);
    %%%%%: 7680-block  0
call    0 never executed
call    1 never executed
        -: 7681:}
        -: 7682:
        -: 7683:# if !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA
        -: 7684:// Generates a textual failure message when a death test finds more than
        -: 7685:// one thread running, or cannot determine the number of threads, prior
        -: 7686:// to executing the given statement.  It is the responsibility of the
        -: 7687:// caller not to pass a thread_count of 1.
function _ZN7testing8internalL22DeathTestThreadWarningEm called 0 returned 0% blocks executed 0%
    #####: 7688:static std::string DeathTestThreadWarning(size_t thread_count) {
    #####: 7689:  Message msg;
    %%%%%: 7689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7689-block  1
call    3 never executed
    $$$$$: 7689-block  2
call    4 never executed
    #####: 7690:  msg << "Death tests use fork(), which is unsafe particularly"
    %%%%%: 7690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7691:      << " in a threaded context. For this test, " << GTEST_NAME_ << " ";
    %%%%%: 7691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7691-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7691-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 7692:  if (thread_count == 0) {
    %%%%%: 7692-block  0
branch  0 never executed
branch  1 never executed
    #####: 7693:    msg << "couldn't detect the number of threads.";
    %%%%%: 7693-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7694:  } else {
    #####: 7695:    msg << "detected " << thread_count << " threads.";
    %%%%%: 7695-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7695-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7695-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 7696:  }
        -: 7697:  msg << " See "
        -: 7698:         "https://github.com/google/googletest/blob/master/googletest/docs/"
    #####: 7699:         "advanced.md#death-tests-and-threads"
    %%%%%: 7699-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7700:      << " for more explanation and suggested solutions, especially if"
    %%%%%: 7700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7701:      << " this is the last message you see before your test times out.";
    %%%%%: 7701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7702:  return msg.GetString();
    %%%%%: 7702-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7702-block  1
    %%%%%: 7702-block  2
        -: 7703:}
        -: 7704:# endif  // !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA
        -: 7705:
        -: 7706:// Flag characters for reporting a death test that did not die.
        -: 7707:static const char kDeathTestLived = 'L';
        -: 7708:static const char kDeathTestReturned = 'R';
        -: 7709:static const char kDeathTestThrew = 'T';
        -: 7710:static const char kDeathTestInternalError = 'I';
        -: 7711:
        -: 7712:#if GTEST_OS_FUCHSIA
        -: 7713:
        -: 7714:// File descriptor used for the pipe in the child process.
        -: 7715:static const int kFuchsiaReadPipeFd = 3;
        -: 7716:
        -: 7717:#endif
        -: 7718:
        -: 7719:// An enumeration describing all of the possible ways that a death test can
        -: 7720:// conclude.  DIED means that the process died while executing the test
        -: 7721:// code; LIVED means that process lived beyond the end of the test code;
        -: 7722:// RETURNED means that the test statement attempted to execute a return
        -: 7723:// statement, which is not allowed; THREW means that the test statement
        -: 7724:// returned control by throwing an exception.  IN_PROGRESS means the test
        -: 7725:// has not yet concluded.
        -: 7726:// FIXME: Unify names and possibly values for
        -: 7727:// AbortReason, DeathTestOutcome, and flag characters above.
        -: 7728:enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };
        -: 7729:
        -: 7730:// Routine for aborting the program which is safe to call from an
        -: 7731:// exec-style death test child process, in which case the error
        -: 7732:// message is propagated back to the parent process.  Otherwise, the
        -: 7733:// message is simply printed to stderr.  In either case, the program
        -: 7734:// then exits with status 1.
function _ZN7testing8internalL14DeathTestAbortERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 7735:static void DeathTestAbort(const std::string& message) {
        -: 7736:  // On a POSIX system, this function may be called from a threadsafe-style
        -: 7737:  // death test child process, which operates on a very small stack.  Use
        -: 7738:  // the heap for any additional non-minuscule memory requirements.
        -: 7739:  const InternalRunDeathTestFlag* const flag =
    #####: 7740:      GetUnitTestImpl()->internal_run_death_test_flag();
    %%%%%: 7740-block  0
call    0 never executed
call    1 never executed
    #####: 7741:  if (flag != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 7742:    FILE* parent = posix::FDOpen(flag->write_fd(), "w");
    %%%%%: 7742-block  0
call    0 never executed
call    1 never executed
    #####: 7743:    fputc(kDeathTestInternalError, parent);
call    0 never executed
    #####: 7744:    fprintf(parent, "%s", message.c_str());
call    0 never executed
call    1 never executed
    #####: 7745:    fflush(parent);
call    0 never executed
    #####: 7746:    _exit(1);
call    0 never executed
        -: 7747:  } else {
    #####: 7748:    fprintf(stderr, "%s", message.c_str());
    %%%%%: 7748-block  0
call    0 never executed
call    1 never executed
    #####: 7749:    fflush(stderr);
call    0 never executed
    #####: 7750:    posix::Abort();
call    0 never executed
        -: 7751:  }
    #####: 7752:}
        -: 7753:
        -: 7754:// A replacement for CHECK that calls DeathTestAbort if the assertion
        -: 7755:// fails.
        -: 7756:# define GTEST_DEATH_TEST_CHECK_(expression) \
        -: 7757:  do { \
        -: 7758:    if (!::testing::internal::IsTrue(expression)) { \
        -: 7759:      DeathTestAbort( \
        -: 7760:          ::std::string("CHECK failed: File ") + __FILE__ +  ", line " \
        -: 7761:          + ::testing::internal::StreamableToString(__LINE__) + ": " \
        -: 7762:          + #expression); \
        -: 7763:    } \
        -: 7764:  } while (::testing::internal::AlwaysFalse())
        -: 7765:
        -: 7766:// This macro is similar to GTEST_DEATH_TEST_CHECK_, but it is meant for
        -: 7767:// evaluating any system call that fulfills two conditions: it must return
        -: 7768:// -1 on failure, and set errno to EINTR when it is interrupted and
        -: 7769:// should be tried again.  The macro expands to a loop that repeatedly
        -: 7770:// evaluates the expression as long as it evaluates to -1 and sets
        -: 7771:// errno to EINTR.  If the expression evaluates to -1 but errno is
        -: 7772:// something other than EINTR, DeathTestAbort is called.
        -: 7773:# define GTEST_DEATH_TEST_CHECK_SYSCALL_(expression) \
        -: 7774:  do { \
        -: 7775:    int gtest_retval; \
        -: 7776:    do { \
        -: 7777:      gtest_retval = (expression); \
        -: 7778:    } while (gtest_retval == -1 && errno == EINTR); \
        -: 7779:    if (gtest_retval == -1) { \
        -: 7780:      DeathTestAbort( \
        -: 7781:          ::std::string("CHECK failed: File ") + __FILE__ + ", line " \
        -: 7782:          + ::testing::internal::StreamableToString(__LINE__) + ": " \
        -: 7783:          + #expression + " != -1"); \
        -: 7784:    } \
        -: 7785:  } while (::testing::internal::AlwaysFalse())
        -: 7786:
        -: 7787:// Returns the message describing the last system error in errno.
function _ZN7testing8internal23GetLastErrnoDescriptionB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 7788:std::string GetLastErrnoDescription() {
    #####: 7789:    return errno == 0 ? "" : posix::StrError(errno);
    %%%%%: 7789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7789-block  1
call    3 never executed
    %%%%%: 7789-block  2
    %%%%%: 7789-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 7789-block  4
call    7 never executed
    %%%%%: 7789-block  5
    $$$$$: 7789-block  6
call    8 never executed
        -: 7790:}
        -: 7791:
        -: 7792:// This is called from a death test parent process to read a failure
        -: 7793:// message from the death test child process and log it with the FATAL
        -: 7794:// severity. On Windows, the message is read from a pipe handle. On other
        -: 7795:// platforms, it is read from a file descriptor.
function _ZN7testing8internalL21FailFromInternalErrorEi called 0 returned 0% blocks executed 0%
    #####: 7796:static void FailFromInternalError(int fd) {
    #####: 7797:  Message error;
    %%%%%: 7797-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7797-block  1
call    3 never executed
    $$$$$: 7797-block  2
call    4 never executed
        -: 7798:  char buffer[256];
        -: 7799:  int num_read;
        -: 7800:
    #####: 7801:  do {
    %%%%%: 7801-block  0
    #####: 7802:    while ((num_read = posix::Read(fd, buffer, 255)) > 0) {
    %%%%%: 7802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7802-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 7802-block  2
    #####: 7803:      buffer[num_read] = '\0';
    #####: 7804:      error << buffer;
    %%%%%: 7804-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7805:    }
    #####: 7806:  } while (num_read == -1 && errno == EINTR);
    %%%%%: 7806-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7806-block  1
branch  2 never executed
branch  3 never executed
        -: 7807:
    #####: 7808:  if (num_read == 0) {
    %%%%%: 7808-block  0
branch  0 never executed
branch  1 never executed
    #####: 7809:    GTEST_LOG_(FATAL) << error.GetString();
    %%%%%: 7809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7809-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 7809-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 7809-block  3
call   10 never executed
call   11 never executed
    $$$$$: 7809-block  4
call   12 never executed
    $$$$$: 7809-block  5
    $$$$$: 7809-block  6
call   13 never executed
    $$$$$: 7809-block  7
        -: 7810:  } else {
    #####: 7811:    const int last_error = errno;
    #####: 7812:    GTEST_LOG_(FATAL) << "Error while reading death test internal: "
    %%%%%: 7812-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7812-block  1
call    3 never executed
    $$$$$: 7812-block  2
call    4 never executed
    $$$$$: 7812-block  3
    #####: 7813:                      << GetLastErrnoDescription() << " [" << last_error << "]";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7813-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7813-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 7813-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 7813-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 7813-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 7813-block  5
call   18 never executed
call   19 never executed
    $$$$$: 7813-block  6
call   20 never executed
    $$$$$: 7813-block  7
        -: 7814:  }
    #####: 7815:}
        -: 7816:
        -: 7817:// Death test constructor.  Increments the running death test count
        -: 7818:// for the current test.
function _ZN7testing8internal9DeathTestC2Ev called 0 returned 0% blocks executed 0%
    #####: 7819:DeathTest::DeathTest() {
    #####: 7820:  TestInfo* const info = GetUnitTestImpl()->current_test_info();
    %%%%%: 7820-block  0
call    0 never executed
call    1 never executed
    #####: 7821:  if (info == NULL) {
branch  0 never executed
branch  1 never executed
    #####: 7822:    DeathTestAbort("Cannot run a death test outside of a TEST or "
    %%%%%: 7822-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 7822-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 7822-block  2
call    7 never executed
call    8 never executed
    $$$$$: 7822-block  3
call    9 never executed
    $$$$$: 7822-block  4
    $$$$$: 7822-block  5
call   10 never executed
        -: 7823:                   "TEST_F construct");
        -: 7824:  }
    #####: 7825:}
    %%%%%: 7825-block  0
        -: 7826:
        -: 7827:// Creates and returns a death test by dispatching to the current
        -: 7828:// death test factory.
function _ZN7testing8internal9DeathTest6CreateEPKcPKNS0_2REES3_iPPS1_ called 0 returned 0% blocks executed 0%
    #####: 7829:bool DeathTest::Create(const char* statement, const RE* regex,
        -: 7830:                       const char* file, int line, DeathTest** test) {
    #####: 7831:  return GetUnitTestImpl()->death_test_factory()->Create(
    %%%%%: 7831-block  0
call    0 never executed
call    1 never executed
    #####: 7832:      statement, regex, file, line, test);
call    0 never executed
        -: 7833:}
        -: 7834:
function _ZN7testing8internal9DeathTest11LastMessageEv called 0 returned 0% blocks executed 0%
    #####: 7835:const char* DeathTest::LastMessage() {
    #####: 7836:  return last_death_test_message_.c_str();
    %%%%%: 7836-block  0
call    0 never executed
        -: 7837:}
        -: 7838:
function _ZN7testing8internal9DeathTest27set_last_death_test_messageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 7839:void DeathTest::set_last_death_test_message(const std::string& message) {
    #####: 7840:  last_death_test_message_ = message;
    %%%%%: 7840-block  0
call    0 never executed
    #####: 7841:}
        -: 7842:
        -: 7843:std::string DeathTest::last_death_test_message_;
        -: 7844:
        -: 7845:// Provides cross platform implementation for some death functionality.
        -: 7846:class DeathTestImpl : public DeathTest {
        -: 7847: protected:
function _ZN7testing8internal13DeathTestImplC2EPKcPKNS0_2REE called 0 returned 0% blocks executed 0%
    #####: 7848:  DeathTestImpl(const char* a_statement, const RE* a_regex)
    #####: 7849:      : statement_(a_statement),
        -: 7850:        regex_(a_regex),
        -: 7851:        spawned_(false),
        -: 7852:        status_(-1),
        -: 7853:        outcome_(IN_PROGRESS),
        -: 7854:        read_fd_(-1),
    #####: 7855:        write_fd_(-1) {}
    %%%%%: 7855-block  0
call    0 never executed
        -: 7856:
        -: 7857:  // read_fd_ is expected to be closed and cleared by a derived class.
    #####: 7858:  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }
------------------
_ZN7testing8internal13DeathTestImplD0Ev:
function _ZN7testing8internal13DeathTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 7858:  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }
    %%%%%: 7858-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal13DeathTestImplD2Ev:
function _ZN7testing8internal13DeathTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 7858:  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }
    %%%%%: 7858-block  0
    %%%%%: 7858-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7858-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    %%%%%: 7858-block  3
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 7858-block  4
    %%%%%: 7858-block  5
call   23 never executed
------------------
        -: 7859:
        -: 7860:  void Abort(AbortReason reason);
        -: 7861:  virtual bool Passed(bool status_ok);
        -: 7862:
function _ZNK7testing8internal13DeathTestImpl9statementEv called 0 returned 0% blocks executed 0%
    #####: 7863:  const char* statement() const { return statement_; }
    %%%%%: 7863-block  0
function _ZNK7testing8internal13DeathTestImpl5regexEv called 0 returned 0% blocks executed 0%
    #####: 7864:  const RE* regex() const { return regex_; }
    %%%%%: 7864-block  0
function _ZNK7testing8internal13DeathTestImpl7spawnedEv called 0 returned 0% blocks executed 0%
    #####: 7865:  bool spawned() const { return spawned_; }
    %%%%%: 7865-block  0
function _ZN7testing8internal13DeathTestImpl11set_spawnedEb called 0 returned 0% blocks executed 0%
    #####: 7866:  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }
function _ZNK7testing8internal13DeathTestImpl6statusEv called 0 returned 0% blocks executed 0%
    #####: 7867:  int status() const { return status_; }
    %%%%%: 7867-block  0
function _ZN7testing8internal13DeathTestImpl10set_statusEi called 0 returned 0% blocks executed 0%
    #####: 7868:  void set_status(int a_status) { status_ = a_status; }
function _ZNK7testing8internal13DeathTestImpl7outcomeEv called 0 returned 0% blocks executed 0%
    #####: 7869:  DeathTestOutcome outcome() const { return outcome_; }
    %%%%%: 7869-block  0
function _ZN7testing8internal13DeathTestImpl11set_outcomeENS0_16DeathTestOutcomeE called 0 returned 0% blocks executed 0%
    #####: 7870:  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }
function _ZNK7testing8internal13DeathTestImpl7read_fdEv called 0 returned 0% blocks executed 0%
    #####: 7871:  int read_fd() const { return read_fd_; }
    %%%%%: 7871-block  0
function _ZN7testing8internal13DeathTestImpl11set_read_fdEi called 0 returned 0% blocks executed 0%
    #####: 7872:  void set_read_fd(int fd) { read_fd_ = fd; }
function _ZNK7testing8internal13DeathTestImpl8write_fdEv called 0 returned 0% blocks executed 0%
    #####: 7873:  int write_fd() const { return write_fd_; }
    %%%%%: 7873-block  0
function _ZN7testing8internal13DeathTestImpl12set_write_fdEi called 0 returned 0% blocks executed 0%
    #####: 7874:  void set_write_fd(int fd) { write_fd_ = fd; }
        -: 7875:
        -: 7876:  // Called in the parent process only. Reads the result code of the death
        -: 7877:  // test child process via a pipe, interprets it to set the outcome_
        -: 7878:  // member, and closes read_fd_.  Outputs diagnostics and terminates in
        -: 7879:  // case of unexpected codes.
        -: 7880:  void ReadAndInterpretStatusByte();
        -: 7881:
        -: 7882: private:
        -: 7883:  // The textual content of the code this object is testing.  This class
        -: 7884:  // doesn't own this string and should not attempt to delete it.
        -: 7885:  const char* const statement_;
        -: 7886:  // The regular expression which test output must match.  DeathTestImpl
        -: 7887:  // doesn't own this object and should not attempt to delete it.
        -: 7888:  const RE* const regex_;
        -: 7889:  // True if the death test child process has been successfully spawned.
        -: 7890:  bool spawned_;
        -: 7891:  // The exit status of the child process.
        -: 7892:  int status_;
        -: 7893:  // How the death test concluded.
        -: 7894:  DeathTestOutcome outcome_;
        -: 7895:  // Descriptor to the read end of the pipe to the child process.  It is
        -: 7896:  // always -1 in the child process.  The child keeps its write end of the
        -: 7897:  // pipe in write_fd_.
        -: 7898:  int read_fd_;
        -: 7899:  // Descriptor to the child's write end of the pipe to the parent process.
        -: 7900:  // It is always -1 in the parent process.  The parent keeps its end of the
        -: 7901:  // pipe in read_fd_.
        -: 7902:  int write_fd_;
        -: 7903:};
        -: 7904:
        -: 7905:// Called in the parent process only. Reads the result code of the death
        -: 7906:// test child process via a pipe, interprets it to set the outcome_
        -: 7907:// member, and closes read_fd_.  Outputs diagnostics and terminates in
        -: 7908:// case of unexpected codes.
function _ZN7testing8internal13DeathTestImpl26ReadAndInterpretStatusByteEv called 0 returned 0% blocks executed 0%
    #####: 7909:void DeathTestImpl::ReadAndInterpretStatusByte() {
        -: 7910:  char flag;
        -: 7911:  int bytes_read;
        -: 7912:
        -: 7913:  // The read() here blocks until data is available (signifying the
        -: 7914:  // failure of the death test) or until the pipe is closed (signifying
        -: 7915:  // its success), so it's okay to call this in the parent before
        -: 7916:  // the child process has exited.
    #####: 7917:  do {
    %%%%%: 7917-block  0
    #####: 7918:    bytes_read = posix::Read(read_fd(), &flag, 1);
    %%%%%: 7918-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7919:  } while (bytes_read == -1 && errno == EINTR);
    %%%%%: 7919-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7919-block  1
branch  2 never executed
branch  3 never executed
        -: 7920:
    #####: 7921:  if (bytes_read == 0) {
    %%%%%: 7921-block  0
branch  0 never executed
branch  1 never executed
    #####: 7922:    set_outcome(DIED);
    %%%%%: 7922-block  0
call    0 never executed
    #####: 7923:  } else if (bytes_read == 1) {
    %%%%%: 7923-block  0
branch  0 never executed
branch  1 never executed
    #####: 7924:    switch (flag) {
    %%%%%: 7924-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7925:      case kDeathTestReturned:
    #####: 7926:        set_outcome(RETURNED);
    %%%%%: 7926-block  0
call    0 never executed
    #####: 7927:        break;
    #####: 7928:      case kDeathTestThrew:
    #####: 7929:        set_outcome(THREW);
    %%%%%: 7929-block  0
call    0 never executed
    #####: 7930:        break;
    #####: 7931:      case kDeathTestLived:
    #####: 7932:        set_outcome(LIVED);
    %%%%%: 7932-block  0
call    0 never executed
    #####: 7933:        break;
    #####: 7934:      case kDeathTestInternalError:
    #####: 7935:        FailFromInternalError(read_fd());  // Does not return.
    %%%%%: 7935-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7936:        break;
    %%%%%: 7936-block  0
    #####: 7937:      default:
    #####: 7938:        GTEST_LOG_(FATAL) << "Death test child process reported "
    %%%%%: 7938-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7938-block  1
call    3 never executed
    %%%%%: 7938-block  2
call    4 never executed
    $$$$$: 7938-block  3
call    5 never executed
    $$$$$: 7938-block  4
    #####: 7939:                          << "unexpected status byte ("
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7939-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7940:                          << static_cast<unsigned int>(flag) << ")";
    %%%%%: 7940-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7940-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 7941:    }
        -: 7942:  } else {
    #####: 7943:    GTEST_LOG_(FATAL) << "Read from death test child process failed: "
    %%%%%: 7943-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7943-block  1
call    3 never executed
    $$$$$: 7943-block  2
call    4 never executed
    $$$$$: 7943-block  3
    #####: 7944:                      << GetLastErrnoDescription();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7944-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7944-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 7944-block  2
call    9 never executed
call   10 never executed
    $$$$$: 7944-block  3
call   11 never executed
    $$$$$: 7944-block  4
        -: 7945:  }
    #####: 7946:  GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Close(read_fd()));
    %%%%%: 7946-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 7946-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 7946-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 7946-block  3
    %%%%%: 7946-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 7946-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 7946-block  6
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 7946-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 7946-block  8
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 7946-block  9
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 7946-block 10
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 7946-block 11
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%: 7946-block 12
call   32 never executed
branch 33 never executed
branch 34 never executed
    %%%%%: 7946-block 13
call   35 never executed
branch 36 never executed
branch 37 never executed
    %%%%%: 7946-block 14
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
    %%%%%: 7946-block 15
call   47 never executed
branch 48 never executed
branch 49 never executed
    %%%%%: 7946-block 16
branch 50 never executed
branch 51 never executed
    %%%%%: 7946-block 17
    $$$$$: 7946-block 18
call   52 never executed
    $$$$$: 7946-block 19
    $$$$$: 7946-block 20
call   53 never executed
    $$$$$: 7946-block 21
    $$$$$: 7946-block 22
call   54 never executed
    $$$$$: 7946-block 23
    $$$$$: 7946-block 24
call   55 never executed
    $$$$$: 7946-block 25
    $$$$$: 7946-block 26
call   56 never executed
    $$$$$: 7946-block 27
    $$$$$: 7946-block 28
call   57 never executed
    $$$$$: 7946-block 29
    $$$$$: 7946-block 30
call   58 never executed
    $$$$$: 7946-block 31
    $$$$$: 7946-block 32
call   59 never executed
    $$$$$: 7946-block 33
    $$$$$: 7946-block 34
call   60 never executed
    $$$$$: 7946-block 35
    $$$$$: 7946-block 36
    #####: 7947:  set_read_fd(-1);
    %%%%%: 7947-block  0
call    0 never executed
    #####: 7948:}
        -: 7949:
        -: 7950:// Signals that the death test code which should have exited, didn't.
        -: 7951:// Should be called only in a death test child process.
        -: 7952:// Writes a status byte to the child's status file descriptor, then
        -: 7953:// calls _exit(1).
function _ZN7testing8internal13DeathTestImpl5AbortENS0_9DeathTest11AbortReasonE called 0 returned 0% blocks executed 0%
    #####: 7954:void DeathTestImpl::Abort(AbortReason reason) {
        -: 7955:  // The parent process considers the death test to be a failure if
        -: 7956:  // it finds any data in our pipe.  So, here we write a single flag byte
        -: 7957:  // to the pipe, then exit.
    #####: 7958:  const char status_ch =
    %%%%%: 7958-block  0
    #####: 7959:      reason == TEST_DID_NOT_DIE ? kDeathTestLived :
    %%%%%: 7959-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 7959-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 7959-block  2
    %%%%%: 7959-block  3
    %%%%%: 7959-block  4
    %%%%%: 7959-block  5
        -: 7960:      reason == TEST_THREW_EXCEPTION ? kDeathTestThrew : kDeathTestReturned;
        -: 7961:
    #####: 7962:  GTEST_DEATH_TEST_CHECK_SYSCALL_(posix::Write(write_fd(), &status_ch, 1));
    %%%%%: 7962-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 7962-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 7962-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 7962-block  3
    %%%%%: 7962-block  4
branch  8 never executed
branch  9 never executed
    %%%%%: 7962-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 7962-block  6
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 7962-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 7962-block  8
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 7962-block  9
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 7962-block 10
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 7962-block 11
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%: 7962-block 12
call   32 never executed
branch 33 never executed
branch 34 never executed
    %%%%%: 7962-block 13
call   35 never executed
branch 36 never executed
branch 37 never executed
    %%%%%: 7962-block 14
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
    %%%%%: 7962-block 15
call   47 never executed
branch 48 never executed
branch 49 never executed
    %%%%%: 7962-block 16
branch 50 never executed
branch 51 never executed
    %%%%%: 7962-block 17
    $$$$$: 7962-block 18
call   52 never executed
    $$$$$: 7962-block 19
    $$$$$: 7962-block 20
call   53 never executed
    $$$$$: 7962-block 21
    $$$$$: 7962-block 22
call   54 never executed
    $$$$$: 7962-block 23
    $$$$$: 7962-block 24
call   55 never executed
    $$$$$: 7962-block 25
    $$$$$: 7962-block 26
call   56 never executed
    $$$$$: 7962-block 27
    $$$$$: 7962-block 28
call   57 never executed
    $$$$$: 7962-block 29
    $$$$$: 7962-block 30
call   58 never executed
    $$$$$: 7962-block 31
    $$$$$: 7962-block 32
call   59 never executed
    $$$$$: 7962-block 33
    $$$$$: 7962-block 34
call   60 never executed
    $$$$$: 7962-block 35
    $$$$$: 7962-block 36
        -: 7963:  // We are leaking the descriptor here because on some platforms (i.e.,
        -: 7964:  // when built as Windows DLL), destructors of global objects will still
        -: 7965:  // run after calling _exit(). On such systems, write_fd_ will be
        -: 7966:  // indirectly closed from the destructor of UnitTestImpl, causing double
        -: 7967:  // close if it is also closed here. On debug configurations, double close
        -: 7968:  // may assert. As there are no in-process buffers to flush here, we are
        -: 7969:  // relying on the OS to close the descriptor after the process terminates
        -: 7970:  // when the destructors are not run.
    #####: 7971:  _exit(1);  // Exits w/o any normal exit hooks (we were supposed to crash)
    %%%%%: 7971-block  0
call    0 never executed
        -: 7972:}
        -: 7973:
        -: 7974:// Returns an indented copy of stderr output for a death test.
        -: 7975:// This makes distinguishing death test output lines from regular log lines
        -: 7976:// much easier.
function _ZN7testing8internalL21FormatDeathTestOutputERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 7977:static ::std::string FormatDeathTestOutput(const ::std::string& output) {
    #####: 7978:  ::std::string ret;
    %%%%%: 7978-block  0
call    0 never executed
    #####: 7979:  for (size_t at = 0; ; ) {
    #####: 7980:    const size_t line_end = output.find('\n', at);
    %%%%%: 7980-block  0
call    0 never executed
    #####: 7981:    ret += "[  DEATH   ] ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7982:    if (line_end == ::std::string::npos) {
    %%%%%: 7982-block  0
branch  0 never executed
branch  1 never executed
    #####: 7983:      ret += output.substr(at);
    %%%%%: 7983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7983-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7983-block  2
call    6 never executed
    $$$$$: 7983-block  3
call    7 never executed
    $$$$$: 7983-block  4
    #####: 7984:      break;
        -: 7985:    }
    #####: 7986:    ret += output.substr(at, line_end + 1 - at);
    %%%%%: 7986-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 7986-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 7986-block  2
call    6 never executed
    $$$$$: 7986-block  3
call    7 never executed
    $$$$$: 7986-block  4
    #####: 7987:    at = line_end + 1;
    #####: 7988:  }
    #####: 7989:  return ret;
    %%%%%: 7989-block  0
    %%%%%: 7989-block  1
        -: 7990:}
        -: 7991:
        -: 7992:// Assesses the success or failure of a death test, using both private
        -: 7993:// members which have previously been set, and one argument:
        -: 7994://
        -: 7995:// Private data members:
        -: 7996://   outcome:  An enumeration describing how the death test
        -: 7997://             concluded: DIED, LIVED, THREW, or RETURNED.  The death test
        -: 7998://             fails in the latter three cases.
        -: 7999://   status:   The exit status of the child process. On *nix, it is in the
        -: 8000://             in the format specified by wait(2). On Windows, this is the
        -: 8001://             value supplied to the ExitProcess() API or a numeric code
        -: 8002://             of the exception that terminated the program.
        -: 8003://   regex:    A regular expression object to be applied to
        -: 8004://             the test's captured standard error output; the death test
        -: 8005://             fails if it does not match.
        -: 8006://
        -: 8007:// Argument:
        -: 8008://   status_ok: true if exit_status is acceptable in the context of
        -: 8009://              this particular death test, which fails if it is false
        -: 8010://
        -: 8011:// Returns true iff all of the above conditions are met.  Otherwise, the
        -: 8012:// first failing condition, in the order given above, is the one that is
        -: 8013:// reported. Also sets the last death test message string.
function _ZN7testing8internal13DeathTestImpl6PassedEb called 0 returned 0% blocks executed 0%
    #####: 8014:bool DeathTestImpl::Passed(bool status_ok) {
    #####: 8015:  if (!spawned())
    %%%%%: 8015-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8016:    return false;
    %%%%%: 8016-block  0
        -: 8017:
    #####: 8018:  const std::string error_message = GetCapturedStderr();
    %%%%%: 8018-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 8018-block  1
call    4 never executed
        -: 8019:
    #####: 8020:  bool success = false;
    #####: 8021:  Message buffer;
    %%%%%: 8021-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8021-block  1
call    3 never executed
        -: 8022:
    #####: 8023:  buffer << "Death test: " << statement() << "\n";
    %%%%%: 8023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8023-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8023-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 8023-block  3
    #####: 8024:  switch (outcome()) {
    %%%%%: 8024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8025:    case LIVED:
    #####: 8026:      buffer << "    Result: failed to die.\n"
    %%%%%: 8026-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8027:             << " Error msg:\n" << FormatDeathTestOutput(error_message);
    %%%%%: 8027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8027-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8027-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8027-block  3
call    9 never executed
    $$$$$: 8027-block  4
call   10 never executed
    $$$$$: 8027-block  5
    #####: 8028:      break;
    #####: 8029:    case THREW:
    #####: 8030:      buffer << "    Result: threw an exception.\n"
    %%%%%: 8030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8031:             << " Error msg:\n" << FormatDeathTestOutput(error_message);
    %%%%%: 8031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8031-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8031-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8031-block  3
call    9 never executed
    $$$$$: 8031-block  4
call   10 never executed
    $$$$$: 8031-block  5
    #####: 8032:      break;
    #####: 8033:    case RETURNED:
    #####: 8034:      buffer << "    Result: illegal return in test statement.\n"
    %%%%%: 8034-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8035:             << " Error msg:\n" << FormatDeathTestOutput(error_message);
    %%%%%: 8035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8035-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8035-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8035-block  3
call    9 never executed
    $$$$$: 8035-block  4
call   10 never executed
    $$$$$: 8035-block  5
    #####: 8036:      break;
    #####: 8037:    case DIED:
    #####: 8038:      if (status_ok) {
    %%%%%: 8038-block  0
branch  0 never executed
branch  1 never executed
        -: 8039:# if GTEST_USES_PCRE
        -: 8040:        // PCRE regexes support embedded NULs.
        -: 8041:        const bool matched = RE::PartialMatch(error_message, *regex());
        -: 8042:# else
    #####: 8043:        const bool matched = RE::PartialMatch(error_message.c_str(), *regex());
    %%%%%: 8043-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 8044:# endif  // GTEST_USES_PCRE
    #####: 8045:        if (matched) {
    %%%%%: 8045-block  0
branch  0 never executed
branch  1 never executed
    #####: 8046:          success = true;
    %%%%%: 8046-block  0
        -: 8047:        } else {
    #####: 8048:          buffer << "    Result: died but not with expected error.\n"
    %%%%%: 8048-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8049:                 << "  Expected: " << regex()->pattern() << "\n"
    %%%%%: 8049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8049-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 8049-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$: 8049-block  3
    #####: 8050:                 << "Actual msg:\n" << FormatDeathTestOutput(error_message);
    %%%%%: 8050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8050-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8050-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8050-block  3
call    9 never executed
    $$$$$: 8050-block  4
call   10 never executed
    $$$$$: 8050-block  5
        -: 8051:        }
        -: 8052:      } else {
    #####: 8053:        buffer << "    Result: died but not with expected exit code:\n"
    %%%%%: 8053-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8054:               << "            " << ExitSummary(status()) << "\n"
    %%%%%: 8054-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8054-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8054-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8054-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 8054-block  4
call   13 never executed
    $$$$$: 8054-block  5
    #####: 8055:               << "Actual msg:\n" << FormatDeathTestOutput(error_message);
    %%%%%: 8055-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8055-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8055-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8055-block  3
call    9 never executed
call   10 never executed
    $$$$$: 8055-block  4
call   11 never executed
    $$$$$: 8055-block  5
        -: 8056:      }
    #####: 8057:      break;
    %%%%%: 8057-block  0
    #####: 8058:    case IN_PROGRESS:
        -: 8059:    default:
    #####: 8060:      GTEST_LOG_(FATAL)
    %%%%%: 8060-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8060-block  1
call    3 never executed
    %%%%%: 8060-block  2
call    4 never executed
    $$$$$: 8060-block  3
call    5 never executed
    $$$$$: 8060-block  4
    #####: 8061:          << "DeathTest::Passed somehow called before conclusion of test";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8062:  }
        -: 8063:
    #####: 8064:  DeathTest::set_last_death_test_message(buffer.GetString());
    %%%%%: 8064-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8064-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8064-block  2
call    6 never executed
    $$$$$: 8064-block  3
call    7 never executed
    $$$$$: 8064-block  4
    #####: 8065:  return success;
call    0 never executed
        -: 8066:}
        -: 8067:
        -: 8068:# if GTEST_OS_WINDOWS
        -: 8069:// WindowsDeathTest implements death tests on Windows. Due to the
        -: 8070:// specifics of starting new processes on Windows, death tests there are
        -: 8071:// always threadsafe, and Google Test considers the
        -: 8072:// --gtest_death_test_style=fast setting to be equivalent to
        -: 8073:// --gtest_death_test_style=threadsafe there.
        -: 8074://
        -: 8075:// A few implementation notes:  Like the Linux version, the Windows
        -: 8076:// implementation uses pipes for child-to-parent communication. But due to
        -: 8077:// the specifics of pipes on Windows, some extra steps are required:
        -: 8078://
        -: 8079:// 1. The parent creates a communication pipe and stores handles to both
        -: 8080://    ends of it.
        -: 8081:// 2. The parent starts the child and provides it with the information
        -: 8082://    necessary to acquire the handle to the write end of the pipe.
        -: 8083:// 3. The child acquires the write end of the pipe and signals the parent
        -: 8084://    using a Windows event.
        -: 8085:// 4. Now the parent can release the write end of the pipe on its side. If
        -: 8086://    this is done before step 3, the object's reference count goes down to
        -: 8087://    0 and it is destroyed, preventing the child from acquiring it. The
        -: 8088://    parent now has to release it, or read operations on the read end of
        -: 8089://    the pipe will not return when the child terminates.
        -: 8090:// 5. The parent reads child's output through the pipe (outcome code and
        -: 8091://    any possible error messages) from the pipe, and its stderr and then
        -: 8092://    determines whether to fail the test.
        -: 8093://
        -: 8094:// Note: to distinguish Win32 API calls from the local method and function
        -: 8095:// calls, the former are explicitly resolved in the global namespace.
        -: 8096://
        -: 8097:class WindowsDeathTest : public DeathTestImpl {
        -: 8098: public:
        -: 8099:  WindowsDeathTest(const char* a_statement,
        -: 8100:                   const RE* a_regex,
        -: 8101:                   const char* file,
        -: 8102:                   int line)
        -: 8103:      : DeathTestImpl(a_statement, a_regex), file_(file), line_(line) {}
        -: 8104:
        -: 8105:  // All of these virtual functions are inherited from DeathTest.
        -: 8106:  virtual int Wait();
        -: 8107:  virtual TestRole AssumeRole();
        -: 8108:
        -: 8109: private:
        -: 8110:  // The name of the file in which the death test is located.
        -: 8111:  const char* const file_;
        -: 8112:  // The line number on which the death test is located.
        -: 8113:  const int line_;
        -: 8114:  // Handle to the write end of the pipe to the child process.
        -: 8115:  AutoHandle write_handle_;
        -: 8116:  // Child process handle.
        -: 8117:  AutoHandle child_handle_;
        -: 8118:  // Event the child process uses to signal the parent that it has
        -: 8119:  // acquired the handle to the write end of the pipe. After seeing this
        -: 8120:  // event the parent can release its own handles to make sure its
        -: 8121:  // ReadFile() calls return when the child terminates.
        -: 8122:  AutoHandle event_handle_;
        -: 8123:};
        -: 8124:
        -: 8125:// Waits for the child in a death test to exit, returning its exit
        -: 8126:// status, or 0 if no child process exists.  As a side effect, sets the
        -: 8127:// outcome data member.
        -: 8128:int WindowsDeathTest::Wait() {
        -: 8129:  if (!spawned())
        -: 8130:    return 0;
        -: 8131:
        -: 8132:  // Wait until the child either signals that it has acquired the write end
        -: 8133:  // of the pipe or it dies.
        -: 8134:  const HANDLE wait_handles[2] = { child_handle_.Get(), event_handle_.Get() };
        -: 8135:  switch (::WaitForMultipleObjects(2,
        -: 8136:                                   wait_handles,
        -: 8137:                                   FALSE,  // Waits for any of the handles.
        -: 8138:                                   INFINITE)) {
        -: 8139:    case WAIT_OBJECT_0:
        -: 8140:    case WAIT_OBJECT_0 + 1:
        -: 8141:      break;
        -: 8142:    default:
        -: 8143:      GTEST_DEATH_TEST_CHECK_(false);  // Should not get here.
        -: 8144:  }
        -: 8145:
        -: 8146:  // The child has acquired the write end of the pipe or exited.
        -: 8147:  // We release the handle on our side and continue.
        -: 8148:  write_handle_.Reset();
        -: 8149:  event_handle_.Reset();
        -: 8150:
        -: 8151:  ReadAndInterpretStatusByte();
        -: 8152:
        -: 8153:  // Waits for the child process to exit if it haven't already. This
        -: 8154:  // returns immediately if the child has already exited, regardless of
        -: 8155:  // whether previous calls to WaitForMultipleObjects synchronized on this
        -: 8156:  // handle or not.
        -: 8157:  GTEST_DEATH_TEST_CHECK_(
        -: 8158:      WAIT_OBJECT_0 == ::WaitForSingleObject(child_handle_.Get(),
        -: 8159:                                             INFINITE));
        -: 8160:  DWORD status_code;
        -: 8161:  GTEST_DEATH_TEST_CHECK_(
        -: 8162:      ::GetExitCodeProcess(child_handle_.Get(), &status_code) != FALSE);
        -: 8163:  child_handle_.Reset();
        -: 8164:  set_status(static_cast<int>(status_code));
        -: 8165:  return status();
        -: 8166:}
        -: 8167:
        -: 8168:// The AssumeRole process for a Windows death test.  It creates a child
        -: 8169:// process with the same executable as the current process to run the
        -: 8170:// death test.  The child process is given the --gtest_filter and
        -: 8171:// --gtest_internal_run_death_test flags such that it knows to run the
        -: 8172:// current death test only.
        -: 8173:DeathTest::TestRole WindowsDeathTest::AssumeRole() {
        -: 8174:  const UnitTestImpl* const impl = GetUnitTestImpl();
        -: 8175:  const InternalRunDeathTestFlag* const flag =
        -: 8176:      impl->internal_run_death_test_flag();
        -: 8177:  const TestInfo* const info = impl->current_test_info();
        -: 8178:  const int death_test_index = info->result()->death_test_count();
        -: 8179:
        -: 8180:  if (flag != NULL) {
        -: 8181:    // ParseInternalRunDeathTestFlag() has performed all the necessary
        -: 8182:    // processing.
        -: 8183:    set_write_fd(flag->write_fd());
        -: 8184:    return EXECUTE_TEST;
        -: 8185:  }
        -: 8186:
        -: 8187:  // WindowsDeathTest uses an anonymous pipe to communicate results of
        -: 8188:  // a death test.
        -: 8189:  SECURITY_ATTRIBUTES handles_are_inheritable = {
        -: 8190:    sizeof(SECURITY_ATTRIBUTES), NULL, TRUE };
        -: 8191:  HANDLE read_handle, write_handle;
        -: 8192:  GTEST_DEATH_TEST_CHECK_(
        -: 8193:      ::CreatePipe(&read_handle, &write_handle, &handles_are_inheritable,
        -: 8194:                   0)  // Default buffer size.
        -: 8195:      != FALSE);
        -: 8196:  set_read_fd(::_open_osfhandle(reinterpret_cast<intptr_t>(read_handle),
        -: 8197:                                O_RDONLY));
        -: 8198:  write_handle_.Reset(write_handle);
        -: 8199:  event_handle_.Reset(::CreateEvent(
        -: 8200:      &handles_are_inheritable,
        -: 8201:      TRUE,    // The event will automatically reset to non-signaled state.
        -: 8202:      FALSE,   // The initial state is non-signalled.
        -: 8203:      NULL));  // The even is unnamed.
        -: 8204:  GTEST_DEATH_TEST_CHECK_(event_handle_.Get() != NULL);
        -: 8205:  const std::string filter_flag =
        -: 8206:      std::string("--") + GTEST_FLAG_PREFIX_ + kFilterFlag + "=" +
        -: 8207:      info->test_case_name() + "." + info->name();
        -: 8208:  const std::string internal_flag =
        -: 8209:      std::string("--") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag +
        -: 8210:      "=" + file_ + "|" + StreamableToString(line_) + "|" +
        -: 8211:      StreamableToString(death_test_index) + "|" +
        -: 8212:      StreamableToString(static_cast<unsigned int>(::GetCurrentProcessId())) +
        -: 8213:      // size_t has the same width as pointers on both 32-bit and 64-bit
        -: 8214:      // Windows platforms.
        -: 8215:      // See http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.
        -: 8216:      "|" + StreamableToString(reinterpret_cast<size_t>(write_handle)) +
        -: 8217:      "|" + StreamableToString(reinterpret_cast<size_t>(event_handle_.Get()));
        -: 8218:
        -: 8219:  char executable_path[_MAX_PATH + 1];  // NOLINT
        -: 8220:  GTEST_DEATH_TEST_CHECK_(
        -: 8221:      _MAX_PATH + 1 != ::GetModuleFileNameA(NULL,
        -: 8222:                                            executable_path,
        -: 8223:                                            _MAX_PATH));
        -: 8224:
        -: 8225:  std::string command_line =
        -: 8226:      std::string(::GetCommandLineA()) + " " + filter_flag + " \"" +
        -: 8227:      internal_flag + "\"";
        -: 8228:
        -: 8229:  DeathTest::set_last_death_test_message("");
        -: 8230:
        -: 8231:  CaptureStderr();
        -: 8232:  // Flush the log buffers since the log streams are shared with the child.
        -: 8233:  FlushInfoLog();
        -: 8234:
        -: 8235:  // The child process will share the standard handles with the parent.
        -: 8236:  STARTUPINFOA startup_info;
        -: 8237:  memset(&startup_info, 0, sizeof(STARTUPINFO));
        -: 8238:  startup_info.dwFlags = STARTF_USESTDHANDLES;
        -: 8239:  startup_info.hStdInput = ::GetStdHandle(STD_INPUT_HANDLE);
        -: 8240:  startup_info.hStdOutput = ::GetStdHandle(STD_OUTPUT_HANDLE);
        -: 8241:  startup_info.hStdError = ::GetStdHandle(STD_ERROR_HANDLE);
        -: 8242:
        -: 8243:  PROCESS_INFORMATION process_info;
        -: 8244:  GTEST_DEATH_TEST_CHECK_(::CreateProcessA(
        -: 8245:      executable_path,
        -: 8246:      const_cast<char*>(command_line.c_str()),
        -: 8247:      NULL,   // Retuned process handle is not inheritable.
        -: 8248:      NULL,   // Retuned thread handle is not inheritable.
        -: 8249:      TRUE,   // Child inherits all inheritable handles (for write_handle_).
        -: 8250:      0x0,    // Default creation flags.
        -: 8251:      NULL,   // Inherit the parent's environment.
        -: 8252:      UnitTest::GetInstance()->original_working_dir(),
        -: 8253:      &startup_info,
        -: 8254:      &process_info) != FALSE);
        -: 8255:  child_handle_.Reset(process_info.hProcess);
        -: 8256:  ::CloseHandle(process_info.hThread);
        -: 8257:  set_spawned(true);
        -: 8258:  return OVERSEE_TEST;
        -: 8259:}
        -: 8260:
        -: 8261:# elif GTEST_OS_FUCHSIA
        -: 8262:
        -: 8263:class FuchsiaDeathTest : public DeathTestImpl {
        -: 8264: public:
        -: 8265:  FuchsiaDeathTest(const char* a_statement,
        -: 8266:                   const RE* a_regex,
        -: 8267:                   const char* file,
        -: 8268:                   int line)
        -: 8269:      : DeathTestImpl(a_statement, a_regex), file_(file), line_(line) {}
        -: 8270:  virtual ~FuchsiaDeathTest() {
        -: 8271:    zx_status_t status = zx_handle_close(child_process_);
        -: 8272:    GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 8273:    status = zx_handle_close(port_);
        -: 8274:    GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 8275:  }
        -: 8276:
        -: 8277:  // All of these virtual functions are inherited from DeathTest.
        -: 8278:  virtual int Wait();
        -: 8279:  virtual TestRole AssumeRole();
        -: 8280:
        -: 8281: private:
        -: 8282:  // The name of the file in which the death test is located.
        -: 8283:  const char* const file_;
        -: 8284:  // The line number on which the death test is located.
        -: 8285:  const int line_;
        -: 8286:
        -: 8287:  zx_handle_t child_process_ = ZX_HANDLE_INVALID;
        -: 8288:  zx_handle_t port_ = ZX_HANDLE_INVALID;
        -: 8289:};
        -: 8290:
        -: 8291:// Utility class for accumulating command-line arguments.
        -: 8292:class Arguments {
        -: 8293: public:
        -: 8294:  Arguments() {
        -: 8295:    args_.push_back(NULL);
        -: 8296:  }
        -: 8297:
        -: 8298:  ~Arguments() {
        -: 8299:    for (std::vector<char*>::iterator i = args_.begin(); i != args_.end();
        -: 8300:         ++i) {
        -: 8301:      free(*i);
        -: 8302:    }
        -: 8303:  }
        -: 8304:  void AddArgument(const char* argument) {
        -: 8305:    args_.insert(args_.end() - 1, posix::StrDup(argument));
        -: 8306:  }
        -: 8307:
        -: 8308:  template <typename Str>
        -: 8309:  void AddArguments(const ::std::vector<Str>& arguments) {
        -: 8310:    for (typename ::std::vector<Str>::const_iterator i = arguments.begin();
        -: 8311:         i != arguments.end();
        -: 8312:         ++i) {
        -: 8313:      args_.insert(args_.end() - 1, posix::StrDup(i->c_str()));
        -: 8314:    }
        -: 8315:  }
        -: 8316:  char* const* Argv() {
        -: 8317:    return &args_[0];
        -: 8318:  }
        -: 8319:
        -: 8320:  int size() {
        -: 8321:    return args_.size() - 1;
        -: 8322:  }
        -: 8323:
        -: 8324: private:
        -: 8325:  std::vector<char*> args_;
        -: 8326:};
        -: 8327:
        -: 8328:// Waits for the child in a death test to exit, returning its exit
        -: 8329:// status, or 0 if no child process exists.  As a side effect, sets the
        -: 8330:// outcome data member.
        -: 8331:int FuchsiaDeathTest::Wait() {
        -: 8332:  if (!spawned())
        -: 8333:    return 0;
        -: 8334:
        -: 8335:  // Register to wait for the child process to terminate.
        -: 8336:  zx_status_t status_zx;
        -: 8337:  status_zx = zx_object_wait_async(child_process_,
        -: 8338:                                   port_,
        -: 8339:                                   0 /* key */,
        -: 8340:                                   ZX_PROCESS_TERMINATED,
        -: 8341:                                   ZX_WAIT_ASYNC_ONCE);
        -: 8342:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -: 8343:
        -: 8344:  // Wait for it to terminate, or an exception to be received.
        -: 8345:  zx_port_packet_t packet;
        -: 8346:  status_zx = zx_port_wait(port_, ZX_TIME_INFINITE, &packet);
        -: 8347:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -: 8348:
        -: 8349:  if (ZX_PKT_IS_EXCEPTION(packet.type)) {
        -: 8350:    // Process encountered an exception. Kill it directly rather than letting
        -: 8351:    // other handlers process the event.
        -: 8352:    status_zx = zx_task_kill(child_process_);
        -: 8353:    GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -: 8354:
        -: 8355:    // Now wait for |child_process_| to terminate.
        -: 8356:    zx_signals_t signals = 0;
        -: 8357:    status_zx = zx_object_wait_one(
        -: 8358:        child_process_, ZX_PROCESS_TERMINATED, ZX_TIME_INFINITE, &signals);
        -: 8359:    GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -: 8360:    GTEST_DEATH_TEST_CHECK_(signals & ZX_PROCESS_TERMINATED);
        -: 8361:  } else {
        -: 8362:    // Process terminated.
        -: 8363:    GTEST_DEATH_TEST_CHECK_(ZX_PKT_IS_SIGNAL_ONE(packet.type));
        -: 8364:    GTEST_DEATH_TEST_CHECK_(packet.signal.observed & ZX_PROCESS_TERMINATED);
        -: 8365:  }
        -: 8366:
        -: 8367:  ReadAndInterpretStatusByte();
        -: 8368:
        -: 8369:  zx_info_process_t buffer;
        -: 8370:  status_zx = zx_object_get_info(
        -: 8371:      child_process_,
        -: 8372:      ZX_INFO_PROCESS,
        -: 8373:      &buffer,
        -: 8374:      sizeof(buffer),
        -: 8375:      nullptr,
        -: 8376:      nullptr);
        -: 8377:  GTEST_DEATH_TEST_CHECK_(status_zx == ZX_OK);
        -: 8378:
        -: 8379:  GTEST_DEATH_TEST_CHECK_(buffer.exited);
        -: 8380:  set_status(buffer.return_code);
        -: 8381:  return status();
        -: 8382:}
        -: 8383:
        -: 8384:// The AssumeRole process for a Fuchsia death test.  It creates a child
        -: 8385:// process with the same executable as the current process to run the
        -: 8386:// death test.  The child process is given the --gtest_filter and
        -: 8387:// --gtest_internal_run_death_test flags such that it knows to run the
        -: 8388:// current death test only.
        -: 8389:DeathTest::TestRole FuchsiaDeathTest::AssumeRole() {
        -: 8390:  const UnitTestImpl* const impl = GetUnitTestImpl();
        -: 8391:  const InternalRunDeathTestFlag* const flag =
        -: 8392:      impl->internal_run_death_test_flag();
        -: 8393:  const TestInfo* const info = impl->current_test_info();
        -: 8394:  const int death_test_index = info->result()->death_test_count();
        -: 8395:
        -: 8396:  if (flag != NULL) {
        -: 8397:    // ParseInternalRunDeathTestFlag() has performed all the necessary
        -: 8398:    // processing.
        -: 8399:    set_write_fd(kFuchsiaReadPipeFd);
        -: 8400:    return EXECUTE_TEST;
        -: 8401:  }
        -: 8402:
        -: 8403:  CaptureStderr();
        -: 8404:  // Flush the log buffers since the log streams are shared with the child.
        -: 8405:  FlushInfoLog();
        -: 8406:
        -: 8407:  // Build the child process command line.
        -: 8408:  const std::string filter_flag =
        -: 8409:      std::string("--") + GTEST_FLAG_PREFIX_ + kFilterFlag + "="
        -: 8410:      + info->test_case_name() + "." + info->name();
        -: 8411:  const std::string internal_flag =
        -: 8412:      std::string("--") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag + "="
        -: 8413:      + file_ + "|"
        -: 8414:      + StreamableToString(line_) + "|"
        -: 8415:      + StreamableToString(death_test_index);
        -: 8416:  Arguments args;
        -: 8417:  args.AddArguments(GetInjectableArgvs());
        -: 8418:  args.AddArgument(filter_flag.c_str());
        -: 8419:  args.AddArgument(internal_flag.c_str());
        -: 8420:
        -: 8421:  // Build the pipe for communication with the child.
        -: 8422:  zx_status_t status;
        -: 8423:  zx_handle_t child_pipe_handle;
        -: 8424:  uint32_t type;
        -: 8425:  status = fdio_pipe_half(&child_pipe_handle, &type);
        -: 8426:  GTEST_DEATH_TEST_CHECK_(status >= 0);
        -: 8427:  set_read_fd(status);
        -: 8428:
        -: 8429:  // Set the pipe handle for the child.
        -: 8430:  fdio_spawn_action_t add_handle_action = {};
        -: 8431:  add_handle_action.action = FDIO_SPAWN_ACTION_ADD_HANDLE;
        -: 8432:  add_handle_action.h.id = PA_HND(type, kFuchsiaReadPipeFd);
        -: 8433:  add_handle_action.h.handle = child_pipe_handle;
        -: 8434:
        -: 8435:  // Spawn the child process.
        -: 8436:  status = fdio_spawn_etc(ZX_HANDLE_INVALID, FDIO_SPAWN_CLONE_ALL,
        -: 8437:                          args.Argv()[0], args.Argv(), nullptr, 1,
        -: 8438:                          &add_handle_action, &child_process_, nullptr);
        -: 8439:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 8440:
        -: 8441:  // Create an exception port and attach it to the |child_process_|, to allow
        -: 8442:  // us to suppress the system default exception handler from firing.
        -: 8443:  status = zx_port_create(0, &port_);
        -: 8444:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 8445:  status = zx_task_bind_exception_port(
        -: 8446:      child_process_, port_, 0 /* key */, 0 /*options */);
        -: 8447:  GTEST_DEATH_TEST_CHECK_(status == ZX_OK);
        -: 8448:
        -: 8449:  set_spawned(true);
        -: 8450:  return OVERSEE_TEST;
        -: 8451:}
        -: 8452:
        -: 8453:#else  // We are neither on Windows, nor on Fuchsia.
        -: 8454:
        -: 8455:// ForkingDeathTest provides implementations for most of the abstract
        -: 8456:// methods of the DeathTest interface.  Only the AssumeRole method is
        -: 8457:// left undefined.
        -: 8458:class ForkingDeathTest : public DeathTestImpl {
        -: 8459: public:
        -: 8460:  ForkingDeathTest(const char* statement, const RE* regex);
        -: 8461:
        -: 8462:  // All of these virtual functions are inherited from DeathTest.
        -: 8463:  virtual int Wait();
        -: 8464:
        -: 8465: protected:
function _ZN7testing8internal16ForkingDeathTest13set_child_pidEi called 0 returned 0% blocks executed 0%
    #####: 8466:  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }
        -: 8467:
        -: 8468: private:
        -: 8469:  // PID of child process during death test; 0 in the child process itself.
        -: 8470:  pid_t child_pid_;
        -: 8471:};
        -: 8472:
        -: 8473:// Constructs a ForkingDeathTest.
function _ZN7testing8internal16ForkingDeathTestC2EPKcPKNS0_2REE called 0 returned 0% blocks executed 0%
    #####: 8474:ForkingDeathTest::ForkingDeathTest(const char* a_statement, const RE* a_regex)
        -: 8475:    : DeathTestImpl(a_statement, a_regex),
    #####: 8476:      child_pid_(-1) {}
    %%%%%: 8476-block  0
call    0 never executed
        -: 8477:
        -: 8478:// Waits for the child in a death test to exit, returning its exit
        -: 8479:// status, or 0 if no child process exists.  As a side effect, sets the
        -: 8480:// outcome data member.
function _ZN7testing8internal16ForkingDeathTest4WaitEv called 0 returned 0% blocks executed 0%
    #####: 8481:int ForkingDeathTest::Wait() {
    #####: 8482:  if (!spawned())
    %%%%%: 8482-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8483:    return 0;
    %%%%%: 8483-block  0
        -: 8484:
    #####: 8485:  ReadAndInterpretStatusByte();
    %%%%%: 8485-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8486:
        -: 8487:  int status_value;
    #####: 8488:  GTEST_DEATH_TEST_CHECK_SYSCALL_(waitpid(child_pid_, &status_value, 0));
    %%%%%: 8488-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8488-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 8488-block  2
branch  5 never executed
branch  6 never executed
    %%%%%: 8488-block  3
    %%%%%: 8488-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 8488-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8488-block  6
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8488-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8488-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8488-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8488-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8488-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 8488-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 8488-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 8488-block 14
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
    %%%%%: 8488-block 15
call   46 never executed
branch 47 never executed
branch 48 never executed
    %%%%%: 8488-block 16
branch 49 never executed
branch 50 never executed
    %%%%%: 8488-block 17
    $$$$$: 8488-block 18
call   51 never executed
    $$$$$: 8488-block 19
    $$$$$: 8488-block 20
call   52 never executed
    $$$$$: 8488-block 21
    $$$$$: 8488-block 22
call   53 never executed
    $$$$$: 8488-block 23
    $$$$$: 8488-block 24
call   54 never executed
    $$$$$: 8488-block 25
    $$$$$: 8488-block 26
call   55 never executed
    $$$$$: 8488-block 27
    $$$$$: 8488-block 28
call   56 never executed
    $$$$$: 8488-block 29
    $$$$$: 8488-block 30
call   57 never executed
    $$$$$: 8488-block 31
    $$$$$: 8488-block 32
call   58 never executed
    $$$$$: 8488-block 33
    $$$$$: 8488-block 34
call   59 never executed
    $$$$$: 8488-block 35
    $$$$$: 8488-block 36
    #####: 8489:  set_status(status_value);
    %%%%%: 8489-block  0
call    0 never executed
    #####: 8490:  return status_value;
        -: 8491:}
        -: 8492:
        -: 8493:// A concrete death test class that forks, then immediately runs the test
        -: 8494:// in the child process.
        -: 8495:class NoExecDeathTest : public ForkingDeathTest {
        -: 8496: public:
function _ZN7testing8internal15NoExecDeathTestC2EPKcPKNS0_2REE called 0 returned 0% blocks executed 0%
    #####: 8497:  NoExecDeathTest(const char* a_statement, const RE* a_regex) :
    #####: 8498:      ForkingDeathTest(a_statement, a_regex) { }
    %%%%%: 8498-block  0
call    0 never executed
        -: 8499:  virtual TestRole AssumeRole();
        -: 8500:};
        -: 8501:
        -: 8502:// The AssumeRole process for a fork-and-run death test.  It implements a
        -: 8503:// straightforward fork, with a simple pipe to transmit the status byte.
function _ZN7testing8internal15NoExecDeathTest10AssumeRoleEv called 0 returned 0% blocks executed 0%
    #####: 8504:DeathTest::TestRole NoExecDeathTest::AssumeRole() {
    #####: 8505:  const size_t thread_count = GetThreadCount();
    %%%%%: 8505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8506:  if (thread_count != 1) {
    %%%%%: 8506-block  0
branch  0 never executed
branch  1 never executed
    #####: 8507:    GTEST_LOG_(WARNING) << DeathTestThreadWarning(thread_count);
    %%%%%: 8507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8507-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8507-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8507-block  3
call   10 never executed
call   11 never executed
    $$$$$: 8507-block  4
call   12 never executed
    $$$$$: 8507-block  5
    $$$$$: 8507-block  6
call   13 never executed
    $$$$$: 8507-block  7
        -: 8508:  }
        -: 8509:
        -: 8510:  int pipe_fd[2];
    #####: 8511:  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);
    %%%%%: 8511-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8511-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8511-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 8511-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8511-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 8511-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 8511-block  6
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 8511-block  7
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 8511-block  8
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 8511-block  9
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    %%%%%: 8511-block 10
call   37 never executed
branch 38 never executed
branch 39 never executed
    %%%%%: 8511-block 11
branch 40 never executed
branch 41 never executed
    %%%%%: 8511-block 12
    $$$$$: 8511-block 13
call   42 never executed
    $$$$$: 8511-block 14
    $$$$$: 8511-block 15
call   43 never executed
    $$$$$: 8511-block 16
    $$$$$: 8511-block 17
call   44 never executed
    $$$$$: 8511-block 18
    $$$$$: 8511-block 19
call   45 never executed
    $$$$$: 8511-block 20
    $$$$$: 8511-block 21
call   46 never executed
    $$$$$: 8511-block 22
    $$$$$: 8511-block 23
call   47 never executed
    $$$$$: 8511-block 24
    $$$$$: 8511-block 25
call   48 never executed
    $$$$$: 8511-block 26
    $$$$$: 8511-block 27
call   49 never executed
    $$$$$: 8511-block 28
    $$$$$: 8511-block 29
        -: 8512:
    #####: 8513:  DeathTest::set_last_death_test_message("");
    %%%%%: 8513-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8513-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8513-block  2
call    7 never executed
call    8 never executed
    $$$$$: 8513-block  3
call    9 never executed
    $$$$$: 8513-block  4
    $$$$$: 8513-block  5
call   10 never executed
    $$$$$: 8513-block  6
    #####: 8514:  CaptureStderr();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8515:  // When we fork the process below, the log file buffers are copied, but the
        -: 8516:  // file descriptors are shared.  We flush all log files here so that closing
        -: 8517:  // the file descriptors in the child process doesn't throw off the
        -: 8518:  // synchronization between descriptors and buffers in the parent process.
        -: 8519:  // This is as close to the fork as possible to avoid a race condition in case
        -: 8520:  // there are multiple threads running before the death test, and another
        -: 8521:  // thread writes to the log file.
    #####: 8522:  FlushInfoLog();
    %%%%%: 8522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8523:
    #####: 8524:  const pid_t child_pid = fork();
    %%%%%: 8524-block  0
call    0 never executed
    #####: 8525:  GTEST_DEATH_TEST_CHECK_(child_pid != -1);
    %%%%%: 8525-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8525-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8525-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8525-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 8525-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8525-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8525-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8525-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8525-block  8
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8525-block  9
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    %%%%%: 8525-block 10
call   36 never executed
branch 37 never executed
branch 38 never executed
    %%%%%: 8525-block 11
branch 39 never executed
branch 40 never executed
    %%%%%: 8525-block 12
    $$$$$: 8525-block 13
call   41 never executed
    $$$$$: 8525-block 14
    $$$$$: 8525-block 15
call   42 never executed
    $$$$$: 8525-block 16
    $$$$$: 8525-block 17
call   43 never executed
    $$$$$: 8525-block 18
    $$$$$: 8525-block 19
call   44 never executed
    $$$$$: 8525-block 20
    $$$$$: 8525-block 21
call   45 never executed
    $$$$$: 8525-block 22
    $$$$$: 8525-block 23
call   46 never executed
    $$$$$: 8525-block 24
    $$$$$: 8525-block 25
call   47 never executed
    $$$$$: 8525-block 26
    $$$$$: 8525-block 27
call   48 never executed
    $$$$$: 8525-block 28
    $$$$$: 8525-block 29
    #####: 8526:  set_child_pid(child_pid);
    %%%%%: 8526-block  0
call    0 never executed
    #####: 8527:  if (child_pid == 0) {
branch  0 never executed
branch  1 never executed
    #####: 8528:    GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[0]));
    %%%%%: 8528-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8528-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 8528-block  2
branch  5 never executed
branch  6 never executed
    %%%%%: 8528-block  3
    %%%%%: 8528-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 8528-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8528-block  6
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8528-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8528-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8528-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8528-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8528-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 8528-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 8528-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 8528-block 14
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
    %%%%%: 8528-block 15
call   46 never executed
branch 47 never executed
branch 48 never executed
    %%%%%: 8528-block 16
branch 49 never executed
branch 50 never executed
    %%%%%: 8528-block 17
    $$$$$: 8528-block 18
call   51 never executed
    $$$$$: 8528-block 19
    $$$$$: 8528-block 20
call   52 never executed
    $$$$$: 8528-block 21
    $$$$$: 8528-block 22
call   53 never executed
    $$$$$: 8528-block 23
    $$$$$: 8528-block 24
call   54 never executed
    $$$$$: 8528-block 25
    $$$$$: 8528-block 26
call   55 never executed
    $$$$$: 8528-block 27
    $$$$$: 8528-block 28
call   56 never executed
    $$$$$: 8528-block 29
    $$$$$: 8528-block 30
call   57 never executed
    $$$$$: 8528-block 31
    $$$$$: 8528-block 32
call   58 never executed
    $$$$$: 8528-block 33
    $$$$$: 8528-block 34
call   59 never executed
    $$$$$: 8528-block 35
    $$$$$: 8528-block 36
    #####: 8529:    set_write_fd(pipe_fd[1]);
    %%%%%: 8529-block  0
call    0 never executed
        -: 8530:    // Redirects all logging to stderr in the child process to prevent
        -: 8531:    // concurrent writes to the log files.  We capture stderr in the parent
        -: 8532:    // process and append the child process' output to a log.
    #####: 8533:    LogToStderr();
call    0 never executed
        -: 8534:    // Event forwarding to the listeners of event listener API mush be shut
        -: 8535:    // down in death test subprocesses.
    #####: 8536:    GetUnitTestImpl()->listeners()->SuppressEventForwarding();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8536-block  0
call    3 never executed
call    4 never executed
    #####: 8537:    g_in_fast_death_test_child = true;
    #####: 8538:    return EXECUTE_TEST;
        -: 8539:  } else {
    #####: 8540:    GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));
    %%%%%: 8540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8540-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 8540-block  2
branch  5 never executed
branch  6 never executed
    %%%%%: 8540-block  3
    %%%%%: 8540-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 8540-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8540-block  6
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8540-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8540-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8540-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8540-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8540-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 8540-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 8540-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 8540-block 14
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
    %%%%%: 8540-block 15
call   46 never executed
branch 47 never executed
branch 48 never executed
    %%%%%: 8540-block 16
branch 49 never executed
branch 50 never executed
    %%%%%: 8540-block 17
    $$$$$: 8540-block 18
call   51 never executed
    $$$$$: 8540-block 19
    $$$$$: 8540-block 20
call   52 never executed
    $$$$$: 8540-block 21
    $$$$$: 8540-block 22
call   53 never executed
    $$$$$: 8540-block 23
    $$$$$: 8540-block 24
call   54 never executed
    $$$$$: 8540-block 25
    $$$$$: 8540-block 26
call   55 never executed
    $$$$$: 8540-block 27
    $$$$$: 8540-block 28
call   56 never executed
    $$$$$: 8540-block 29
    $$$$$: 8540-block 30
call   57 never executed
    $$$$$: 8540-block 31
    $$$$$: 8540-block 32
call   58 never executed
    $$$$$: 8540-block 33
    $$$$$: 8540-block 34
call   59 never executed
    $$$$$: 8540-block 35
    $$$$$: 8540-block 36
    #####: 8541:    set_read_fd(pipe_fd[0]);
    %%%%%: 8541-block  0
call    0 never executed
    #####: 8542:    set_spawned(true);
call    0 never executed
    #####: 8543:    return OVERSEE_TEST;
        -: 8544:  }
        -: 8545:}
        -: 8546:
        -: 8547:// A concrete death test class that forks and re-executes the main
        -: 8548:// program from the beginning, with command-line flags set that cause
        -: 8549:// only this specific death test to be run.
        -: 8550:class ExecDeathTest : public ForkingDeathTest {
        -: 8551: public:
function _ZN7testing8internal13ExecDeathTestC2EPKcPKNS0_2REES3_i called 0 returned 0% blocks executed 0%
    #####: 8552:  ExecDeathTest(const char* a_statement, const RE* a_regex,
    #####: 8553:                const char* file, int line) :
    #####: 8554:      ForkingDeathTest(a_statement, a_regex), file_(file), line_(line) { }
    %%%%%: 8554-block  0
call    0 never executed
        -: 8555:  virtual TestRole AssumeRole();
        -: 8556: private:
function _ZN7testing8internal13ExecDeathTest32GetArgvsForDeathTestChildProcessB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 8557:  static ::std::vector<std::string> GetArgvsForDeathTestChildProcess() {
    #####: 8558:    ::std::vector<std::string> args = GetInjectableArgvs();
    %%%%%: 8558-block  0
call    0 never executed
        -: 8559:#  if defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)
        -: 8560:    ::std::vector<std::string> extra_args =
        -: 8561:        GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_();
        -: 8562:    args.insert(args.end(), extra_args.begin(), extra_args.end());
        -: 8563:#  endif  // defined(GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_)
    #####: 8564:    return args;
        -: 8565:  }
        -: 8566:  // The name of the file in which the death test is located.
        -: 8567:  const char* const file_;
        -: 8568:  // The line number on which the death test is located.
        -: 8569:  const int line_;
        -: 8570:};
        -: 8571:
        -: 8572:// Utility class for accumulating command-line arguments.
        -: 8573:class Arguments {
        -: 8574: public:
function _ZN7testing8internal9ArgumentsC2Ev called 0 returned 0% blocks executed 0%
    #####: 8575:  Arguments() {
    %%%%%: 8575-block  0
call    0 never executed
    $$$$$: 8575-block  1
call    1 never executed
    #####: 8576:    args_.push_back(NULL);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8576-block  0
    #####: 8577:  }
    %%%%%: 8577-block  0
        -: 8578:
function _ZN7testing8internal9ArgumentsD2Ev called 0 returned 0% blocks executed 0%
    #####: 8579:  ~Arguments() {
    %%%%%: 8579-block  0
call    0 never executed
    #####: 8580:    for (std::vector<char*>::iterator i = args_.begin(); i != args_.end();
    %%%%%: 8580-block  0
call    0 never executed
    %%%%%: 8580-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8581:         ++i) {
    #####: 8582:      free(*i);
    %%%%%: 8582-block  0
call    0 never executed
call    1 never executed
        -: 8583:    }
    #####: 8584:  }
function _ZN7testing8internal9Arguments11AddArgumentEPKc called 0 returned 0% blocks executed 0%
    #####: 8585:  void AddArgument(const char* argument) {
    #####: 8586:    args_.insert(args_.end() - 1, posix::StrDup(argument));
    %%%%%: 8586-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 8586-block  1
    $$$$$: 8586-block  2
    $$$$$: 8586-block  3
    #####: 8587:  }
    %%%%%: 8587-block  0
        -: 8588:
        -: 8589:  template <typename Str>
function _ZN7testing8internal9Arguments12AddArgumentsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRKSt6vectorIT_SaISA_EE called 0 returned 0% blocks executed 0%
    #####: 8590:  void AddArguments(const ::std::vector<Str>& arguments) {
    #####: 8591:    for (typename ::std::vector<Str>::const_iterator i = arguments.begin();
    %%%%%: 8591-block  0
call    0 never executed
    #####: 8592:         i != arguments.end();
    %%%%%: 8592-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8593:         ++i) {
    #####: 8594:      args_.insert(args_.end() - 1, posix::StrDup(i->c_str()));
    %%%%%: 8594-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8594-block  1
call    9 never executed
    $$$$$: 8594-block  2
    $$$$$: 8594-block  3
    $$$$$: 8594-block  4
    $$$$$: 8594-block  5
        -: 8595:    }
    #####: 8596:  }
    %%%%%: 8596-block  0
function _ZN7testing8internal9Arguments4ArgvEv called 0 returned 0% blocks executed 0%
    #####: 8597:  char* const* Argv() {
    #####: 8598:    return &args_[0];
    %%%%%: 8598-block  0
call    0 never executed
        -: 8599:  }
        -: 8600:
        -: 8601: private:
        -: 8602:  std::vector<char*> args_;
        -: 8603:};
        -: 8604:
        -: 8605:// A struct that encompasses the arguments to the child process of a
        -: 8606:// threadsafe-style death test process.
        -: 8607:struct ExecDeathTestArgs {
        -: 8608:  char* const* argv;  // Command-line arguments for the child's call to exec
        -: 8609:  int close_fd;       // File descriptor to close; the read end of a pipe
        -: 8610:};
        -: 8611:
        -: 8612:#  if GTEST_OS_MAC
        -: 8613:inline char** GetEnviron() {
        -: 8614:  // When Google Test is built as a framework on MacOS X, the environ variable
        -: 8615:  // is unavailable. Apple's documentation (man environ) recommends using
        -: 8616:  // _NSGetEnviron() instead.
        -: 8617:  return *_NSGetEnviron();
        -: 8618:}
        -: 8619:#  else
        -: 8620:// Some POSIX platforms expect you to declare environ. extern "C" makes
        -: 8621:// it reside in the global namespace.
        -: 8622:extern "C" char** environ;
function _ZN7testing8internal10GetEnvironEv called 0 returned 0% blocks executed 0%
    #####: 8623:inline char** GetEnviron() { return environ; }
    %%%%%: 8623-block  0
        -: 8624:#  endif  // GTEST_OS_MAC
        -: 8625:
        -: 8626:#  if !GTEST_OS_QNX
        -: 8627:// The main function for a threadsafe-style death test child process.
        -: 8628:// This function is called in a clone()-ed process and thus must avoid
        -: 8629:// any potentially unsafe operations like malloc or libc functions.
function _ZN7testing8internalL22ExecDeathTestChildMainEPv called 0 returned 0% blocks executed 0%
    #####: 8630:static int ExecDeathTestChildMain(void* child_arg) {
    #####: 8631:  ExecDeathTestArgs* const args = static_cast<ExecDeathTestArgs*>(child_arg);
    %%%%%: 8631-block  0
    #####: 8632:  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(args->close_fd));
    %%%%%: 8632-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8632-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 8632-block  2
    %%%%%: 8632-block  3
branch  5 never executed
branch  6 never executed
    %%%%%: 8632-block  4
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8632-block  5
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8632-block  6
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 8632-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 8632-block  8
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 8632-block  9
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 8632-block 10
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 8632-block 11
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%: 8632-block 12
call   32 never executed
branch 33 never executed
branch 34 never executed
    %%%%%: 8632-block 13
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
    %%%%%: 8632-block 14
call   44 never executed
branch 45 never executed
branch 46 never executed
    %%%%%: 8632-block 15
    $$$$$: 8632-block 16
call   47 never executed
    $$$$$: 8632-block 17
    $$$$$: 8632-block 18
call   48 never executed
    $$$$$: 8632-block 19
    $$$$$: 8632-block 20
call   49 never executed
    $$$$$: 8632-block 21
    $$$$$: 8632-block 22
call   50 never executed
    $$$$$: 8632-block 23
    $$$$$: 8632-block 24
call   51 never executed
    $$$$$: 8632-block 25
    $$$$$: 8632-block 26
call   52 never executed
    $$$$$: 8632-block 27
    $$$$$: 8632-block 28
call   53 never executed
    $$$$$: 8632-block 29
    $$$$$: 8632-block 30
call   54 never executed
    $$$$$: 8632-block 31
    $$$$$: 8632-block 32
call   55 never executed
    $$$$$: 8632-block 33
    $$$$$: 8632-block 34
call   56 never executed
        -: 8633:
        -: 8634:  // We need to execute the test program in the same environment where
        -: 8635:  // it was originally invoked.  Therefore we change to the original
        -: 8636:  // working directory first.
        -: 8637:  const char* const original_dir =
    #####: 8638:      UnitTest::GetInstance()->original_working_dir();
    %%%%%: 8638-block  0
call    0 never executed
call    1 never executed
        -: 8639:  // We can safely call chdir() as it's a direct system call.
    #####: 8640:  if (chdir(original_dir) != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8641:    DeathTestAbort(std::string("chdir(\"") + original_dir + "\") failed: " +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8641-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8641-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8641-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 8641-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8641-block  4
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 8641-block  5
call   21 never executed
    $$$$$: 8641-block  6
    $$$$$: 8641-block  7
call   22 never executed
    $$$$$: 8641-block  8
    $$$$$: 8641-block  9
call   23 never executed
    $$$$$: 8641-block 10
    $$$$$: 8641-block 11
call   24 never executed
    $$$$$: 8641-block 12
    $$$$$: 8641-block 13
call   25 never executed
    $$$$$: 8641-block 14
    #####: 8642:                   GetLastErrnoDescription());
    %%%%%: 8642-block  0
call    0 never executed
call    1 never executed
    $$$$$: 8642-block  1
call    2 never executed
    $$$$$: 8642-block  2
call    3 never executed
    #####: 8643:    return EXIT_FAILURE;
        -: 8644:  }
        -: 8645:
        -: 8646:  // We can safely call execve() as it's a direct system call.  We
        -: 8647:  // cannot use execvp() as it's a libc function and thus potentially
        -: 8648:  // unsafe.  Since execve() doesn't search the PATH, the user must
        -: 8649:  // invoke the test program via a valid path that contains at least
        -: 8650:  // one path separator.
    #####: 8651:  execve(args->argv[0], args->argv, GetEnviron());
    %%%%%: 8651-block  0
call    0 never executed
    #####: 8652:  DeathTestAbort(std::string("execve(") + args->argv[0] + ", ...) in " +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8652-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8652-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8652-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 8652-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 8652-block  4
call   20 never executed
    $$$$$: 8652-block  5
    $$$$$: 8652-block  6
call   21 never executed
    $$$$$: 8652-block  7
    $$$$$: 8652-block  8
call   22 never executed
    $$$$$: 8652-block  9
    $$$$$: 8652-block 10
call   23 never executed
    $$$$$: 8652-block 11
    $$$$$: 8652-block 12
call   24 never executed
    $$$$$: 8652-block 13
    #####: 8653:                 original_dir + " failed: " +
    %%%%%: 8653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8653-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8653-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 8653-block  3
call    9 never executed
    $$$$$: 8653-block  4
    $$$$$: 8653-block  5
call   10 never executed
    $$$$$: 8653-block  6
    #####: 8654:                 GetLastErrnoDescription());
call    0 never executed
call    1 never executed
    $$$$$: 8654-block  0
call    2 never executed
    #####: 8655:  return EXIT_FAILURE;
        -: 8656:}
        -: 8657:#  endif  // !GTEST_OS_QNX
        -: 8658:
        -: 8659:#  if GTEST_HAS_CLONE
        -: 8660:// Two utility routines that together determine the direction the stack
        -: 8661:// grows.
        -: 8662:// This could be accomplished more elegantly by a single recursive
        -: 8663:// function, but we want to guard against the unlikely possibility of
        -: 8664:// a smart compiler optimizing the recursion away.
        -: 8665://
        -: 8666:// GTEST_NO_INLINE_ is required to prevent GCC 4.6 from inlining
        -: 8667:// StackLowerThanAddress into StackGrowsDown, which then doesn't give
        -: 8668:// correct answer.
        -: 8669:static void StackLowerThanAddress(const void* ptr,
        -: 8670:                                  bool* result) GTEST_NO_INLINE_;
function _ZN7testing8internalL21StackLowerThanAddressEPKvPb called 0 returned 0% blocks executed 0%
    #####: 8671:static void StackLowerThanAddress(const void* ptr, bool* result) {
        -: 8672:  int dummy;
    #####: 8673:  *result = (&dummy < ptr);
    #####: 8674:}
        -: 8675:
        -: 8676:// Make sure AddressSanitizer does not tamper with the stack here.
        -: 8677:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
function _ZN7testing8internalL14StackGrowsDownEv called 0 returned 0% blocks executed 0%
    #####: 8678:static bool StackGrowsDown() {
        -: 8679:  int dummy;
        -: 8680:  bool result;
    #####: 8681:  StackLowerThanAddress(&dummy, &result);
    %%%%%: 8681-block  0
call    0 never executed
    #####: 8682:  return result;
        -: 8683:}
        -: 8684:#  endif  // GTEST_HAS_CLONE
        -: 8685:
        -: 8686:// Spawns a child process with the same executable as the current process in
        -: 8687:// a thread-safe manner and instructs it to run the death test.  The
        -: 8688:// implementation uses fork(2) + exec.  On systems where clone(2) is
        -: 8689:// available, it is used instead, being slightly more thread-safe.  On QNX,
        -: 8690:// fork supports only single-threaded environments, so this function uses
        -: 8691:// spawn(2) there instead.  The function dies with an error message if
        -: 8692:// anything goes wrong.
function _ZN7testing8internalL23ExecDeathTestSpawnChildEPKPci called 0 returned 0% blocks executed 0%
    #####: 8693:static pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {
    #####: 8694:  ExecDeathTestArgs args = { argv, close_fd };
    #####: 8695:  pid_t child_pid = -1;
        -: 8696:
        -: 8697:#  if GTEST_OS_QNX
        -: 8698:  // Obtains the current directory and sets it to be closed in the child
        -: 8699:  // process.
        -: 8700:  const int cwd_fd = open(".", O_RDONLY);
        -: 8701:  GTEST_DEATH_TEST_CHECK_(cwd_fd != -1);
        -: 8702:  GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(cwd_fd, F_SETFD, FD_CLOEXEC));
        -: 8703:  // We need to execute the test program in the same environment where
        -: 8704:  // it was originally invoked.  Therefore we change to the original
        -: 8705:  // working directory first.
        -: 8706:  const char* const original_dir =
        -: 8707:      UnitTest::GetInstance()->original_working_dir();
        -: 8708:  // We can safely call chdir() as it's a direct system call.
        -: 8709:  if (chdir(original_dir) != 0) {
        -: 8710:    DeathTestAbort(std::string("chdir(\"") + original_dir + "\") failed: " +
        -: 8711:                   GetLastErrnoDescription());
        -: 8712:    return EXIT_FAILURE;
        -: 8713:  }
        -: 8714:
        -: 8715:  int fd_flags;
        -: 8716:  // Set close_fd to be closed after spawn.
        -: 8717:  GTEST_DEATH_TEST_CHECK_SYSCALL_(fd_flags = fcntl(close_fd, F_GETFD));
        -: 8718:  GTEST_DEATH_TEST_CHECK_SYSCALL_(fcntl(close_fd, F_SETFD,
        -: 8719:                                        fd_flags | FD_CLOEXEC));
        -: 8720:  struct inheritance inherit = {0};
        -: 8721:  // spawn is a system call.
        -: 8722:  child_pid = spawn(args.argv[0], 0, NULL, &inherit, args.argv, GetEnviron());
        -: 8723:  // Restores the current working directory.
        -: 8724:  GTEST_DEATH_TEST_CHECK_(fchdir(cwd_fd) != -1);
        -: 8725:  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(cwd_fd));
        -: 8726:
        -: 8727:#  else   // GTEST_OS_QNX
        -: 8728:#   if GTEST_OS_LINUX
        -: 8729:  // When a SIGPROF signal is received while fork() or clone() are executing,
        -: 8730:  // the process may hang. To avoid this, we ignore SIGPROF here and re-enable
        -: 8731:  // it after the call to fork()/clone() is complete.
        -: 8732:  struct sigaction saved_sigprof_action;
        -: 8733:  struct sigaction ignore_sigprof_action;
    #####: 8734:  memset(&ignore_sigprof_action, 0, sizeof(ignore_sigprof_action));
    #####: 8735:  sigemptyset(&ignore_sigprof_action.sa_mask);
    %%%%%: 8735-block  0
call    0 never executed
    #####: 8736:  ignore_sigprof_action.sa_handler = SIG_IGN;
    #####: 8737:  GTEST_DEATH_TEST_CHECK_SYSCALL_(sigaction(
    %%%%%: 8737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8737-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 8737-block  2
    %%%%%: 8737-block  3
branch  5 never executed
branch  6 never executed
    %%%%%: 8737-block  4
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 8737-block  5
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8737-block  6
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 8737-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 8737-block  8
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 8737-block  9
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 8737-block 10
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 8737-block 11
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%: 8737-block 12
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
    %%%%%: 8737-block 13
call   41 never executed
branch 42 never executed
branch 43 never executed
    %%%%%: 8737-block 14
branch 44 never executed
branch 45 never executed
    %%%%%: 8737-block 15
    $$$$$: 8737-block 16
call   46 never executed
    $$$$$: 8737-block 17
    $$$$$: 8737-block 18
call   47 never executed
    $$$$$: 8737-block 19
    $$$$$: 8737-block 20
call   48 never executed
    $$$$$: 8737-block 21
    $$$$$: 8737-block 22
call   49 never executed
    $$$$$: 8737-block 23
    $$$$$: 8737-block 24
call   50 never executed
    $$$$$: 8737-block 25
    $$$$$: 8737-block 26
call   51 never executed
    $$$$$: 8737-block 27
    $$$$$: 8737-block 28
call   52 never executed
    $$$$$: 8737-block 29
    $$$$$: 8737-block 30
call   53 never executed
    $$$$$: 8737-block 31
    $$$$$: 8737-block 32
call   54 never executed
    $$$$$: 8737-block 33
    #####: 8738:      SIGPROF, &ignore_sigprof_action, &saved_sigprof_action));
    %%%%%: 8738-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8738-block  1
        -: 8739:#   endif  // GTEST_OS_LINUX
        -: 8740:
        -: 8741:#   if GTEST_HAS_CLONE
    #####: 8742:  const bool use_fork = GTEST_FLAG(death_test_use_fork);
        -: 8743:
    #####: 8744:  if (!use_fork) {
    %%%%%: 8744-block  0
branch  0 never executed
branch  1 never executed
    #####: 8745:    static const bool stack_grows_down = StackGrowsDown();
    %%%%%: 8745-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8745-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8745-block  2
call    5 never executed
call    6 never executed
    #####: 8746:    const size_t stack_size = getpagesize();
        -: 8747:    // MMAP_ANONYMOUS is not defined on Mac, so we use MAP_ANON instead.
    #####: 8748:    void* const stack = mmap(NULL, stack_size, PROT_READ | PROT_WRITE,
    %%%%%: 8748-block  0
call    0 never executed
        -: 8749:                             MAP_ANON | MAP_PRIVATE, -1, 0);
    #####: 8750:    GTEST_DEATH_TEST_CHECK_(stack != MAP_FAILED);
    %%%%%: 8750-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8750-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8750-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8750-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 8750-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8750-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8750-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8750-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8750-block  8
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8750-block  9
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    %%%%%: 8750-block 10
call   36 never executed
branch 37 never executed
branch 38 never executed
    %%%%%: 8750-block 11
branch 39 never executed
branch 40 never executed
    %%%%%: 8750-block 12
    $$$$$: 8750-block 13
call   41 never executed
    $$$$$: 8750-block 14
    $$$$$: 8750-block 15
call   42 never executed
    $$$$$: 8750-block 16
    $$$$$: 8750-block 17
call   43 never executed
    $$$$$: 8750-block 18
    $$$$$: 8750-block 19
call   44 never executed
    $$$$$: 8750-block 20
    $$$$$: 8750-block 21
call   45 never executed
    $$$$$: 8750-block 22
    $$$$$: 8750-block 23
call   46 never executed
    $$$$$: 8750-block 24
    $$$$$: 8750-block 25
call   47 never executed
    $$$$$: 8750-block 26
    $$$$$: 8750-block 27
call   48 never executed
    $$$$$: 8750-block 28
    $$$$$: 8750-block 29
        -: 8751:
        -: 8752:    // Maximum stack alignment in bytes:  For a downward-growing stack, this
        -: 8753:    // amount is subtracted from size of the stack space to get an address
        -: 8754:    // that is within the stack space and is aligned on all systems we care
        -: 8755:    // about.  As far as I know there is no ABI with stack alignment greater
        -: 8756:    // than 64.  We assume stack and stack_size already have alignment of
        -: 8757:    // kMaxStackAlignment.
    #####: 8758:    const size_t kMaxStackAlignment = 64;
    #####: 8759:    void* const stack_top =
    %%%%%: 8759-block  0
    #####: 8760:        static_cast<char*>(stack) +
    %%%%%: 8760-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8760-block  1
    %%%%%: 8760-block  2
        -: 8761:            (stack_grows_down ? stack_size - kMaxStackAlignment : 0);
    #####: 8762:    GTEST_DEATH_TEST_CHECK_(stack_size > kMaxStackAlignment &&
    %%%%%: 8762-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8762-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 8762-block  2
    %%%%%: 8762-block  3
    %%%%%: 8762-block  4
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8762-block  5
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 8762-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8762-block  7
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 8762-block  8
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 8762-block  9
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 8762-block 10
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 8762-block 11
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 8762-block 12
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    %%%%%: 8762-block 13
call   37 never executed
branch 38 never executed
branch 39 never executed
    %%%%%: 8762-block 14
branch 40 never executed
branch 41 never executed
    %%%%%: 8762-block 15
    $$$$$: 8762-block 16
call   42 never executed
    $$$$$: 8762-block 17
    $$$$$: 8762-block 18
call   43 never executed
    $$$$$: 8762-block 19
    $$$$$: 8762-block 20
call   44 never executed
    $$$$$: 8762-block 21
    $$$$$: 8762-block 22
call   45 never executed
    $$$$$: 8762-block 23
    $$$$$: 8762-block 24
call   46 never executed
    $$$$$: 8762-block 25
    $$$$$: 8762-block 26
call   47 never executed
    $$$$$: 8762-block 27
    $$$$$: 8762-block 28
call   48 never executed
    $$$$$: 8762-block 29
    $$$$$: 8762-block 30
call   49 never executed
    $$$$$: 8762-block 31
    #####: 8763:        reinterpret_cast<intptr_t>(stack_top) % kMaxStackAlignment == 0);
    %%%%%: 8763-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8763-block  1
        -: 8764:
    #####: 8765:    child_pid = clone(&ExecDeathTestChildMain, stack_top, SIGCHLD, &args);
    %%%%%: 8765-block  0
call    0 never executed
        -: 8766:
    #####: 8767:    GTEST_DEATH_TEST_CHECK_(munmap(stack, stack_size) != -1);
    %%%%%: 8767-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8767-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8767-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 8767-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8767-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 8767-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 8767-block  6
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 8767-block  7
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 8767-block  8
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 8767-block  9
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    %%%%%: 8767-block 10
call   37 never executed
branch 38 never executed
branch 39 never executed
    %%%%%: 8767-block 11
branch 40 never executed
branch 41 never executed
    %%%%%: 8767-block 12
    $$$$$: 8767-block 13
call   42 never executed
    $$$$$: 8767-block 14
    $$$$$: 8767-block 15
call   43 never executed
    $$$$$: 8767-block 16
    $$$$$: 8767-block 17
call   44 never executed
    $$$$$: 8767-block 18
    $$$$$: 8767-block 19
call   45 never executed
    $$$$$: 8767-block 20
    $$$$$: 8767-block 21
call   46 never executed
    $$$$$: 8767-block 22
    $$$$$: 8767-block 23
call   47 never executed
    $$$$$: 8767-block 24
    $$$$$: 8767-block 25
call   48 never executed
    $$$$$: 8767-block 26
    $$$$$: 8767-block 27
call   49 never executed
    $$$$$: 8767-block 28
    $$$$$: 8767-block 29
        -: 8768:  }
        -: 8769:#   else
        -: 8770:  const bool use_fork = true;
        -: 8771:#   endif  // GTEST_HAS_CLONE
        -: 8772:
    #####: 8773:  if (use_fork && (child_pid = fork()) == 0) {
    %%%%%: 8773-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 8773-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8773-block  2
    %%%%%: 8773-block  3
    %%%%%: 8773-block  4
branch  5 never executed
branch  6 never executed
    #####: 8774:      ExecDeathTestChildMain(&args);
    %%%%%: 8774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8775:      _exit(0);
    %%%%%: 8775-block  0
call    0 never executed
        -: 8776:  }
        -: 8777:#  endif  // GTEST_OS_QNX
        -: 8778:#  if GTEST_OS_LINUX
    #####: 8779:  GTEST_DEATH_TEST_CHECK_SYSCALL_(
    %%%%%: 8779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8779-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 8779-block  2
    %%%%%: 8779-block  3
branch  5 never executed
branch  6 never executed
    %%%%%: 8779-block  4
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 8779-block  5
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8779-block  6
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 8779-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 8779-block  8
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 8779-block  9
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 8779-block 10
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 8779-block 11
call   29 never executed
branch 30 never executed
branch 31 never executed
    %%%%%: 8779-block 12
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
    %%%%%: 8779-block 13
call   41 never executed
branch 42 never executed
branch 43 never executed
    %%%%%: 8779-block 14
branch 44 never executed
branch 45 never executed
    %%%%%: 8779-block 15
    $$$$$: 8779-block 16
call   46 never executed
    $$$$$: 8779-block 17
    $$$$$: 8779-block 18
call   47 never executed
    $$$$$: 8779-block 19
    $$$$$: 8779-block 20
call   48 never executed
    $$$$$: 8779-block 21
    $$$$$: 8779-block 22
call   49 never executed
    $$$$$: 8779-block 23
    $$$$$: 8779-block 24
call   50 never executed
    $$$$$: 8779-block 25
    $$$$$: 8779-block 26
call   51 never executed
    $$$$$: 8779-block 27
    $$$$$: 8779-block 28
call   52 never executed
    $$$$$: 8779-block 29
    $$$$$: 8779-block 30
call   53 never executed
    $$$$$: 8779-block 31
    $$$$$: 8779-block 32
call   54 never executed
    $$$$$: 8779-block 33
    #####: 8780:      sigaction(SIGPROF, &saved_sigprof_action, NULL));
    %%%%%: 8780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8780-block  1
        -: 8781:#  endif  // GTEST_OS_LINUX
        -: 8782:
    #####: 8783:  GTEST_DEATH_TEST_CHECK_(child_pid != -1);
    %%%%%: 8783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8783-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8783-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 8783-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8783-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8783-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8783-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8783-block  8
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8783-block  9
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    %%%%%: 8783-block 10
call   36 never executed
branch 37 never executed
branch 38 never executed
    %%%%%: 8783-block 11
branch 39 never executed
branch 40 never executed
    %%%%%: 8783-block 12
    $$$$$: 8783-block 13
call   41 never executed
    $$$$$: 8783-block 14
    $$$$$: 8783-block 15
call   42 never executed
    $$$$$: 8783-block 16
    $$$$$: 8783-block 17
call   43 never executed
    $$$$$: 8783-block 18
    $$$$$: 8783-block 19
call   44 never executed
    $$$$$: 8783-block 20
    $$$$$: 8783-block 21
call   45 never executed
    $$$$$: 8783-block 22
    $$$$$: 8783-block 23
call   46 never executed
    $$$$$: 8783-block 24
    $$$$$: 8783-block 25
call   47 never executed
    $$$$$: 8783-block 26
    $$$$$: 8783-block 27
call   48 never executed
    $$$$$: 8783-block 28
    $$$$$: 8783-block 29
    #####: 8784:  return child_pid;
    %%%%%: 8784-block  0
    %%%%%: 8784-block  1
        -: 8785:}
        -: 8786:
        -: 8787:// The AssumeRole process for a fork-and-exec death test.  It re-executes the
        -: 8788:// main program from the beginning, setting the --gtest_filter
        -: 8789:// and --gtest_internal_run_death_test flags to cause only the current
        -: 8790:// death test to be re-run.
function _ZN7testing8internal13ExecDeathTest10AssumeRoleEv called 0 returned 0% blocks executed 0%
    #####: 8791:DeathTest::TestRole ExecDeathTest::AssumeRole() {
    #####: 8792:  const UnitTestImpl* const impl = GetUnitTestImpl();
    %%%%%: 8792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8793:  const InternalRunDeathTestFlag* const flag =
    #####: 8794:      impl->internal_run_death_test_flag();
    %%%%%: 8794-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8795:  const TestInfo* const info = impl->current_test_info();
    %%%%%: 8795-block  0
call    0 never executed
    #####: 8796:  const int death_test_index = info->result()->death_test_count();
call    0 never executed
call    1 never executed
        -: 8797:
    #####: 8798:  if (flag != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 8799:    set_write_fd(flag->write_fd());
    %%%%%: 8799-block  0
call    0 never executed
call    1 never executed
    #####: 8800:    return EXECUTE_TEST;
        -: 8801:  }
        -: 8802:
        -: 8803:  int pipe_fd[2];
    #####: 8804:  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);
    %%%%%: 8804-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8804-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8804-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 8804-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 8804-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 8804-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 8804-block  6
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%: 8804-block  7
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%: 8804-block  8
call   26 never executed
branch 27 never executed
branch 28 never executed
    %%%%%: 8804-block  9
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    %%%%%: 8804-block 10
call   37 never executed
branch 38 never executed
branch 39 never executed
    %%%%%: 8804-block 11
branch 40 never executed
branch 41 never executed
    %%%%%: 8804-block 12
    $$$$$: 8804-block 13
call   42 never executed
    $$$$$: 8804-block 14
    $$$$$: 8804-block 15
call   43 never executed
    $$$$$: 8804-block 16
    $$$$$: 8804-block 17
call   44 never executed
    $$$$$: 8804-block 18
    $$$$$: 8804-block 19
call   45 never executed
    $$$$$: 8804-block 20
    $$$$$: 8804-block 21
call   46 never executed
    $$$$$: 8804-block 22
    $$$$$: 8804-block 23
call   47 never executed
    $$$$$: 8804-block 24
    $$$$$: 8804-block 25
call   48 never executed
    $$$$$: 8804-block 26
    $$$$$: 8804-block 27
call   49 never executed
    $$$$$: 8804-block 28
    $$$$$: 8804-block 29
        -: 8805:  // Clear the close-on-exec flag on the write end of the pipe, lest
        -: 8806:  // it be closed when the child process does an exec:
    #####: 8807:  GTEST_DEATH_TEST_CHECK_(fcntl(pipe_fd[1], F_SETFD, 0) != -1);
    %%%%%: 8807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8807-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8807-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8807-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 8807-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8807-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8807-block  6
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8807-block  7
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8807-block  8
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8807-block  9
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 8807-block 10
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
    %%%%%: 8807-block 11
call   39 never executed
branch 40 never executed
branch 41 never executed
    %%%%%: 8807-block 12
branch 42 never executed
branch 43 never executed
    %%%%%: 8807-block 13
    $$$$$: 8807-block 14
call   44 never executed
    $$$$$: 8807-block 15
    $$$$$: 8807-block 16
call   45 never executed
    $$$$$: 8807-block 17
    $$$$$: 8807-block 18
call   46 never executed
    $$$$$: 8807-block 19
    $$$$$: 8807-block 20
call   47 never executed
    $$$$$: 8807-block 21
    $$$$$: 8807-block 22
call   48 never executed
    $$$$$: 8807-block 23
    $$$$$: 8807-block 24
call   49 never executed
    $$$$$: 8807-block 25
    $$$$$: 8807-block 26
call   50 never executed
    $$$$$: 8807-block 27
    $$$$$: 8807-block 28
call   51 never executed
    $$$$$: 8807-block 29
    $$$$$: 8807-block 30
        -: 8808:
        -: 8809:  const std::string filter_flag =
    #####: 8810:      std::string("--") + GTEST_FLAG_PREFIX_ + kFilterFlag + "="
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8810-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8810-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8810-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 8810-block  3
    $$$$$: 8810-block  4
    $$$$$: 8810-block  5
    $$$$$: 8810-block  6
    $$$$$: 8810-block  7
    #####: 8811:      + info->test_case_name() + "." + info->name();
    %%%%%: 8811-block  0
call    0 never executed
call    1 never executed
    %%%%%: 8811-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8811-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 8811-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 8811-block  4
    $$$$$: 8811-block  5
    $$$$$: 8811-block  6
call   14 never executed
        -: 8812:  const std::string internal_flag =
    #####: 8813:      std::string("--") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag + "="
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8813-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8813-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 8813-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 8813-block  3
    $$$$$: 8813-block  4
    $$$$$: 8813-block  5
    $$$$$: 8813-block  6
    $$$$$: 8813-block  7
    #####: 8814:      + file_ + "|" + StreamableToString(line_) + "|"
    %%%%%: 8814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8814-block  1
call    3 never executed
    %%%%%: 8814-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8814-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8814-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 8814-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 8814-block  6
    $$$$$: 8814-block  7
    $$$$$: 8814-block  8
    $$$$$: 8814-block  9
    $$$$$: 8814-block 10
    #####: 8815:      + StreamableToString(death_test_index) + "|"
    %%%%%: 8815-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8815-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8815-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 8815-block  3
    $$$$$: 8815-block  4
    $$$$$: 8815-block  5
    #####: 8816:      + StreamableToString(pipe_fd[1]);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8816-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 8816-block  1
    $$$$$: 8816-block  2
call    7 never executed
    #####: 8817:  Arguments args;
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8817-block  0
call    3 never executed
    #####: 8818:  args.AddArguments(GetArgvsForDeathTestChildProcess());
    %%%%%: 8818-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8818-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8818-block  2
call    6 never executed
    $$$$$: 8818-block  3
call    7 never executed
    $$$$$: 8818-block  4
    #####: 8819:  args.AddArgument(filter_flag.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8820:  args.AddArgument(internal_flag.c_str());
    %%%%%: 8820-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8821:
    #####: 8822:  DeathTest::set_last_death_test_message("");
    %%%%%: 8822-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8822-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8822-block  2
call    7 never executed
call    8 never executed
    $$$$$: 8822-block  3
call    9 never executed
    $$$$$: 8822-block  4
    $$$$$: 8822-block  5
call   10 never executed
    $$$$$: 8822-block  6
        -: 8823:
    #####: 8824:  CaptureStderr();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8825:  // See the comment in NoExecDeathTest::AssumeRole for why the next line
        -: 8826:  // is necessary.
    #####: 8827:  FlushInfoLog();
    %%%%%: 8827-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8828:
    #####: 8829:  const pid_t child_pid = ExecDeathTestSpawnChild(args.Argv(), pipe_fd[0]);
    %%%%%: 8829-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8829-block  1
    #####: 8830:  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(pipe_fd[1]));
    %%%%%: 8830-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8830-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 8830-block  2
branch  5 never executed
branch  6 never executed
    %%%%%: 8830-block  3
    %%%%%: 8830-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 8830-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 8830-block  6
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 8830-block  7
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 8830-block  8
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 8830-block  9
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 8830-block 10
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 8830-block 11
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 8830-block 12
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 8830-block 13
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 8830-block 14
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
    %%%%%: 8830-block 15
call   46 never executed
branch 47 never executed
branch 48 never executed
    %%%%%: 8830-block 16
branch 49 never executed
branch 50 never executed
    %%%%%: 8830-block 17
    $$$$$: 8830-block 18
call   51 never executed
    $$$$$: 8830-block 19
    $$$$$: 8830-block 20
call   52 never executed
    $$$$$: 8830-block 21
    $$$$$: 8830-block 22
call   53 never executed
    $$$$$: 8830-block 23
    $$$$$: 8830-block 24
call   54 never executed
    $$$$$: 8830-block 25
    $$$$$: 8830-block 26
call   55 never executed
    $$$$$: 8830-block 27
    $$$$$: 8830-block 28
call   56 never executed
    $$$$$: 8830-block 29
    $$$$$: 8830-block 30
call   57 never executed
    $$$$$: 8830-block 31
    $$$$$: 8830-block 32
call   58 never executed
    $$$$$: 8830-block 33
    $$$$$: 8830-block 34
call   59 never executed
    $$$$$: 8830-block 35
    $$$$$: 8830-block 36
    #####: 8831:  set_child_pid(child_pid);
    %%%%%: 8831-block  0
call    0 never executed
    #####: 8832:  set_read_fd(pipe_fd[0]);
call    0 never executed
    #####: 8833:  set_spawned(true);
call    0 never executed
    #####: 8834:  return OVERSEE_TEST;
call    0 never executed
        -: 8835:}
        -: 8836:
        -: 8837:# endif  // !GTEST_OS_WINDOWS
        -: 8838:
        -: 8839:// Creates a concrete DeathTest-derived class that depends on the
        -: 8840:// --gtest_death_test_style flag, and sets the pointer pointed to
        -: 8841:// by the "test" argument to its address.  If the test should be
        -: 8842:// skipped, sets that pointer to NULL.  Returns true, unless the
        -: 8843:// flag is set to an invalid value.
function _ZN7testing8internal23DefaultDeathTestFactory6CreateEPKcPKNS0_2REES3_iPPNS0_9DeathTestE called 0 returned 0% blocks executed 0%
    #####: 8844:bool DefaultDeathTestFactory::Create(const char* statement, const RE* regex,
        -: 8845:                                     const char* file, int line,
        -: 8846:                                     DeathTest** test) {
    #####: 8847:  UnitTestImpl* const impl = GetUnitTestImpl();
    %%%%%: 8847-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8848:  const InternalRunDeathTestFlag* const flag =
    #####: 8849:      impl->internal_run_death_test_flag();
    %%%%%: 8849-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8850:  const int death_test_index = impl->current_test_info()
    #####: 8851:      ->increment_death_test_count();
    %%%%%: 8851-block  0
call    0 never executed
call    1 never executed
        -: 8852:
    #####: 8853:  if (flag != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 8854:    if (death_test_index > flag->index()) {
    %%%%%: 8854-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8855:      DeathTest::set_last_death_test_message(
    %%%%%: 8855-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8856:          "Death test count (" + StreamableToString(death_test_index)
    %%%%%: 8856-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8856-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 8856-block  2
call    7 never executed
    $$$$$: 8856-block  3
    $$$$$: 8856-block  4
call    8 never executed
    $$$$$: 8856-block  5
    #####: 8857:          + ") somehow exceeded expected maximum ("
    %%%%%: 8857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 8857-block  1
call    4 never executed
    $$$$$: 8857-block  2
    #####: 8858:          + StreamableToString(flag->index()) + ")");
    %%%%%: 8858-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8858-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8858-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 8858-block  3
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 8858-block  4
call   14 never executed
    $$$$$: 8858-block  5
    $$$$$: 8858-block  6
call   15 never executed
    $$$$$: 8858-block  7
    $$$$$: 8858-block  8
call   16 never executed
    $$$$$: 8858-block  9
    $$$$$: 8858-block 10
    #####: 8859:      return false;
        -: 8860:    }
        -: 8861:
    #####: 8862:    if (!(flag->file() == file && flag->line() == line &&
    %%%%%: 8862-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 8862-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 8862-block  2
    %%%%%: 8862-block  3
    %%%%%: 8862-block  4
branch  7 never executed
branch  8 never executed
    #####: 8863:          flag->index() == death_test_index)) {
    %%%%%: 8863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8864:      *test = NULL;
    #####: 8865:      return true;
    %%%%%: 8865-block  0
        -: 8866:    }
        -: 8867:  }
        -: 8868:
        -: 8869:# if GTEST_OS_WINDOWS
        -: 8870:
        -: 8871:  if (GTEST_FLAG(death_test_style) == "threadsafe" ||
        -: 8872:      GTEST_FLAG(death_test_style) == "fast") {
        -: 8873:    *test = new WindowsDeathTest(statement, regex, file, line);
        -: 8874:  }
        -: 8875:
        -: 8876:# elif GTEST_OS_FUCHSIA
        -: 8877:
        -: 8878:  if (GTEST_FLAG(death_test_style) == "threadsafe" ||
        -: 8879:      GTEST_FLAG(death_test_style) == "fast") {
        -: 8880:    *test = new FuchsiaDeathTest(statement, regex, file, line);
        -: 8881:  }
        -: 8882:
        -: 8883:# else
        -: 8884:
    #####: 8885:  if (GTEST_FLAG(death_test_style) == "threadsafe") {
    %%%%%: 8885-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8886:    *test = new ExecDeathTest(statement, regex, file, line);
    %%%%%: 8886-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8886-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8886-block  2
    $$$$$: 8886-block  3
call    6 never executed
    #####: 8887:  } else if (GTEST_FLAG(death_test_style) == "fast") {
    %%%%%: 8887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8888:    *test = new NoExecDeathTest(statement, regex);
    %%%%%: 8888-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8888-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 8888-block  2
    $$$$$: 8888-block  3
call    6 never executed
        -: 8889:  }
        -: 8890:
        -: 8891:# endif  // GTEST_OS_WINDOWS
        -: 8892:
        -: 8893:  else {  // NOLINT - this is more readable than unbalanced brackets inside #if.
    #####: 8894:    DeathTest::set_last_death_test_message(
    %%%%%: 8894-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8895:        "Unknown death test style \"" + GTEST_FLAG(death_test_style)
    %%%%%: 8895-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 8895-block  1
call    3 never executed
    $$$$$: 8895-block  2
    #####: 8896:        + "\" encountered");
    %%%%%: 8896-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 8896-block  1
call    3 never executed
call    4 never executed
    $$$$$: 8896-block  2
call    5 never executed
    $$$$$: 8896-block  3
    #####: 8897:    return false;
        -: 8898:  }
        -: 8899:
    #####: 8900:  return true;
    %%%%%: 8900-block  0
        -: 8901:}
        -: 8902:
        -: 8903:# if GTEST_OS_WINDOWS
        -: 8904:// Recreates the pipe and event handles from the provided parameters,
        -: 8905:// signals the event, and returns a file descriptor wrapped around the pipe
        -: 8906:// handle. This function is called in the child process only.
        -: 8907:static int GetStatusFileDescriptor(unsigned int parent_process_id,
        -: 8908:                            size_t write_handle_as_size_t,
        -: 8909:                            size_t event_handle_as_size_t) {
        -: 8910:  AutoHandle parent_process_handle(::OpenProcess(PROCESS_DUP_HANDLE,
        -: 8911:                                                   FALSE,  // Non-inheritable.
        -: 8912:                                                   parent_process_id));
        -: 8913:  if (parent_process_handle.Get() == INVALID_HANDLE_VALUE) {
        -: 8914:    DeathTestAbort("Unable to open parent process " +
        -: 8915:                   StreamableToString(parent_process_id));
        -: 8916:  }
        -: 8917:
        -: 8918:  // FIXME: Replace the following check with a
        -: 8919:  // compile-time assertion when available.
        -: 8920:  GTEST_CHECK_(sizeof(HANDLE) <= sizeof(size_t));
        -: 8921:
        -: 8922:  const HANDLE write_handle =
        -: 8923:      reinterpret_cast<HANDLE>(write_handle_as_size_t);
        -: 8924:  HANDLE dup_write_handle;
        -: 8925:
        -: 8926:  // The newly initialized handle is accessible only in the parent
        -: 8927:  // process. To obtain one accessible within the child, we need to use
        -: 8928:  // DuplicateHandle.
        -: 8929:  if (!::DuplicateHandle(parent_process_handle.Get(), write_handle,
        -: 8930:                         ::GetCurrentProcess(), &dup_write_handle,
        -: 8931:                         0x0,    // Requested privileges ignored since
        -: 8932:                                 // DUPLICATE_SAME_ACCESS is used.
        -: 8933:                         FALSE,  // Request non-inheritable handler.
        -: 8934:                         DUPLICATE_SAME_ACCESS)) {
        -: 8935:    DeathTestAbort("Unable to duplicate the pipe handle " +
        -: 8936:                   StreamableToString(write_handle_as_size_t) +
        -: 8937:                   " from the parent process " +
        -: 8938:                   StreamableToString(parent_process_id));
        -: 8939:  }
        -: 8940:
        -: 8941:  const HANDLE event_handle = reinterpret_cast<HANDLE>(event_handle_as_size_t);
        -: 8942:  HANDLE dup_event_handle;
        -: 8943:
        -: 8944:  if (!::DuplicateHandle(parent_process_handle.Get(), event_handle,
        -: 8945:                         ::GetCurrentProcess(), &dup_event_handle,
        -: 8946:                         0x0,
        -: 8947:                         FALSE,
        -: 8948:                         DUPLICATE_SAME_ACCESS)) {
        -: 8949:    DeathTestAbort("Unable to duplicate the event handle " +
        -: 8950:                   StreamableToString(event_handle_as_size_t) +
        -: 8951:                   " from the parent process " +
        -: 8952:                   StreamableToString(parent_process_id));
        -: 8953:  }
        -: 8954:
        -: 8955:  const int write_fd =
        -: 8956:      ::_open_osfhandle(reinterpret_cast<intptr_t>(dup_write_handle), O_APPEND);
        -: 8957:  if (write_fd == -1) {
        -: 8958:    DeathTestAbort("Unable to convert pipe handle " +
        -: 8959:                   StreamableToString(write_handle_as_size_t) +
        -: 8960:                   " to a file descriptor");
        -: 8961:  }
        -: 8962:
        -: 8963:  // Signals the parent that the write end of the pipe has been acquired
        -: 8964:  // so the parent can release its own write end.
        -: 8965:  ::SetEvent(dup_event_handle);
        -: 8966:
        -: 8967:  return write_fd;
        -: 8968:}
        -: 8969:# endif  // GTEST_OS_WINDOWS
        -: 8970:
        -: 8971:// Returns a newly created InternalRunDeathTestFlag object with fields
        -: 8972:// initialized from the GTEST_FLAG(internal_run_death_test) flag if
        -: 8973:// the flag is specified; otherwise returns NULL.
function _ZN7testing8internal29ParseInternalRunDeathTestFlagEv called 1 returned 100% blocks executed 13%
        1: 8974:InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {
        1: 8975:  if (GTEST_FLAG(internal_run_death_test) == "") return NULL;
        1: 8975-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 8975-block  1
        -: 8976:
        -: 8977:  // GTEST_HAS_DEATH_TEST implies that we have ::std::string, so we
        -: 8978:  // can use it here.
    #####: 8979:  int line = -1;
    #####: 8980:  int index = -1;
    #####: 8981:  ::std::vector< ::std::string> fields;
    %%%%%: 8981-block  0
call    0 never executed
    $$$$$: 8981-block  1
call    1 never executed
    #####: 8982:  SplitString(GTEST_FLAG(internal_run_death_test).c_str(), '|', &fields);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 8982-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 8982-block  1
call    8 never executed
call    9 never executed
    $$$$$: 8982-block  2
call   10 never executed
    $$$$$: 8982-block  3
    $$$$$: 8982-block  4
call   11 never executed
    $$$$$: 8982-block  5
    #####: 8983:  int write_fd = -1;
        -: 8984:
        -: 8985:# if GTEST_OS_WINDOWS
        -: 8986:
        -: 8987:  unsigned int parent_process_id = 0;
        -: 8988:  size_t write_handle_as_size_t = 0;
        -: 8989:  size_t event_handle_as_size_t = 0;
        -: 8990:
        -: 8991:  if (fields.size() != 6
        -: 8992:      || !ParseNaturalNumber(fields[1], &line)
        -: 8993:      || !ParseNaturalNumber(fields[2], &index)
        -: 8994:      || !ParseNaturalNumber(fields[3], &parent_process_id)
        -: 8995:      || !ParseNaturalNumber(fields[4], &write_handle_as_size_t)
        -: 8996:      || !ParseNaturalNumber(fields[5], &event_handle_as_size_t)) {
        -: 8997:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: " +
        -: 8998:                   GTEST_FLAG(internal_run_death_test));
        -: 8999:  }
        -: 9000:  write_fd = GetStatusFileDescriptor(parent_process_id,
        -: 9001:                                     write_handle_as_size_t,
        -: 9002:                                     event_handle_as_size_t);
        -: 9003:
        -: 9004:# elif GTEST_OS_FUCHSIA
        -: 9005:
        -: 9006:  if (fields.size() != 3
        -: 9007:      || !ParseNaturalNumber(fields[1], &line)
        -: 9008:      || !ParseNaturalNumber(fields[2], &index)) {
        -: 9009:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: "
        -: 9010:        + GTEST_FLAG(internal_run_death_test));
        -: 9011:  }
        -: 9012:
        -: 9013:# else
        -: 9014:
    #####: 9015:  if (fields.size() != 4
call    0 never executed
    #####: 9016:      || !ParseNaturalNumber(fields[1], &line)
    %%%%%: 9016-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9016-block  1
branch  4 never executed
branch  5 never executed
    #####: 9017:      || !ParseNaturalNumber(fields[2], &index)
    %%%%%: 9017-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9017-block  1
branch  4 never executed
branch  5 never executed
    #####: 9018:      || !ParseNaturalNumber(fields[3], &write_fd)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 9018-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9018-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 9018-block  2
    %%%%%: 9018-block  3
    %%%%%: 9018-block  4
branch  8 never executed
branch  9 never executed
    #####: 9019:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: "
    %%%%%: 9019-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9020:        + GTEST_FLAG(internal_run_death_test));
    %%%%%: 9020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9020-block  1
call    3 never executed
    $$$$$: 9020-block  2
call    4 never executed
    $$$$$: 9020-block  3
        -: 9021:  }
        -: 9022:
        -: 9023:# endif  // GTEST_OS_WINDOWS
        -: 9024:
    #####: 9025:  return new InternalRunDeathTestFlag(fields[0], line, index, write_fd);
    %%%%%: 9025-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9025-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9025-block  2
call    7 never executed
    $$$$$: 9025-block  3
call    8 never executed
        -: 9026:}
        -: 9027:
        -: 9028:}  // namespace internal
        -: 9029:
        -: 9030:#endif  // GTEST_HAS_DEATH_TEST
        -: 9031:
        -: 9032:}  // namespace testing
        -: 9033:// Copyright 2008, Google Inc.
        -: 9034:// All rights reserved.
        -: 9035://
        -: 9036:// Redistribution and use in source and binary forms, with or without
        -: 9037:// modification, are permitted provided that the following conditions are
        -: 9038:// met:
        -: 9039://
        -: 9040://     * Redistributions of source code must retain the above copyright
        -: 9041:// notice, this list of conditions and the following disclaimer.
        -: 9042://     * Redistributions in binary form must reproduce the above
        -: 9043:// copyright notice, this list of conditions and the following disclaimer
        -: 9044:// in the documentation and/or other materials provided with the
        -: 9045:// distribution.
        -: 9046://     * Neither the name of Google Inc. nor the names of its
        -: 9047:// contributors may be used to endorse or promote products derived from
        -: 9048:// this software without specific prior written permission.
        -: 9049://
        -: 9050:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -: 9051:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -: 9052:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -: 9053:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -: 9054:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -: 9055:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -: 9056:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -: 9057:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -: 9058:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -: 9059:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -: 9060:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -: 9061:
        -: 9062:
        -: 9063:#include <stdlib.h>
        -: 9064:
        -: 9065:#if GTEST_OS_WINDOWS_MOBILE
        -: 9066:# include <windows.h>
        -: 9067:#elif GTEST_OS_WINDOWS
        -: 9068:# include <direct.h>
        -: 9069:# include <io.h>
        -: 9070:#elif GTEST_OS_SYMBIAN
        -: 9071:// Symbian OpenC has PATH_MAX in sys/syslimits.h
        -: 9072:# include <sys/syslimits.h>
        -: 9073:#else
        -: 9074:# include <limits.h>
        -: 9075:# include <climits>  // Some Linux distributions define PATH_MAX here.
        -: 9076:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 9077:
        -: 9078:
        -: 9079:#if GTEST_OS_WINDOWS
        -: 9080:# define GTEST_PATH_MAX_ _MAX_PATH
        -: 9081:#elif defined(PATH_MAX)
        -: 9082:# define GTEST_PATH_MAX_ PATH_MAX
        -: 9083:#elif defined(_XOPEN_PATH_MAX)
        -: 9084:# define GTEST_PATH_MAX_ _XOPEN_PATH_MAX
        -: 9085:#else
        -: 9086:# define GTEST_PATH_MAX_ _POSIX_PATH_MAX
        -: 9087:#endif  // GTEST_OS_WINDOWS
        -: 9088:
        -: 9089:namespace testing {
        -: 9090:namespace internal {
        -: 9091:
        -: 9092:#if GTEST_OS_WINDOWS
        -: 9093:// On Windows, '\\' is the standard path separator, but many tools and the
        -: 9094:// Windows API also accept '/' as an alternate path separator. Unless otherwise
        -: 9095:// noted, a file path can contain either kind of path separators, or a mixture
        -: 9096:// of them.
        -: 9097:const char kPathSeparator = '\\';
        -: 9098:const char kAlternatePathSeparator = '/';
        -: 9099:const char kAlternatePathSeparatorString[] = "/";
        -: 9100:# if GTEST_OS_WINDOWS_MOBILE
        -: 9101:// Windows CE doesn't have a current directory. You should not use
        -: 9102:// the current directory in tests on Windows CE, but this at least
        -: 9103:// provides a reasonable fallback.
        -: 9104:const char kCurrentDirectoryString[] = "\\";
        -: 9105:// Windows CE doesn't define INVALID_FILE_ATTRIBUTES
        -: 9106:const DWORD kInvalidFileAttributes = 0xffffffff;
        -: 9107:# else
        -: 9108:const char kCurrentDirectoryString[] = ".\\";
        -: 9109:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 9110:#else
        -: 9111:const char kPathSeparator = '/';
        -: 9112:const char kCurrentDirectoryString[] = "./";
        -: 9113:#endif  // GTEST_OS_WINDOWS
        -: 9114:
        -: 9115:// Returns whether the given character is a valid path separator.
function _ZN7testing8internalL15IsPathSeparatorEc called 125 returned 100% blocks executed 100%
      125: 9116:static bool IsPathSeparator(char c) {
        -: 9117:#if GTEST_HAS_ALT_PATH_SEP_
        -: 9118:  return (c == kPathSeparator) || (c == kAlternatePathSeparator);
        -: 9119:#else
      125: 9120:  return c == kPathSeparator;
      125: 9120-block  0
        -: 9121:#endif
        -: 9122:}
        -: 9123:
        -: 9124:// Returns the current working directory, or "" if unsuccessful.
function _ZN7testing8internal8FilePath13GetCurrentDirEv called 1 returned 100% blocks executed 61%
        1: 9125:FilePath FilePath::GetCurrentDir() {
        -: 9126:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT
        -: 9127:  // Windows CE doesn't have a current directory, so we just return
        -: 9128:  // something reasonable.
        -: 9129:  return FilePath(kCurrentDirectoryString);
        -: 9130:#elif GTEST_OS_WINDOWS
        -: 9131:  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
        -: 9132:  return FilePath(_getcwd(cwd, sizeof(cwd)) == NULL ? "" : cwd);
        -: 9133:#else
        1: 9134:  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
        1: 9135:  char* result = getcwd(cwd, sizeof(cwd));
        1: 9135-block  0
call    0 returned 1
        -: 9136:# if GTEST_OS_NACL
        -: 9137:  // getcwd will likely fail in NaCl due to the sandbox, so return something
        -: 9138:  // reasonable. The user may have provided a shim implementation for getcwd,
        -: 9139:  // however, so fallback only when failure is detected.
        -: 9140:  return FilePath(result == NULL ? kCurrentDirectoryString : cwd);
        -: 9141:# endif  // GTEST_OS_NACL
       1*: 9142:  return FilePath(result == NULL ? "" : cwd);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 9142-block  0
    %%%%%: 9142-block  1
        1: 9142-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 9142-block  3
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 9142-block  4
call    9 returned 1
call   10 returned 1
        1: 9142-block  5
    $$$$$: 9142-block  6
call   11 never executed
    $$$$$: 9142-block  7
    $$$$$: 9142-block  8
call   12 never executed
    $$$$$: 9142-block  9
        -: 9143:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 9144:}
        -: 9145:
        -: 9146:// Returns a copy of the FilePath with the case-insensitive extension removed.
        -: 9147:// Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns
        -: 9148:// FilePath("dir/file"). If a case-insensitive extension is not
        -: 9149:// found, returns a copy of the original FilePath.
function _ZNK7testing8internal8FilePath15RemoveExtensionEPKc called 0 returned 0% blocks executed 0%
    #####: 9150:FilePath FilePath::RemoveExtension(const char* extension) const {
    #####: 9151:  const std::string dot_extension = std::string(".") + extension;
    %%%%%: 9151-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9151-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%: 9151-block  2
call    8 never executed
    $$$$$: 9151-block  3
    $$$$$: 9151-block  4
    $$$$$: 9151-block  5
call    9 never executed
    #####: 9152:  if (String::EndsWithCaseInsensitive(pathname_, dot_extension)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9153:    return FilePath(pathname_.substr(
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9153-block  0
call    3 never executed
    $$$$$: 9153-block  1
call    4 never executed
    $$$$$: 9153-block  2
    #####: 9154:        0, pathname_.length() - dot_extension.length()));
    %%%%%: 9154-block  0
call    0 never executed
call    1 never executed
    %%%%%: 9154-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9154-block  2
        -: 9155:  }
    #####: 9156:  return *this;
    %%%%%: 9156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9156-block  1
        -: 9157:}
        -: 9158:
        -: 9159:// Returns a pointer to the last occurrence of a valid path separator in
        -: 9160:// the FilePath. On Windows, for example, both '/' and '\' are valid path
        -: 9161:// separators. Returns NULL if no path separator was found.
function _ZNK7testing8internal8FilePath21FindLastPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####: 9162:const char* FilePath::FindLastPathSeparator() const {
    #####: 9163:  const char* const last_sep = strrchr(c_str(), kPathSeparator);
    %%%%%: 9163-block  0
call    0 never executed
        -: 9164:#if GTEST_HAS_ALT_PATH_SEP_
        -: 9165:  const char* const last_alt_sep = strrchr(c_str(), kAlternatePathSeparator);
        -: 9166:  // Comparing two pointers of which only one is NULL is undefined.
        -: 9167:  if (last_alt_sep != NULL &&
        -: 9168:      (last_sep == NULL || last_alt_sep > last_sep)) {
        -: 9169:    return last_alt_sep;
        -: 9170:  }
        -: 9171:#endif
    #####: 9172:  return last_sep;
        -: 9173:}
        -: 9174:
        -: 9175:// Returns a copy of the FilePath with the directory part removed.
        -: 9176:// Example: FilePath("path/to/file").RemoveDirectoryName() returns
        -: 9177:// FilePath("file"). If there is no directory part ("just_a_file"), it returns
        -: 9178:// the FilePath unmodified. If there is no file part ("just_a_dir/") it
        -: 9179:// returns an empty FilePath ("").
        -: 9180:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath19RemoveDirectoryNameEv called 0 returned 0% blocks executed 0%
    #####: 9181:FilePath FilePath::RemoveDirectoryName() const {
    #####: 9182:  const char* const last_sep = FindLastPathSeparator();
    %%%%%: 9182-block  0
call    0 never executed
    #####: 9183:  return last_sep ? FilePath(last_sep + 1) : *this;
branch  0 never executed
branch  1 never executed
    %%%%%: 9183-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9183-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 9183-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 9183-block  3
branch 12 never executed
branch 13 never executed
    %%%%%: 9183-block  4
call   14 never executed
    %%%%%: 9183-block  5
branch 15 never executed
branch 16 never executed
    %%%%%: 9183-block  6
call   17 never executed
    %%%%%: 9183-block  7
    %%%%%: 9183-block  8
    $$$$$: 9183-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 9183-block 10
call   20 never executed
    $$$$$: 9183-block 11
    $$$$$: 9183-block 12
branch 21 never executed
branch 22 never executed
    $$$$$: 9183-block 13
call   23 never executed
        -: 9184:}
        -: 9185:
        -: 9186:// RemoveFileName returns the directory path with the filename removed.
        -: 9187:// Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".
        -: 9188:// If the FilePath is "a_file" or "/a_file", RemoveFileName returns
        -: 9189:// FilePath("./") or, on Windows, FilePath(".\\"). If the filepath does
        -: 9190:// not have a file, like "just/a/dir/", it returns the FilePath unmodified.
        -: 9191:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath14RemoveFileNameEv called 0 returned 0% blocks executed 0%
    #####: 9192:FilePath FilePath::RemoveFileName() const {
    #####: 9193:  const char* const last_sep = FindLastPathSeparator();
    %%%%%: 9193-block  0
call    0 never executed
    #####: 9194:  std::string dir;
call    0 never executed
    %%%%%: 9194-block  0
call    1 never executed
    $$$$$: 9194-block  1
call    2 never executed
    #####: 9195:  if (last_sep) {
branch  0 never executed
branch  1 never executed
    #####: 9196:    dir = std::string(c_str(), last_sep + 1 - c_str());
    %%%%%: 9196-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9196-block  1
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 9196-block  2
call    9 never executed
    $$$$$: 9196-block  3
        -: 9197:  } else {
    #####: 9198:    dir = kCurrentDirectoryString;
    %%%%%: 9198-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9199:  }
    #####: 9200:  return FilePath(dir);
    %%%%%: 9200-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9200-block  1
    %%%%%: 9200-block  2
        -: 9201:}
        -: 9202:
        -: 9203:// Helper functions for naming files in a directory for xml output.
        -: 9204:
        -: 9205:// Given directory = "dir", base_name = "test", number = 0,
        -: 9206:// extension = "xml", returns "dir/test.xml". If number is greater
        -: 9207:// than zero (e.g., 12), returns "dir/test_12.xml".
        -: 9208:// On Windows platform, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath12MakeFileNameERKS1_S3_iPKc called 0 returned 0% blocks executed 0%
    #####: 9209:FilePath FilePath::MakeFileName(const FilePath& directory,
        -: 9210:                                const FilePath& base_name,
        -: 9211:                                int number,
        -: 9212:                                const char* extension) {
    #####: 9213:  std::string file;
    %%%%%: 9213-block  0
call    0 never executed
    $$$$$: 9213-block  1
call    1 never executed
    #####: 9214:  if (number == 0) {
branch  0 never executed
branch  1 never executed
    #####: 9215:    file = base_name.string() + "." + extension;
    %%%%%: 9215-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9215-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9215-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 9215-block  3
call   10 never executed
    $$$$$: 9215-block  4
        -: 9216:  } else {
    #####: 9217:    file = base_name.string() + "_" + StreamableToString(number)
    %%%%%: 9217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9217-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9217-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 9217-block  3
call   12 never executed
    $$$$$: 9217-block  4
    $$$$$: 9217-block  5
call   13 never executed
    $$$$$: 9217-block  6
    $$$$$: 9217-block  7
call   14 never executed
    $$$$$: 9217-block  8
    #####: 9218:        + "." + extension;
    %%%%%: 9218-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9218-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9218-block  2
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 9218-block  3
call   10 never executed
    $$$$$: 9218-block  4
        -: 9219:  }
    #####: 9220:  return ConcatPaths(directory, FilePath(file));
    %%%%%: 9220-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9220-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9220-block  2
    %%%%%: 9220-block  3
call    6 never executed
call    7 never executed
    %%%%%: 9220-block  4
    $$$$$: 9220-block  5
call    8 never executed
    $$$$$: 9220-block  6
        -: 9221:}
        -: 9222:
        -: 9223:// Given directory = "dir", relative_path = "test.xml", returns "dir/test.xml".
        -: 9224:// On Windows, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath11ConcatPathsERKS1_S3_ called 0 returned 0% blocks executed 0%
    #####: 9225:FilePath FilePath::ConcatPaths(const FilePath& directory,
        -: 9226:                               const FilePath& relative_path) {
    #####: 9227:  if (directory.IsEmpty())
    %%%%%: 9227-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9228:    return relative_path;
    %%%%%: 9228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9228-block  1
    #####: 9229:  const FilePath dir(directory.RemoveTrailingPathSeparator());
    %%%%%: 9229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 9229-block  1
call    3 never executed
    #####: 9230:  return FilePath(dir.string() + kPathSeparator + relative_path.string());
    %%%%%: 9230-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9230-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9230-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 9230-block  3
    %%%%%: 9230-block  4
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 9230-block  5
call   14 never executed
    $$$$$: 9230-block  6
    $$$$$: 9230-block  7
call   15 never executed
    $$$$$: 9230-block  8
        -: 9231:}
        -: 9232:
        -: 9233:// Returns true if pathname describes something findable in the file-system,
        -: 9234:// either a file, directory, or whatever.
function _ZNK7testing8internal8FilePath21FileOrDirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####: 9235:bool FilePath::FileOrDirectoryExists() const {
        -: 9236:#if GTEST_OS_WINDOWS_MOBILE
        -: 9237:  LPCWSTR unicode = String::AnsiToUtf16(pathname_.c_str());
        -: 9238:  const DWORD attributes = GetFileAttributes(unicode);
        -: 9239:  delete [] unicode;
        -: 9240:  return attributes != kInvalidFileAttributes;
        -: 9241:#else
        -: 9242:  posix::StatStruct file_stat;
    #####: 9243:  return posix::Stat(pathname_.c_str(), &file_stat) == 0;
    %%%%%: 9243-block  0
call    0 never executed
call    1 never executed
        -: 9244:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 9245:}
        -: 9246:
        -: 9247:// Returns true if pathname describes a directory in the file-system
        -: 9248:// that exists.
function _ZNK7testing8internal8FilePath15DirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####: 9249:bool FilePath::DirectoryExists() const {
    #####: 9250:  bool result = false;
        -: 9251:#if GTEST_OS_WINDOWS
        -: 9252:  // Don't strip off trailing separator if path is a root directory on
        -: 9253:  // Windows (like "C:\\").
        -: 9254:  const FilePath& path(IsRootDirectory() ? *this :
        -: 9255:                                           RemoveTrailingPathSeparator());
        -: 9256:#else
    #####: 9257:  const FilePath& path(*this);
        -: 9258:#endif
        -: 9259:
        -: 9260:#if GTEST_OS_WINDOWS_MOBILE
        -: 9261:  LPCWSTR unicode = String::AnsiToUtf16(path.c_str());
        -: 9262:  const DWORD attributes = GetFileAttributes(unicode);
        -: 9263:  delete [] unicode;
        -: 9264:  if ((attributes != kInvalidFileAttributes) &&
        -: 9265:      (attributes & FILE_ATTRIBUTE_DIRECTORY)) {
        -: 9266:    result = true;
        -: 9267:  }
        -: 9268:#else
        -: 9269:  posix::StatStruct file_stat;
    #####: 9270:  result = posix::Stat(path.c_str(), &file_stat) == 0 &&
    %%%%%: 9270-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9270-block  1
    %%%%%: 9270-block  2
    #####: 9271:      posix::IsDir(file_stat);
    %%%%%: 9271-block  0
call    0 never executed
        -: 9272:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 9273:
    #####: 9274:  return result;
    %%%%%: 9274-block  0
        -: 9275:}
        -: 9276:
        -: 9277:// Returns true if pathname describes a root directory. (Windows has one
        -: 9278:// root directory per disk drive.)
function _ZNK7testing8internal8FilePath15IsRootDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 9279:bool FilePath::IsRootDirectory() const {
        -: 9280:#if GTEST_OS_WINDOWS
        -: 9281:  // FIXME: on Windows a network share like
        -: 9282:  // \\server\share can be a root directory, although it cannot be the
        -: 9283:  // current directory.  Handle this properly.
        -: 9284:  return pathname_.length() == 3 && IsAbsolutePath();
        -: 9285:#else
    #####: 9286:  return pathname_.length() == 1 && IsPathSeparator(pathname_.c_str()[0]);
    %%%%%: 9286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9286-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 9286-block  2
    %%%%%: 9286-block  3
    %%%%%: 9286-block  4
        -: 9287:#endif
        -: 9288:}
        -: 9289:
        -: 9290:// Returns true if pathname describes an absolute path.
function _ZNK7testing8internal8FilePath14IsAbsolutePathEv called 0 returned 0% blocks executed 0%
    #####: 9291:bool FilePath::IsAbsolutePath() const {
    #####: 9292:  const char* const name = pathname_.c_str();
    %%%%%: 9292-block  0
call    0 never executed
        -: 9293:#if GTEST_OS_WINDOWS
        -: 9294:  return pathname_.length() >= 3 &&
        -: 9295:     ((name[0] >= 'a' && name[0] <= 'z') ||
        -: 9296:      (name[0] >= 'A' && name[0] <= 'Z')) &&
        -: 9297:     name[1] == ':' &&
        -: 9298:     IsPathSeparator(name[2]);
        -: 9299:#else
    #####: 9300:  return IsPathSeparator(name[0]);
call    0 never executed
        -: 9301:#endif
        -: 9302:}
        -: 9303:
        -: 9304:// Returns a pathname for a file that does not currently exist. The pathname
        -: 9305:// will be directory/base_name.extension or
        -: 9306:// directory/base_name_<number>.extension if directory/base_name.extension
        -: 9307:// already exists. The number will be incremented until a pathname is found
        -: 9308:// that does not already exist.
        -: 9309:// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.
        -: 9310:// There could be a race condition if two or more processes are calling this
        -: 9311:// function at the same time -- they could both pick the same filename.
function _ZN7testing8internal8FilePath22GenerateUniqueFileNameERKS1_S3_PKc called 0 returned 0% blocks executed 0%
    #####: 9312:FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,
        -: 9313:                                          const FilePath& base_name,
        -: 9314:                                          const char* extension) {
    #####: 9315:  FilePath full_pathname;
    %%%%%: 9315-block  0
call    0 never executed
    #####: 9316:  int number = 0;
    #####: 9317:  do {
    %%%%%: 9317-block  0
    #####: 9318:    full_pathname.Set(MakeFileName(directory, base_name, number++, extension));
    %%%%%: 9318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9318-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9318-block  2
call    6 never executed
    $$$$$: 9318-block  3
call    7 never executed
    $$$$$: 9318-block  4
    #####: 9319:  } while (full_pathname.FileOrDirectoryExists());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9320:  return full_pathname;
    %%%%%: 9320-block  0
    %%%%%: 9320-block  1
        -: 9321:}
        -: 9322:
        -: 9323:// Returns true if FilePath ends with a path separator, which indicates that
        -: 9324:// it is intended to represent a directory. Returns false otherwise.
        -: 9325:// This does NOT check that a directory (or file) actually exists.
function _ZNK7testing8internal8FilePath11IsDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 9326:bool FilePath::IsDirectory() const {
    #####: 9327:  return !pathname_.empty() &&
    %%%%%: 9327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9327-block  1
    %%%%%: 9327-block  2
    #####: 9328:         IsPathSeparator(pathname_.c_str()[pathname_.length() - 1]);
    %%%%%: 9328-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 9328-block  1
        -: 9329:}
        -: 9330:
        -: 9331:// Create directories so that path exists. Returns true if successful or if
        -: 9332:// the directories already exist; returns false if unable to create directories
        -: 9333:// for any reason.
function _ZNK7testing8internal8FilePath28CreateDirectoriesRecursivelyEv called 0 returned 0% blocks executed 0%
    #####: 9334:bool FilePath::CreateDirectoriesRecursively() const {
    #####: 9335:  if (!this->IsDirectory()) {
    %%%%%: 9335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9336:    return false;
    %%%%%: 9336-block  0
        -: 9337:  }
        -: 9338:
    #####: 9339:  if (pathname_.length() == 0 || this->DirectoryExists()) {
    %%%%%: 9339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9339-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9339-block  2
    %%%%%: 9339-block  3
    %%%%%: 9339-block  4
branch  6 never executed
branch  7 never executed
    #####: 9340:    return true;
    %%%%%: 9340-block  0
        -: 9341:  }
        -: 9342:
    #####: 9343:  const FilePath parent(this->RemoveTrailingPathSeparator().RemoveFileName());
    %%%%%: 9343-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9343-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 9343-block  2
    $$$$$: 9343-block  3
call    6 never executed
    #####: 9344:  return parent.CreateDirectoriesRecursively() && this->CreateFolder();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9344-block  0
branch  3 never executed
branch  4 never executed
    %%%%%: 9344-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9344-block  2
    %%%%%: 9344-block  3
    %%%%%: 9344-block  4
call    8 never executed
        -: 9345:}
        -: 9346:
        -: 9347:// Create the directory so that path exists. Returns true if successful or
        -: 9348:// if the directory already exists; returns false if unable to create the
        -: 9349:// directory for any reason, including if the parent directory does not
        -: 9350:// exist. Not named "CreateDirectory" because that's a macro on Windows.
function _ZNK7testing8internal8FilePath12CreateFolderEv called 0 returned 0% blocks executed 0%
    #####: 9351:bool FilePath::CreateFolder() const {
        -: 9352:#if GTEST_OS_WINDOWS_MOBILE
        -: 9353:  FilePath removed_sep(this->RemoveTrailingPathSeparator());
        -: 9354:  LPCWSTR unicode = String::AnsiToUtf16(removed_sep.c_str());
        -: 9355:  int result = CreateDirectory(unicode, NULL) ? 0 : -1;
        -: 9356:  delete [] unicode;
        -: 9357:#elif GTEST_OS_WINDOWS
        -: 9358:  int result = _mkdir(pathname_.c_str());
        -: 9359:#else
    #####: 9360:  int result = mkdir(pathname_.c_str(), 0777);
    %%%%%: 9360-block  0
call    0 never executed
call    1 never executed
        -: 9361:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 9362:
    #####: 9363:  if (result == -1) {
branch  0 never executed
branch  1 never executed
    #####: 9364:    return this->DirectoryExists();  // An error is OK if the directory exists.
    %%%%%: 9364-block  0
call    0 never executed
        -: 9365:  }
    #####: 9366:  return true;  // No error.
    %%%%%: 9366-block  0
        -: 9367:}
        -: 9368:
        -: 9369:// If input name has a trailing separator character, remove it and return the
        -: 9370:// name, otherwise return the name string unmodified.
        -: 9371:// On Windows platform, uses \ as the separator, other platforms use /.
function _ZNK7testing8internal8FilePath27RemoveTrailingPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####: 9372:FilePath FilePath::RemoveTrailingPathSeparator() const {
    #####: 9373:  return IsDirectory()
    %%%%%: 9373-block  0
call    0 never executed
    #####: 9374:      ? FilePath(pathname_.substr(0, pathname_.length() - 1))
    %%%%%: 9374-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 9374-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 9374-block  2
call    6 never executed
    %%%%%: 9374-block  3
    $$$$$: 9374-block  4
branch  7 never executed
branch  8 never executed
    $$$$$: 9374-block  5
call    9 never executed
    #####: 9375:      : *this;
branch  0 never executed
branch  1 never executed
    %%%%%: 9375-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 9375-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 9375-block  2
    %%%%%: 9375-block  3
        -: 9376:}
        -: 9377:
        -: 9378:// Removes any redundant separators that might be in the pathname.
        -: 9379:// For example, "bar///foo" becomes "bar/foo". Does not eliminate other
        -: 9380:// redundancies that might be in a pathname involving "." or "..".
        -: 9381:// FIXME: handle Windows network shares (e.g. \\server\share).
function _ZN7testing8internal8FilePath9NormalizeEv called 1 returned 100% blocks executed 90%
        1: 9382:void FilePath::Normalize() {
        1: 9383:  if (pathname_.c_str() == NULL) {
        1: 9383-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 9384:    pathname_ = "";
    %%%%%: 9384-block  0
call    0 never executed
    #####: 9385:    return;
        -: 9386:  }
        1: 9387:  const char* src = pathname_.c_str();
        1: 9387-block  0
call    0 returned 1
        1: 9388:  char* const dest = new char[pathname_.length() + 1];
call    0 returned 1
call    1 returned 1
        1: 9389:  char* dest_ptr = dest;
        1: 9390:  memset(dest_ptr, 0, pathname_.length() + 1);
call    0 returned 1
        -: 9391:
      108: 9392:  while (*src != '\0') {
      108: 9392-block  0
branch  0 taken 107 (fallthrough)
branch  1 taken 1
      107: 9393:    *dest_ptr = *src;
      107: 9394:    if (!IsPathSeparator(*src)) {
      107: 9394-block  0
call    0 returned 107
branch  1 taken 98 (fallthrough)
branch  2 taken 9
       98: 9395:      src++;
       98: 9395-block  0
        -: 9396:    } else {
        -: 9397:#if GTEST_HAS_ALT_PATH_SEP_
        -: 9398:      if (*dest_ptr == kAlternatePathSeparator) {
        -: 9399:        *dest_ptr = kPathSeparator;
        -: 9400:      }
        -: 9401:#endif
       18: 9402:      while (IsPathSeparator(*src))
       18: 9402-block  0
call    0 returned 18
branch  1 taken 9 (fallthrough)
branch  2 taken 9
        9: 9403:        src++;
        9: 9403-block  0
        -: 9404:    }
      107: 9405:    dest_ptr++;
      107: 9405-block  0
        -: 9406:  }
        1: 9407:  *dest_ptr = '\0';
        1: 9408:  pathname_ = dest;
        1: 9408-block  0
call    0 returned 1
        1: 9409:  delete[] dest;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 9409-block  0
call    2 returned 1
        -: 9410:}
        -: 9411:
        -: 9412:}  // namespace internal
        -: 9413:}  // namespace testing
        -: 9414:// Copyright 2008, Google Inc.
        -: 9415:// All rights reserved.
        -: 9416://
        -: 9417:// Redistribution and use in source and binary forms, with or without
        -: 9418:// modification, are permitted provided that the following conditions are
        -: 9419:// met:
        -: 9420://
        -: 9421://     * Redistributions of source code must retain the above copyright
        -: 9422:// notice, this list of conditions and the following disclaimer.
        -: 9423://     * Redistributions in binary form must reproduce the above
        -: 9424:// copyright notice, this list of conditions and the following disclaimer
        -: 9425:// in the documentation and/or other materials provided with the
        -: 9426:// distribution.
        -: 9427://     * Neither the name of Google Inc. nor the names of its
        -: 9428:// contributors may be used to endorse or promote products derived from
        -: 9429:// this software without specific prior written permission.
        -: 9430://
        -: 9431:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -: 9432:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -: 9433:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -: 9434:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -: 9435:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -: 9436:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -: 9437:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -: 9438:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -: 9439:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -: 9440:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -: 9441:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -: 9442:
        -: 9443:
        -: 9444:
        -: 9445:#include <limits.h>
        -: 9446:#include <stdlib.h>
        -: 9447:#include <stdio.h>
        -: 9448:#include <string.h>
        -: 9449:#include <fstream>
        -: 9450:
        -: 9451:#if GTEST_OS_WINDOWS
        -: 9452:# include <windows.h>
        -: 9453:# include <io.h>
        -: 9454:# include <sys/stat.h>
        -: 9455:# include <map>  // Used in ThreadLocal.
        -: 9456:#else
        -: 9457:# include <unistd.h>
        -: 9458:#endif  // GTEST_OS_WINDOWS
        -: 9459:
        -: 9460:#if GTEST_OS_MAC
        -: 9461:# include <mach/mach_init.h>
        -: 9462:# include <mach/task.h>
        -: 9463:# include <mach/vm_map.h>
        -: 9464:#endif  // GTEST_OS_MAC
        -: 9465:
        -: 9466:#if GTEST_OS_QNX
        -: 9467:# include <devctl.h>
        -: 9468:# include <fcntl.h>
        -: 9469:# include <sys/procfs.h>
        -: 9470:#endif  // GTEST_OS_QNX
        -: 9471:
        -: 9472:#if GTEST_OS_AIX
        -: 9473:# include <procinfo.h>
        -: 9474:# include <sys/types.h>
        -: 9475:#endif  // GTEST_OS_AIX
        -: 9476:
        -: 9477:#if GTEST_OS_FUCHSIA
        -: 9478:# include <zircon/process.h>
        -: 9479:# include <zircon/syscalls.h>
        -: 9480:#endif  // GTEST_OS_FUCHSIA
        -: 9481:
        -: 9482:
        -: 9483:namespace testing {
        -: 9484:namespace internal {
        -: 9485:
        -: 9486:#if defined(_MSC_VER) || defined(__BORLANDC__)
        -: 9487:// MSVC and C++Builder do not provide a definition of STDERR_FILENO.
        -: 9488:const int kStdOutFileno = 1;
        -: 9489:const int kStdErrFileno = 2;
        -: 9490:#else
        -: 9491:const int kStdOutFileno = STDOUT_FILENO;
        -: 9492:const int kStdErrFileno = STDERR_FILENO;
        -: 9493:#endif  // _MSC_VER
        -: 9494:
        -: 9495:#if GTEST_OS_LINUX
        -: 9496:
        -: 9497:namespace {
        -: 9498:template <typename T>
function _ZN7testing8internal12_GLOBAL__N_117ReadProcFileFieldIiEET_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 9499:T ReadProcFileField(const std::string& filename, int field) {
    #####: 9500:  std::string dummy;
    %%%%%: 9500-block  0
call    0 never executed
call    1 never executed
    $$$$$: 9500-block  1
call    2 never executed
    #####: 9501:  std::ifstream file(filename.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 9501-block  0
call    4 never executed
    #####: 9502:  while (field-- > 0) {
    %%%%%: 9502-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 9502-block  1
    #####: 9503:    file >> dummy;
    %%%%%: 9503-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9504:  }
    #####: 9505:  T output = 0;
    #####: 9506:  file >> output;
    %%%%%: 9506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9507:  return output;
    %%%%%: 9507-block  0
call    0 never executed
    %%%%%: 9507-block  1
        -: 9508:}
        -: 9509:}  // namespace
        -: 9510:
        -: 9511:// Returns the number of active threads, or 0 when there is an error.
function _ZN7testing8internal14GetThreadCountEv called 0 returned 0% blocks executed 0%
    #####: 9512:size_t GetThreadCount() {
        -: 9513:  const std::string filename =
    #####: 9514:      (Message() << "/proc/" << getpid() << "/stat").GetString();
    %%%%%: 9514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9514-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 9514-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 9514-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 9514-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 9514-block  5
call   16 never executed
    $$$$$: 9514-block  6
    $$$$$: 9514-block  7
    $$$$$: 9514-block  8
call   17 never executed
    #####: 9515:  return ReadProcFileField<int>(filename, 19);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 9515-block  0
call    3 never executed
    %%%%%: 9515-block  1
        -: 9516:}
        -: 9517:
        -: 9518:#elif GTEST_OS_MAC
        -: 9519:
        -: 9520:size_t GetThreadCount() {
        -: 9521:  const task_t task = mach_task_self();
        -: 9522:  mach_msg_type_number_t thread_count;
        -: 9523:  thread_act_array_t thread_list;
        -: 9524:  const kern_return_t status = task_threads(task, &thread_list, &thread_count);
        -: 9525:  if (status == KERN_SUCCESS) {
        -: 9526:    // task_threads allocates resources in thread_list and we need to free them
        -: 9527:    // to avoid leaks.
        -: 9528:    vm_deallocate(task,
        -: 9529:                  reinterpret_cast<vm_address_t>(thread_list),
        -: 9530:                  sizeof(thread_t) * thread_count);
        -: 9531:    return static_cast<size_t>(thread_count);
        -: 9532:  } else {
        -: 9533:    return 0;
        -: 9534:  }
        -: 9535:}
        -: 9536:
        -: 9537:#elif GTEST_OS_QNX
        -: 9538:
        -: 9539:// Returns the number of threads running in the process, or 0 to indicate that
        -: 9540:// we cannot detect it.
        -: 9541:size_t GetThreadCount() {
        -: 9542:  const int fd = open("/proc/self/as", O_RDONLY);
        -: 9543:  if (fd < 0) {
        -: 9544:    return 0;
        -: 9545:  }
        -: 9546:  procfs_info process_info;
        -: 9547:  const int status =
        -: 9548:      devctl(fd, DCMD_PROC_INFO, &process_info, sizeof(process_info), NULL);
        -: 9549:  close(fd);
        -: 9550:  if (status == EOK) {
        -: 9551:    return static_cast<size_t>(process_info.num_threads);
        -: 9552:  } else {
        -: 9553:    return 0;
        -: 9554:  }
        -: 9555:}
        -: 9556:
        -: 9557:#elif GTEST_OS_AIX
        -: 9558:
        -: 9559:size_t GetThreadCount() {
        -: 9560:  struct procentry64 entry;
        -: 9561:  pid_t pid = getpid();
        -: 9562:  int status = getprocs64(&entry, sizeof(entry), NULL, 0, &pid, 1);
        -: 9563:  if (status == 1) {
        -: 9564:    return entry.pi_thcount;
        -: 9565:  } else {
        -: 9566:    return 0;
        -: 9567:  }
        -: 9568:}
        -: 9569:
        -: 9570:#elif GTEST_OS_FUCHSIA
        -: 9571:
        -: 9572:size_t GetThreadCount() {
        -: 9573:  int dummy_buffer;
        -: 9574:  size_t avail;
        -: 9575:  zx_status_t status = zx_object_get_info(
        -: 9576:      zx_process_self(),
        -: 9577:      ZX_INFO_PROCESS_THREADS,
        -: 9578:      &dummy_buffer,
        -: 9579:      0,
        -: 9580:      nullptr,
        -: 9581:      &avail);
        -: 9582:  if (status == ZX_OK) {
        -: 9583:    return avail;
        -: 9584:  } else {
        -: 9585:    return 0;
        -: 9586:  }
        -: 9587:}
        -: 9588:
        -: 9589:#else
        -: 9590:
        -: 9591:size_t GetThreadCount() {
        -: 9592:  // There's no portable way to detect the number of threads, so we just
        -: 9593:  // return 0 to indicate that we cannot detect it.
        -: 9594:  return 0;
        -: 9595:}
        -: 9596:
        -: 9597:#endif  // GTEST_OS_LINUX
        -: 9598:
        -: 9599:#if GTEST_IS_THREADSAFE && GTEST_OS_WINDOWS
        -: 9600:
        -: 9601:void SleepMilliseconds(int n) {
        -: 9602:  ::Sleep(n);
        -: 9603:}
        -: 9604:
        -: 9605:AutoHandle::AutoHandle()
        -: 9606:    : handle_(INVALID_HANDLE_VALUE) {}
        -: 9607:
        -: 9608:AutoHandle::AutoHandle(Handle handle)
        -: 9609:    : handle_(handle) {}
        -: 9610:
        -: 9611:AutoHandle::~AutoHandle() {
        -: 9612:  Reset();
        -: 9613:}
        -: 9614:
        -: 9615:AutoHandle::Handle AutoHandle::Get() const {
        -: 9616:  return handle_;
        -: 9617:}
        -: 9618:
        -: 9619:void AutoHandle::Reset() {
        -: 9620:  Reset(INVALID_HANDLE_VALUE);
        -: 9621:}
        -: 9622:
        -: 9623:void AutoHandle::Reset(HANDLE handle) {
        -: 9624:  // Resetting with the same handle we already own is invalid.
        -: 9625:  if (handle_ != handle) {
        -: 9626:    if (IsCloseable()) {
        -: 9627:      ::CloseHandle(handle_);
        -: 9628:    }
        -: 9629:    handle_ = handle;
        -: 9630:  } else {
        -: 9631:    GTEST_CHECK_(!IsCloseable())
        -: 9632:        << "Resetting a valid handle to itself is likely a programmer error "
        -: 9633:            "and thus not allowed.";
        -: 9634:  }
        -: 9635:}
        -: 9636:
        -: 9637:bool AutoHandle::IsCloseable() const {
        -: 9638:  // Different Windows APIs may use either of these values to represent an
        -: 9639:  // invalid handle.
        -: 9640:  return handle_ != NULL && handle_ != INVALID_HANDLE_VALUE;
        -: 9641:}
        -: 9642:
        -: 9643:Notification::Notification()
        -: 9644:    : event_(::CreateEvent(NULL,   // Default security attributes.
        -: 9645:                           TRUE,   // Do not reset automatically.
        -: 9646:                           FALSE,  // Initially unset.
        -: 9647:                           NULL)) {  // Anonymous event.
        -: 9648:  GTEST_CHECK_(event_.Get() != NULL);
        -: 9649:}
        -: 9650:
        -: 9651:void Notification::Notify() {
        -: 9652:  GTEST_CHECK_(::SetEvent(event_.Get()) != FALSE);
        -: 9653:}
        -: 9654:
        -: 9655:void Notification::WaitForNotification() {
        -: 9656:  GTEST_CHECK_(
        -: 9657:      ::WaitForSingleObject(event_.Get(), INFINITE) == WAIT_OBJECT_0);
        -: 9658:}
        -: 9659:
        -: 9660:Mutex::Mutex()
        -: 9661:    : owner_thread_id_(0),
        -: 9662:      type_(kDynamic),
        -: 9663:      critical_section_init_phase_(0),
        -: 9664:      critical_section_(new CRITICAL_SECTION) {
        -: 9665:  ::InitializeCriticalSection(critical_section_);
        -: 9666:}
        -: 9667:
        -: 9668:Mutex::~Mutex() {
        -: 9669:  // Static mutexes are leaked intentionally. It is not thread-safe to try
        -: 9670:  // to clean them up.
        -: 9671:  // FIXME: Switch to Slim Reader/Writer (SRW) Locks, which requires
        -: 9672:  // nothing to clean it up but is available only on Vista and later.
        -: 9673:  // https://docs.microsoft.com/en-us/windows/desktop/Sync/slim-reader-writer--srw--locks
        -: 9674:  if (type_ == kDynamic) {
        -: 9675:    ::DeleteCriticalSection(critical_section_);
        -: 9676:    delete critical_section_;
        -: 9677:    critical_section_ = NULL;
        -: 9678:  }
        -: 9679:}
        -: 9680:
        -: 9681:void Mutex::Lock() {
        -: 9682:  ThreadSafeLazyInit();
        -: 9683:  ::EnterCriticalSection(critical_section_);
        -: 9684:  owner_thread_id_ = ::GetCurrentThreadId();
        -: 9685:}
        -: 9686:
        -: 9687:void Mutex::Unlock() {
        -: 9688:  ThreadSafeLazyInit();
        -: 9689:  // We don't protect writing to owner_thread_id_ here, as it's the
        -: 9690:  // caller's responsibility to ensure that the current thread holds the
        -: 9691:  // mutex when this is called.
        -: 9692:  owner_thread_id_ = 0;
        -: 9693:  ::LeaveCriticalSection(critical_section_);
        -: 9694:}
        -: 9695:
        -: 9696:// Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 9697:// with high probability.
        -: 9698:void Mutex::AssertHeld() {
        -: 9699:  ThreadSafeLazyInit();
        -: 9700:  GTEST_CHECK_(owner_thread_id_ == ::GetCurrentThreadId())
        -: 9701:      << "The current thread is not holding the mutex @" << this;
        -: 9702:}
        -: 9703:
        -: 9704:namespace {
        -: 9705:
        -: 9706:// Use the RAII idiom to flag mem allocs that are intentionally never
        -: 9707:// deallocated. The motivation is to silence the false positive mem leaks
        -: 9708:// that are reported by the debug version of MS's CRT which can only detect
        -: 9709:// if an alloc is missing a matching deallocation.
        -: 9710:// Example:
        -: 9711://    MemoryIsNotDeallocated memory_is_not_deallocated;
        -: 9712://    critical_section_ = new CRITICAL_SECTION;
        -: 9713://
        -: 9714:class MemoryIsNotDeallocated
        -: 9715:{
        -: 9716: public:
        -: 9717:  MemoryIsNotDeallocated() : old_crtdbg_flag_(0) {
        -: 9718:#ifdef _MSC_VER
        -: 9719:    old_crtdbg_flag_ = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
        -: 9720:    // Set heap allocation block type to _IGNORE_BLOCK so that MS debug CRT
        -: 9721:    // doesn't report mem leak if there's no matching deallocation.
        -: 9722:    _CrtSetDbgFlag(old_crtdbg_flag_ & ~_CRTDBG_ALLOC_MEM_DF);
        -: 9723:#endif  //  _MSC_VER
        -: 9724:  }
        -: 9725:
        -: 9726:  ~MemoryIsNotDeallocated() {
        -: 9727:#ifdef _MSC_VER
        -: 9728:    // Restore the original _CRTDBG_ALLOC_MEM_DF flag
        -: 9729:    _CrtSetDbgFlag(old_crtdbg_flag_);
        -: 9730:#endif  //  _MSC_VER
        -: 9731:  }
        -: 9732:
        -: 9733: private:
        -: 9734:  int old_crtdbg_flag_;
        -: 9735:
        -: 9736:  GTEST_DISALLOW_COPY_AND_ASSIGN_(MemoryIsNotDeallocated);
        -: 9737:};
        -: 9738:
        -: 9739:}  // namespace
        -: 9740:
        -: 9741:// Initializes owner_thread_id_ and critical_section_ in static mutexes.
        -: 9742:void Mutex::ThreadSafeLazyInit() {
        -: 9743:  // Dynamic mutexes are initialized in the constructor.
        -: 9744:  if (type_ == kStatic) {
        -: 9745:    switch (
        -: 9746:        ::InterlockedCompareExchange(&critical_section_init_phase_, 1L, 0L)) {
        -: 9747:      case 0:
        -: 9748:        // If critical_section_init_phase_ was 0 before the exchange, we
        -: 9749:        // are the first to test it and need to perform the initialization.
        -: 9750:        owner_thread_id_ = 0;
        -: 9751:        {
        -: 9752:          // Use RAII to flag that following mem alloc is never deallocated.
        -: 9753:          MemoryIsNotDeallocated memory_is_not_deallocated;
        -: 9754:          critical_section_ = new CRITICAL_SECTION;
        -: 9755:        }
        -: 9756:        ::InitializeCriticalSection(critical_section_);
        -: 9757:        // Updates the critical_section_init_phase_ to 2 to signal
        -: 9758:        // initialization complete.
        -: 9759:        GTEST_CHECK_(::InterlockedCompareExchange(
        -: 9760:                          &critical_section_init_phase_, 2L, 1L) ==
        -: 9761:                      1L);
        -: 9762:        break;
        -: 9763:      case 1:
        -: 9764:        // Somebody else is already initializing the mutex; spin until they
        -: 9765:        // are done.
        -: 9766:        while (::InterlockedCompareExchange(&critical_section_init_phase_,
        -: 9767:                                            2L,
        -: 9768:                                            2L) != 2L) {
        -: 9769:          // Possibly yields the rest of the thread's time slice to other
        -: 9770:          // threads.
        -: 9771:          ::Sleep(0);
        -: 9772:        }
        -: 9773:        break;
        -: 9774:
        -: 9775:      case 2:
        -: 9776:        break;  // The mutex is already initialized and ready for use.
        -: 9777:
        -: 9778:      default:
        -: 9779:        GTEST_CHECK_(false)
        -: 9780:            << "Unexpected value of critical_section_init_phase_ "
        -: 9781:            << "while initializing a static mutex.";
        -: 9782:    }
        -: 9783:  }
        -: 9784:}
        -: 9785:
        -: 9786:namespace {
        -: 9787:
        -: 9788:class ThreadWithParamSupport : public ThreadWithParamBase {
        -: 9789: public:
        -: 9790:  static HANDLE CreateThread(Runnable* runnable,
        -: 9791:                             Notification* thread_can_start) {
        -: 9792:    ThreadMainParam* param = new ThreadMainParam(runnable, thread_can_start);
        -: 9793:    DWORD thread_id;
        -: 9794:    // FIXME: Consider to use _beginthreadex instead.
        -: 9795:    HANDLE thread_handle = ::CreateThread(
        -: 9796:        NULL,    // Default security.
        -: 9797:        0,       // Default stack size.
        -: 9798:        &ThreadWithParamSupport::ThreadMain,
        -: 9799:        param,   // Parameter to ThreadMainStatic
        -: 9800:        0x0,     // Default creation flags.
        -: 9801:        &thread_id);  // Need a valid pointer for the call to work under Win98.
        -: 9802:    GTEST_CHECK_(thread_handle != NULL) << "CreateThread failed with error "
        -: 9803:                                        << ::GetLastError() << ".";
        -: 9804:    if (thread_handle == NULL) {
        -: 9805:      delete param;
        -: 9806:    }
        -: 9807:    return thread_handle;
        -: 9808:  }
        -: 9809:
        -: 9810: private:
        -: 9811:  struct ThreadMainParam {
        -: 9812:    ThreadMainParam(Runnable* runnable, Notification* thread_can_start)
        -: 9813:        : runnable_(runnable),
        -: 9814:          thread_can_start_(thread_can_start) {
        -: 9815:    }
        -: 9816:    scoped_ptr<Runnable> runnable_;
        -: 9817:    // Does not own.
        -: 9818:    Notification* thread_can_start_;
        -: 9819:  };
        -: 9820:
        -: 9821:  static DWORD WINAPI ThreadMain(void* ptr) {
        -: 9822:    // Transfers ownership.
        -: 9823:    scoped_ptr<ThreadMainParam> param(static_cast<ThreadMainParam*>(ptr));
        -: 9824:    if (param->thread_can_start_ != NULL)
        -: 9825:      param->thread_can_start_->WaitForNotification();
        -: 9826:    param->runnable_->Run();
        -: 9827:    return 0;
        -: 9828:  }
        -: 9829:
        -: 9830:  // Prohibit instantiation.
        -: 9831:  ThreadWithParamSupport();
        -: 9832:
        -: 9833:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParamSupport);
        -: 9834:};
        -: 9835:
        -: 9836:}  // namespace
        -: 9837:
        -: 9838:ThreadWithParamBase::ThreadWithParamBase(Runnable *runnable,
        -: 9839:                                         Notification* thread_can_start)
        -: 9840:      : thread_(ThreadWithParamSupport::CreateThread(runnable,
        -: 9841:                                                     thread_can_start)) {
        -: 9842:}
        -: 9843:
        -: 9844:ThreadWithParamBase::~ThreadWithParamBase() {
        -: 9845:  Join();
        -: 9846:}
        -: 9847:
        -: 9848:void ThreadWithParamBase::Join() {
        -: 9849:  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)
        -: 9850:      << "Failed to join the thread with error " << ::GetLastError() << ".";
        -: 9851:}
        -: 9852:
        -: 9853:// Maps a thread to a set of ThreadIdToThreadLocals that have values
        -: 9854:// instantiated on that thread and notifies them when the thread exits.  A
        -: 9855:// ThreadLocal instance is expected to persist until all threads it has
        -: 9856:// values on have terminated.
        -: 9857:class ThreadLocalRegistryImpl {
        -: 9858: public:
        -: 9859:  // Registers thread_local_instance as having value on the current thread.
        -: 9860:  // Returns a value that can be used to identify the thread from other threads.
        -: 9861:  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
        -: 9862:      const ThreadLocalBase* thread_local_instance) {
        -: 9863:    DWORD current_thread = ::GetCurrentThreadId();
        -: 9864:    MutexLock lock(&mutex_);
        -: 9865:    ThreadIdToThreadLocals* const thread_to_thread_locals =
        -: 9866:        GetThreadLocalsMapLocked();
        -: 9867:    ThreadIdToThreadLocals::iterator thread_local_pos =
        -: 9868:        thread_to_thread_locals->find(current_thread);
        -: 9869:    if (thread_local_pos == thread_to_thread_locals->end()) {
        -: 9870:      thread_local_pos = thread_to_thread_locals->insert(
        -: 9871:          std::make_pair(current_thread, ThreadLocalValues())).first;
        -: 9872:      StartWatcherThreadFor(current_thread);
        -: 9873:    }
        -: 9874:    ThreadLocalValues& thread_local_values = thread_local_pos->second;
        -: 9875:    ThreadLocalValues::iterator value_pos =
        -: 9876:        thread_local_values.find(thread_local_instance);
        -: 9877:    if (value_pos == thread_local_values.end()) {
        -: 9878:      value_pos =
        -: 9879:          thread_local_values
        -: 9880:              .insert(std::make_pair(
        -: 9881:                  thread_local_instance,
        -: 9882:                  linked_ptr<ThreadLocalValueHolderBase>(
        -: 9883:                      thread_local_instance->NewValueForCurrentThread())))
        -: 9884:              .first;
        -: 9885:    }
        -: 9886:    return value_pos->second.get();
        -: 9887:  }
        -: 9888:
        -: 9889:  static void OnThreadLocalDestroyed(
        -: 9890:      const ThreadLocalBase* thread_local_instance) {
        -: 9891:    std::vector<linked_ptr<ThreadLocalValueHolderBase> > value_holders;
        -: 9892:    // Clean up the ThreadLocalValues data structure while holding the lock, but
        -: 9893:    // defer the destruction of the ThreadLocalValueHolderBases.
        -: 9894:    {
        -: 9895:      MutexLock lock(&mutex_);
        -: 9896:      ThreadIdToThreadLocals* const thread_to_thread_locals =
        -: 9897:          GetThreadLocalsMapLocked();
        -: 9898:      for (ThreadIdToThreadLocals::iterator it =
        -: 9899:          thread_to_thread_locals->begin();
        -: 9900:          it != thread_to_thread_locals->end();
        -: 9901:          ++it) {
        -: 9902:        ThreadLocalValues& thread_local_values = it->second;
        -: 9903:        ThreadLocalValues::iterator value_pos =
        -: 9904:            thread_local_values.find(thread_local_instance);
        -: 9905:        if (value_pos != thread_local_values.end()) {
        -: 9906:          value_holders.push_back(value_pos->second);
        -: 9907:          thread_local_values.erase(value_pos);
        -: 9908:          // This 'if' can only be successful at most once, so theoretically we
        -: 9909:          // could break out of the loop here, but we don't bother doing so.
        -: 9910:        }
        -: 9911:      }
        -: 9912:    }
        -: 9913:    // Outside the lock, let the destructor for 'value_holders' deallocate the
        -: 9914:    // ThreadLocalValueHolderBases.
        -: 9915:  }
        -: 9916:
        -: 9917:  static void OnThreadExit(DWORD thread_id) {
        -: 9918:    GTEST_CHECK_(thread_id != 0) << ::GetLastError();
        -: 9919:    std::vector<linked_ptr<ThreadLocalValueHolderBase> > value_holders;
        -: 9920:    // Clean up the ThreadIdToThreadLocals data structure while holding the
        -: 9921:    // lock, but defer the destruction of the ThreadLocalValueHolderBases.
        -: 9922:    {
        -: 9923:      MutexLock lock(&mutex_);
        -: 9924:      ThreadIdToThreadLocals* const thread_to_thread_locals =
        -: 9925:          GetThreadLocalsMapLocked();
        -: 9926:      ThreadIdToThreadLocals::iterator thread_local_pos =
        -: 9927:          thread_to_thread_locals->find(thread_id);
        -: 9928:      if (thread_local_pos != thread_to_thread_locals->end()) {
        -: 9929:        ThreadLocalValues& thread_local_values = thread_local_pos->second;
        -: 9930:        for (ThreadLocalValues::iterator value_pos =
        -: 9931:            thread_local_values.begin();
        -: 9932:            value_pos != thread_local_values.end();
        -: 9933:            ++value_pos) {
        -: 9934:          value_holders.push_back(value_pos->second);
        -: 9935:        }
        -: 9936:        thread_to_thread_locals->erase(thread_local_pos);
        -: 9937:      }
        -: 9938:    }
        -: 9939:    // Outside the lock, let the destructor for 'value_holders' deallocate the
        -: 9940:    // ThreadLocalValueHolderBases.
        -: 9941:  }
        -: 9942:
        -: 9943: private:
        -: 9944:  // In a particular thread, maps a ThreadLocal object to its value.
        -: 9945:  typedef std::map<const ThreadLocalBase*,
        -: 9946:                   linked_ptr<ThreadLocalValueHolderBase> > ThreadLocalValues;
        -: 9947:  // Stores all ThreadIdToThreadLocals having values in a thread, indexed by
        -: 9948:  // thread's ID.
        -: 9949:  typedef std::map<DWORD, ThreadLocalValues> ThreadIdToThreadLocals;
        -: 9950:
        -: 9951:  // Holds the thread id and thread handle that we pass from
        -: 9952:  // StartWatcherThreadFor to WatcherThreadFunc.
        -: 9953:  typedef std::pair<DWORD, HANDLE> ThreadIdAndHandle;
        -: 9954:
        -: 9955:  static void StartWatcherThreadFor(DWORD thread_id) {
        -: 9956:    // The returned handle will be kept in thread_map and closed by
        -: 9957:    // watcher_thread in WatcherThreadFunc.
        -: 9958:    HANDLE thread = ::OpenThread(SYNCHRONIZE | THREAD_QUERY_INFORMATION,
        -: 9959:                                 FALSE,
        -: 9960:                                 thread_id);
        -: 9961:    GTEST_CHECK_(thread != NULL);
        -: 9962:    // We need to pass a valid thread ID pointer into CreateThread for it
        -: 9963:    // to work correctly under Win98.
        -: 9964:    DWORD watcher_thread_id;
        -: 9965:    HANDLE watcher_thread = ::CreateThread(
        -: 9966:        NULL,   // Default security.
        -: 9967:        0,      // Default stack size
        -: 9968:        &ThreadLocalRegistryImpl::WatcherThreadFunc,
        -: 9969:        reinterpret_cast<LPVOID>(new ThreadIdAndHandle(thread_id, thread)),
        -: 9970:        CREATE_SUSPENDED,
        -: 9971:        &watcher_thread_id);
        -: 9972:    GTEST_CHECK_(watcher_thread != NULL);
        -: 9973:    // Give the watcher thread the same priority as ours to avoid being
        -: 9974:    // blocked by it.
        -: 9975:    ::SetThreadPriority(watcher_thread,
        -: 9976:                        ::GetThreadPriority(::GetCurrentThread()));
        -: 9977:    ::ResumeThread(watcher_thread);
        -: 9978:    ::CloseHandle(watcher_thread);
        -: 9979:  }
        -: 9980:
        -: 9981:  // Monitors exit from a given thread and notifies those
        -: 9982:  // ThreadIdToThreadLocals about thread termination.
        -: 9983:  static DWORD WINAPI WatcherThreadFunc(LPVOID param) {
        -: 9984:    const ThreadIdAndHandle* tah =
        -: 9985:        reinterpret_cast<const ThreadIdAndHandle*>(param);
        -: 9986:    GTEST_CHECK_(
        -: 9987:        ::WaitForSingleObject(tah->second, INFINITE) == WAIT_OBJECT_0);
        -: 9988:    OnThreadExit(tah->first);
        -: 9989:    ::CloseHandle(tah->second);
        -: 9990:    delete tah;
        -: 9991:    return 0;
        -: 9992:  }
        -: 9993:
        -: 9994:  // Returns map of thread local instances.
        -: 9995:  static ThreadIdToThreadLocals* GetThreadLocalsMapLocked() {
        -: 9996:    mutex_.AssertHeld();
        -: 9997:    MemoryIsNotDeallocated memory_is_not_deallocated;
        -: 9998:    static ThreadIdToThreadLocals* map = new ThreadIdToThreadLocals();
        -: 9999:    return map;
        -:10000:  }
        -:10001:
        -:10002:  // Protects access to GetThreadLocalsMapLocked() and its return value.
        -:10003:  static Mutex mutex_;
        -:10004:  // Protects access to GetThreadMapLocked() and its return value.
        -:10005:  static Mutex thread_map_mutex_;
        -:10006:};
        -:10007:
        -:10008:Mutex ThreadLocalRegistryImpl::mutex_(Mutex::kStaticMutex);
        -:10009:Mutex ThreadLocalRegistryImpl::thread_map_mutex_(Mutex::kStaticMutex);
        -:10010:
        -:10011:ThreadLocalValueHolderBase* ThreadLocalRegistry::GetValueOnCurrentThread(
        -:10012:      const ThreadLocalBase* thread_local_instance) {
        -:10013:  return ThreadLocalRegistryImpl::GetValueOnCurrentThread(
        -:10014:      thread_local_instance);
        -:10015:}
        -:10016:
        -:10017:void ThreadLocalRegistry::OnThreadLocalDestroyed(
        -:10018:      const ThreadLocalBase* thread_local_instance) {
        -:10019:  ThreadLocalRegistryImpl::OnThreadLocalDestroyed(thread_local_instance);
        -:10020:}
        -:10021:
        -:10022:#endif  // GTEST_IS_THREADSAFE && GTEST_OS_WINDOWS
        -:10023:
        -:10024:#if GTEST_USES_POSIX_RE
        -:10025:
        -:10026:// Implements RE.  Currently only needed for death tests.
        -:10027:
function _ZN7testing8internal2RED2Ev called 0 returned 0% blocks executed 0%
    #####:10028:RE::~RE() {
    #####:10029:  if (is_valid_) {
    %%%%%:10029-block  0
branch  0 never executed
branch  1 never executed
        -:10030:    // regfree'ing an invalid regex might crash because the content
        -:10031:    // of the regex is undefined. Since the regex's are essentially
        -:10032:    // the same, one cannot be valid (or invalid) without the other
        -:10033:    // being so too.
    #####:10034:    regfree(&partial_regex_);
    %%%%%:10034-block  0
call    0 never executed
    #####:10035:    regfree(&full_regex_);
call    0 never executed
        -:10036:  }
    #####:10037:  free(const_cast<char*>(pattern_));
    #####:10038:}
        -:10039:
        -:10040:// Returns true iff regular expression re matches the entire str.
function _ZN7testing8internal2RE9FullMatchEPKcRKS1_ called 0 returned 0% blocks executed 0%
    #####:10041:bool RE::FullMatch(const char* str, const RE& re) {
    #####:10042:  if (!re.is_valid_) return false;
    %%%%%:10042-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10042-block  1
        -:10043:
        -:10044:  regmatch_t match;
    #####:10045:  return regexec(&re.full_regex_, str, 1, &match, 0) == 0;
    %%%%%:10045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10045-block  1
        -:10046:}
        -:10047:
        -:10048:// Returns true iff regular expression re matches a substring of str
        -:10049:// (including str itself).
function _ZN7testing8internal2RE12PartialMatchEPKcRKS1_ called 0 returned 0% blocks executed 0%
    #####:10050:bool RE::PartialMatch(const char* str, const RE& re) {
    #####:10051:  if (!re.is_valid_) return false;
    %%%%%:10051-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10051-block  1
        -:10052:
        -:10053:  regmatch_t match;
    #####:10054:  return regexec(&re.partial_regex_, str, 1, &match, 0) == 0;
    %%%%%:10054-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10054-block  1
        -:10055:}
        -:10056:
        -:10057:// Initializes an RE from its string representation.
function _ZN7testing8internal2RE4InitEPKc called 0 returned 0% blocks executed 0%
    #####:10058:void RE::Init(const char* regex) {
    #####:10059:  pattern_ = posix::StrDup(regex);
    %%%%%:10059-block  0
call    0 never executed
        -:10060:
        -:10061:  // Reserves enough bytes to hold the regular expression used for a
        -:10062:  // full match.
    #####:10063:  const size_t full_regex_len = strlen(regex) + 10;
    #####:10064:  char* const full_pattern = new char[full_regex_len];
call    0 never executed
        -:10065:
    #####:10066:  snprintf(full_pattern, full_regex_len, "^(%s)$", regex);
    #####:10067:  is_valid_ = regcomp(&full_regex_, full_pattern, REG_EXTENDED) == 0;
call    0 never executed
        -:10068:  // We want to call regcomp(&partial_regex_, ...) even if the
        -:10069:  // previous expression returns false.  Otherwise partial_regex_ may
        -:10070:  // not be properly initialized can may cause trouble when it's
        -:10071:  // freed.
        -:10072:  //
        -:10073:  // Some implementation of POSIX regex (e.g. on at least some
        -:10074:  // versions of Cygwin) doesn't accept the empty string as a valid
        -:10075:  // regex.  We change it to an equivalent form "()" to be safe.
    #####:10076:  if (is_valid_) {
branch  0 never executed
branch  1 never executed
    #####:10077:    const char* const partial_regex = (*regex == '\0') ? "()" : regex;
    %%%%%:10077-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10077-block  1
    %%%%%:10077-block  2
    #####:10078:    is_valid_ = regcomp(&partial_regex_, partial_regex, REG_EXTENDED) == 0;
    %%%%%:10078-block  0
call    0 never executed
        -:10079:  }
    #####:10080:  EXPECT_TRUE(is_valid_)
    %%%%%:10080-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:10080-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:10080-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:10080-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:10080-block  4
call   14 never executed
call   15 never executed
call   16 never executed
    %%%%%:10080-block  5
call   17 never executed
    $$$$$:10080-block  6
call   18 never executed
    $$$$$:10080-block  7
    $$$$$:10080-block  8
call   19 never executed
    $$$$$:10080-block  9
    $$$$$:10080-block 10
call   20 never executed
    $$$$$:10080-block 11
    $$$$$:10080-block 12
call   21 never executed
    #####:10081:      << "Regular expression \"" << regex
    %%%%%:10081-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10081-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10082:      << "\" is not a valid POSIX Extended regular expression.";
    %%%%%:10082-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10082-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10083:
    #####:10084:  delete[] full_pattern;
branch  0 never executed
branch  1 never executed
    %%%%%:10084-block  0
call    2 never executed
    #####:10085:}
    %%%%%:10085-block  0
        -:10086:
        -:10087:#elif GTEST_USES_SIMPLE_RE
        -:10088:
        -:10089:// Returns true iff ch appears anywhere in str (excluding the
        -:10090:// terminating '\0' character).
        -:10091:bool IsInSet(char ch, const char* str) {
        -:10092:  return ch != '\0' && strchr(str, ch) != NULL;
        -:10093:}
        -:10094:
        -:10095:// Returns true iff ch belongs to the given classification.  Unlike
        -:10096:// similar functions in <ctype.h>, these aren't affected by the
        -:10097:// current locale.
        -:10098:bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }
        -:10099:bool IsAsciiPunct(char ch) {
        -:10100:  return IsInSet(ch, "^-!\"#$%&'()*+,./:;<=>?@[\\]_`{|}~");
        -:10101:}
        -:10102:bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }
        -:10103:bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \f\n\r\t\v"); }
        -:10104:bool IsAsciiWordChar(char ch) {
        -:10105:  return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') ||
        -:10106:      ('0' <= ch && ch <= '9') || ch == '_';
        -:10107:}
        -:10108:
        -:10109:// Returns true iff "\\c" is a supported escape sequence.
        -:10110:bool IsValidEscape(char c) {
        -:10111:  return (IsAsciiPunct(c) || IsInSet(c, "dDfnrsStvwW"));
        -:10112:}
        -:10113:
        -:10114:// Returns true iff the given atom (specified by escaped and pattern)
        -:10115:// matches ch.  The result is undefined if the atom is invalid.
        -:10116:bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {
        -:10117:  if (escaped) {  // "\\p" where p is pattern_char.
        -:10118:    switch (pattern_char) {
        -:10119:      case 'd': return IsAsciiDigit(ch);
        -:10120:      case 'D': return !IsAsciiDigit(ch);
        -:10121:      case 'f': return ch == '\f';
        -:10122:      case 'n': return ch == '\n';
        -:10123:      case 'r': return ch == '\r';
        -:10124:      case 's': return IsAsciiWhiteSpace(ch);
        -:10125:      case 'S': return !IsAsciiWhiteSpace(ch);
        -:10126:      case 't': return ch == '\t';
        -:10127:      case 'v': return ch == '\v';
        -:10128:      case 'w': return IsAsciiWordChar(ch);
        -:10129:      case 'W': return !IsAsciiWordChar(ch);
        -:10130:    }
        -:10131:    return IsAsciiPunct(pattern_char) && pattern_char == ch;
        -:10132:  }
        -:10133:
        -:10134:  return (pattern_char == '.' && ch != '\n') || pattern_char == ch;
        -:10135:}
        -:10136:
        -:10137:// Helper function used by ValidateRegex() to format error messages.
        -:10138:static std::string FormatRegexSyntaxError(const char* regex, int index) {
        -:10139:  return (Message() << "Syntax error at index " << index
        -:10140:          << " in simple regular expression \"" << regex << "\": ").GetString();
        -:10141:}
        -:10142:
        -:10143:// Generates non-fatal failures and returns false if regex is invalid;
        -:10144:// otherwise returns true.
        -:10145:bool ValidateRegex(const char* regex) {
        -:10146:  if (regex == NULL) {
        -:10147:    // FIXME: fix the source file location in the
        -:10148:    // assertion failures to match where the regex is used in user
        -:10149:    // code.
        -:10150:    ADD_FAILURE() << "NULL is not a valid simple regular expression.";
        -:10151:    return false;
        -:10152:  }
        -:10153:
        -:10154:  bool is_valid = true;
        -:10155:
        -:10156:  // True iff ?, *, or + can follow the previous atom.
        -:10157:  bool prev_repeatable = false;
        -:10158:  for (int i = 0; regex[i]; i++) {
        -:10159:    if (regex[i] == '\\') {  // An escape sequence
        -:10160:      i++;
        -:10161:      if (regex[i] == '\0') {
        -:10162:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
        -:10163:                      << "'\\' cannot appear at the end.";
        -:10164:        return false;
        -:10165:      }
        -:10166:
        -:10167:      if (!IsValidEscape(regex[i])) {
        -:10168:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
        -:10169:                      << "invalid escape sequence \"\\" << regex[i] << "\".";
        -:10170:        is_valid = false;
        -:10171:      }
        -:10172:      prev_repeatable = true;
        -:10173:    } else {  // Not an escape sequence.
        -:10174:      const char ch = regex[i];
        -:10175:
        -:10176:      if (ch == '^' && i > 0) {
        -:10177:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:10178:                      << "'^' can only appear at the beginning.";
        -:10179:        is_valid = false;
        -:10180:      } else if (ch == '$' && regex[i + 1] != '\0') {
        -:10181:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:10182:                      << "'$' can only appear at the end.";
        -:10183:        is_valid = false;
        -:10184:      } else if (IsInSet(ch, "()[]{}|")) {
        -:10185:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:10186:                      << "'" << ch << "' is unsupported.";
        -:10187:        is_valid = false;
        -:10188:      } else if (IsRepeat(ch) && !prev_repeatable) {
        -:10189:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:10190:                      << "'" << ch << "' can only follow a repeatable token.";
        -:10191:        is_valid = false;
        -:10192:      }
        -:10193:
        -:10194:      prev_repeatable = !IsInSet(ch, "^$?*+");
        -:10195:    }
        -:10196:  }
        -:10197:
        -:10198:  return is_valid;
        -:10199:}
        -:10200:
        -:10201:// Matches a repeated regex atom followed by a valid simple regular
        -:10202:// expression.  The regex atom is defined as c if escaped is false,
        -:10203:// or \c otherwise.  repeat is the repetition meta character (?, *,
        -:10204:// or +).  The behavior is undefined if str contains too many
        -:10205:// characters to be indexable by size_t, in which case the test will
        -:10206:// probably time out anyway.  We are fine with this limitation as
        -:10207:// std::string has it too.
        -:10208:bool MatchRepetitionAndRegexAtHead(
        -:10209:    bool escaped, char c, char repeat, const char* regex,
        -:10210:    const char* str) {
        -:10211:  const size_t min_count = (repeat == '+') ? 1 : 0;
        -:10212:  const size_t max_count = (repeat == '?') ? 1 :
        -:10213:      static_cast<size_t>(-1) - 1;
        -:10214:  // We cannot call numeric_limits::max() as it conflicts with the
        -:10215:  // max() macro on Windows.
        -:10216:
        -:10217:  for (size_t i = 0; i <= max_count; ++i) {
        -:10218:    // We know that the atom matches each of the first i characters in str.
        -:10219:    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {
        -:10220:      // We have enough matches at the head, and the tail matches too.
        -:10221:      // Since we only care about *whether* the pattern matches str
        -:10222:      // (as opposed to *how* it matches), there is no need to find a
        -:10223:      // greedy match.
        -:10224:      return true;
        -:10225:    }
        -:10226:    if (str[i] == '\0' || !AtomMatchesChar(escaped, c, str[i]))
        -:10227:      return false;
        -:10228:  }
        -:10229:  return false;
        -:10230:}
        -:10231:
        -:10232:// Returns true iff regex matches a prefix of str.  regex must be a
        -:10233:// valid simple regular expression and not start with "^", or the
        -:10234:// result is undefined.
        -:10235:bool MatchRegexAtHead(const char* regex, const char* str) {
        -:10236:  if (*regex == '\0')  // An empty regex matches a prefix of anything.
        -:10237:    return true;
        -:10238:
        -:10239:  // "$" only matches the end of a string.  Note that regex being
        -:10240:  // valid guarantees that there's nothing after "$" in it.
        -:10241:  if (*regex == '$')
        -:10242:    return *str == '\0';
        -:10243:
        -:10244:  // Is the first thing in regex an escape sequence?
        -:10245:  const bool escaped = *regex == '\\';
        -:10246:  if (escaped)
        -:10247:    ++regex;
        -:10248:  if (IsRepeat(regex[1])) {
        -:10249:    // MatchRepetitionAndRegexAtHead() calls MatchRegexAtHead(), so
        -:10250:    // here's an indirect recursion.  It terminates as the regex gets
        -:10251:    // shorter in each recursion.
        -:10252:    return MatchRepetitionAndRegexAtHead(
        -:10253:        escaped, regex[0], regex[1], regex + 2, str);
        -:10254:  } else {
        -:10255:    // regex isn't empty, isn't "$", and doesn't start with a
        -:10256:    // repetition.  We match the first atom of regex with the first
        -:10257:    // character of str and recurse.
        -:10258:    return (*str != '\0') && AtomMatchesChar(escaped, *regex, *str) &&
        -:10259:        MatchRegexAtHead(regex + 1, str + 1);
        -:10260:  }
        -:10261:}
        -:10262:
        -:10263:// Returns true iff regex matches any substring of str.  regex must be
        -:10264:// a valid simple regular expression, or the result is undefined.
        -:10265://
        -:10266:// The algorithm is recursive, but the recursion depth doesn't exceed
        -:10267:// the regex length, so we won't need to worry about running out of
        -:10268:// stack space normally.  In rare cases the time complexity can be
        -:10269:// exponential with respect to the regex length + the string length,
        -:10270:// but usually it's must faster (often close to linear).
        -:10271:bool MatchRegexAnywhere(const char* regex, const char* str) {
        -:10272:  if (regex == NULL || str == NULL)
        -:10273:    return false;
        -:10274:
        -:10275:  if (*regex == '^')
        -:10276:    return MatchRegexAtHead(regex + 1, str);
        -:10277:
        -:10278:  // A successful match can be anywhere in str.
        -:10279:  do {
        -:10280:    if (MatchRegexAtHead(regex, str))
        -:10281:      return true;
        -:10282:  } while (*str++ != '\0');
        -:10283:  return false;
        -:10284:}
        -:10285:
        -:10286:// Implements the RE class.
        -:10287:
        -:10288:RE::~RE() {
        -:10289:  free(const_cast<char*>(pattern_));
        -:10290:  free(const_cast<char*>(full_pattern_));
        -:10291:}
        -:10292:
        -:10293:// Returns true iff regular expression re matches the entire str.
        -:10294:bool RE::FullMatch(const char* str, const RE& re) {
        -:10295:  return re.is_valid_ && MatchRegexAnywhere(re.full_pattern_, str);
        -:10296:}
        -:10297:
        -:10298:// Returns true iff regular expression re matches a substring of str
        -:10299:// (including str itself).
        -:10300:bool RE::PartialMatch(const char* str, const RE& re) {
        -:10301:  return re.is_valid_ && MatchRegexAnywhere(re.pattern_, str);
        -:10302:}
        -:10303:
        -:10304:// Initializes an RE from its string representation.
        -:10305:void RE::Init(const char* regex) {
        -:10306:  pattern_ = full_pattern_ = NULL;
        -:10307:  if (regex != NULL) {
        -:10308:    pattern_ = posix::StrDup(regex);
        -:10309:  }
        -:10310:
        -:10311:  is_valid_ = ValidateRegex(regex);
        -:10312:  if (!is_valid_) {
        -:10313:    // No need to calculate the full pattern when the regex is invalid.
        -:10314:    return;
        -:10315:  }
        -:10316:
        -:10317:  const size_t len = strlen(regex);
        -:10318:  // Reserves enough bytes to hold the regular expression used for a
        -:10319:  // full match: we need space to prepend a '^', append a '$', and
        -:10320:  // terminate the string with '\0'.
        -:10321:  char* buffer = static_cast<char*>(malloc(len + 3));
        -:10322:  full_pattern_ = buffer;
        -:10323:
        -:10324:  if (*regex != '^')
        -:10325:    *buffer++ = '^';  // Makes sure full_pattern_ starts with '^'.
        -:10326:
        -:10327:  // We don't use snprintf or strncpy, as they trigger a warning when
        -:10328:  // compiled with VC++ 8.0.
        -:10329:  memcpy(buffer, regex, len);
        -:10330:  buffer += len;
        -:10331:
        -:10332:  if (len == 0 || regex[len - 1] != '$')
        -:10333:    *buffer++ = '$';  // Makes sure full_pattern_ ends with '$'.
        -:10334:
        -:10335:  *buffer = '\0';
        -:10336:}
        -:10337:
        -:10338:#endif  // GTEST_USES_POSIX_RE
        -:10339:
        -:10340:const char kUnknownFile[] = "unknown file";
        -:10341:
        -:10342:// Formats a source file path and a line number as they would appear
        -:10343:// in an error message from the compiler used to compile this code.
function _ZN7testing8internal18FormatFileLocationB5cxx11EPKci called 1 returned 100% blocks executed 53%
        1:10344:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {
       2*:10345:  const std::string file_name(file == NULL ? kUnknownFile : file);
        1:10345-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:10345-block  1
    %%%%%:10345-block  2
        1:10345-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:10345-block  4
call    6 returned 1
    $$$$$:10345-block  5
    $$$$$:10345-block  6
call    7 never executed
        -:10346:
        1:10347:  if (line < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:10348:    return file_name + ":";
    %%%%%:10348-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10348-block  1
        -:10349:  }
        -:10350:#ifdef _MSC_VER
        -:10351:  return file_name + "(" + StreamableToString(line) + "):";
        -:10352:#else
        1:10353:  return file_name + ":" + StreamableToString(line) + ":";
        1:10353-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:10353-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:10353-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:10353-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:10353-block  4
        1:10353-block  5
call   12 returned 1
call   13 returned 1
call   14 returned 1
    $$$$$:10353-block  6
call   15 never executed
    $$$$$:10353-block  7
    $$$$$:10353-block  8
call   16 never executed
    $$$$$:10353-block  9
    $$$$$:10353-block 10
call   17 never executed
    $$$$$:10353-block 11
        -:10354:#endif  // _MSC_VER
        -:10355:}
        -:10356:
        -:10357:// Formats a file location for compiler-independent XML output.
        -:10358:// Although this function is not platform dependent, we put it next to
        -:10359:// FormatFileLocation in order to contrast the two functions.
        -:10360:// Note that FormatCompilerIndependentFileLocation() does NOT append colon
        -:10361:// to the file location it produces, unlike FormatFileLocation().
function _ZN7testing8internal37FormatCompilerIndependentFileLocationB5cxx11EPKci called 0 returned 0% blocks executed 0%
    #####:10362:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(
        -:10363:    const char* file, int line) {
    #####:10364:  const std::string file_name(file == NULL ? kUnknownFile : file);
    %%%%%:10364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10364-block  1
    %%%%%:10364-block  2
    %%%%%:10364-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10364-block  4
call    6 never executed
    $$$$$:10364-block  5
    $$$$$:10364-block  6
call    7 never executed
        -:10365:
    #####:10366:  if (line < 0)
branch  0 never executed
branch  1 never executed
    #####:10367:    return file_name;
    %%%%%:10367-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10367-block  1
        -:10368:  else
    #####:10369:    return file_name + ":" + StreamableToString(line);
    %%%%%:10369-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10369-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10369-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:10369-block  3
    %%%%%:10369-block  4
call    9 never executed
call   10 never executed
    $$$$$:10369-block  5
call   11 never executed
    $$$$$:10369-block  6
    $$$$$:10369-block  7
call   12 never executed
    $$$$$:10369-block  8
        -:10370:}
        -:10371:
function _ZN7testing8internal8GTestLogC2ENS0_16GTestLogSeverityEPKci called 0 returned 0% blocks executed 0%
    #####:10372:GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)
    #####:10373:    : severity_(severity) {
    #####:10374:  const char* const marker =
    %%%%%:10374-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10374-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:10374-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:10374-block  3
    %%%%%:10374-block  4
    %%%%%:10374-block  5
    %%%%%:10374-block  6
    %%%%%:10374-block  7
    %%%%%:10374-block  8
        -:10375:      severity == GTEST_INFO ?    "[  INFO ]" :
        -:10376:      severity == GTEST_WARNING ? "[WARNING]" :
        -:10377:      severity == GTEST_ERROR ?   "[ ERROR ]" : "[ FATAL ]";
    #####:10378:  GetStream() << ::std::endl << marker << " "
    %%%%%:10378-block  0
call    0 never executed
call    1 never executed
    #####:10379:              << FormatFileLocation(file, line).c_str() << ": ";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:10379-block  0
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:10379-block  1
call   10 never executed
    $$$$$:10379-block  2
call   11 never executed
    #####:10380:}
        -:10381:
        -:10382:// Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
function _ZN7testing8internal8GTestLogD2Ev called 0 returned 0% blocks executed 0%
    #####:10383:GTestLog::~GTestLog() {
    #####:10384:  GetStream() << ::std::endl;
    %%%%%:10384-block  0
call    0 never executed
call    1 never executed
    #####:10385:  if (severity_ == GTEST_FATAL) {
branch  0 never executed
branch  1 never executed
    #####:10386:    fflush(stderr);
    %%%%%:10386-block  0
call    0 never executed
    #####:10387:    posix::Abort();
call    0 never executed
        -:10388:  }
    #####:10389:}
        -:10390:
        -:10391:// Disable Microsoft deprecation warnings for POSIX functions called from
        -:10392:// this class (creat, dup, dup2, and close)
        -:10393:GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
        -:10394:
        -:10395:#if GTEST_HAS_STREAM_REDIRECTION
        -:10396:
        -:10397:// Object that captures an output stream (stdout/stderr).
        -:10398:class CapturedStream {
        -:10399: public:
        -:10400:  // The ctor redirects the stream to a temporary file.
function _ZN7testing8internal14CapturedStreamC2Ei called 0 returned 0% blocks executed 0%
    #####:10401:  explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {
    %%%%%:10401-block  0
call    0 never executed
call    1 never executed
    $$$$$:10401-block  1
call    2 never executed
        -:10402:# if GTEST_OS_WINDOWS
        -:10403:    char temp_dir_path[MAX_PATH + 1] = { '\0' };  // NOLINT
        -:10404:    char temp_file_path[MAX_PATH + 1] = { '\0' };  // NOLINT
        -:10405:
        -:10406:    ::GetTempPathA(sizeof(temp_dir_path), temp_dir_path);
        -:10407:    const UINT success = ::GetTempFileNameA(temp_dir_path,
        -:10408:                                            "gtest_redir",
        -:10409:                                            0,  // Generate unique file name.
        -:10410:                                            temp_file_path);
        -:10411:    GTEST_CHECK_(success != 0)
        -:10412:        << "Unable to create a temporary file in " << temp_dir_path;
        -:10413:    const int captured_fd = creat(temp_file_path, _S_IREAD | _S_IWRITE);
        -:10414:    GTEST_CHECK_(captured_fd != -1) << "Unable to open temporary file "
        -:10415:                                    << temp_file_path;
        -:10416:    filename_ = temp_file_path;
        -:10417:# else
        -:10418:    // There's no guarantee that a test has write access to the current
        -:10419:    // directory, so we create the temporary file in the /tmp directory
        -:10420:    // instead. We use /tmp on most systems, and /sdcard on Android.
        -:10421:    // That's because Android doesn't have /tmp.
        -:10422:#  if GTEST_OS_LINUX_ANDROID
        -:10423:    // Note: Android applications are expected to call the framework's
        -:10424:    // Context.getExternalStorageDirectory() method through JNI to get
        -:10425:    // the location of the world-writable SD Card directory. However,
        -:10426:    // this requires a Context handle, which cannot be retrieved
        -:10427:    // globally from native code. Doing so also precludes running the
        -:10428:    // code as part of a regular standalone executable, which doesn't
        -:10429:    // run in a Dalvik process (e.g. when running it through 'adb shell').
        -:10430:    //
        -:10431:    // The location /sdcard is directly accessible from native code
        -:10432:    // and is the only location (unofficially) supported by the Android
        -:10433:    // team. It's generally a symlink to the real SD Card mount point
        -:10434:    // which can be /mnt/sdcard, /mnt/sdcard0, /system/media/sdcard, or
        -:10435:    // other OEM-customized locations. Never rely on these, and always
        -:10436:    // use /sdcard.
        -:10437:    char name_template[] = "/sdcard/gtest_captured_stream.XXXXXX";
        -:10438:#  else
    #####:10439:    char name_template[] = "/tmp/captured_stream.XXXXXX";
        -:10440:#  endif  // GTEST_OS_LINUX_ANDROID
    #####:10441:    const int captured_fd = mkstemp(name_template);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10442:    filename_ = name_template;
    %%%%%:10442-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10443:# endif  // GTEST_OS_WINDOWS
    #####:10444:    fflush(NULL);
    %%%%%:10444-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10445:    dup2(captured_fd, fd_);
    %%%%%:10445-block  0
call    0 never executed
    #####:10446:    close(captured_fd);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10447:  }
    %%%%%:10447-block  0
        -:10448:
function _ZN7testing8internal14CapturedStreamD2Ev called 0 returned 0% blocks executed 0%
    #####:10449:  ~CapturedStream() {
call    0 never executed
    #####:10450:    remove(filename_.c_str());
    %%%%%:10450-block  0
call    0 never executed
call    1 never executed
    #####:10451:  }
        -:10452:
function _ZN7testing8internal14CapturedStream17GetCapturedStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:10453:  std::string GetCapturedString() {
    #####:10454:    if (uncaptured_fd_ != -1) {
    %%%%%:10454-block  0
branch  0 never executed
branch  1 never executed
        -:10455:      // Restores the original stream.
    #####:10456:      fflush(NULL);
    %%%%%:10456-block  0
call    0 never executed
    #####:10457:      dup2(uncaptured_fd_, fd_);
call    0 never executed
    #####:10458:      close(uncaptured_fd_);
call    0 never executed
    #####:10459:      uncaptured_fd_ = -1;
        -:10460:    }
        -:10461:
    #####:10462:    FILE* const file = posix::FOpen(filename_.c_str(), "r");
    %%%%%:10462-block  0
call    0 never executed
call    1 never executed
    #####:10463:    const std::string content = ReadEntireFile(file);
call    0 never executed
    #####:10464:    posix::FClose(file);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10465:    return content;
    %%%%%:10465-block  0
    %%%%%:10465-block  1
        -:10466:  }
        -:10467:
        -:10468: private:
        -:10469:  const int fd_;  // A stream to capture.
        -:10470:  int uncaptured_fd_;
        -:10471:  // Name of the temporary file holding the stderr output.
        -:10472:  ::std::string filename_;
        -:10473:
        -:10474:  GTEST_DISALLOW_COPY_AND_ASSIGN_(CapturedStream);
        -:10475:};
        -:10476:
        -:10477:GTEST_DISABLE_MSC_DEPRECATED_POP_()
        -:10478:
        -:10479:static CapturedStream* g_captured_stderr = NULL;
        -:10480:static CapturedStream* g_captured_stdout = NULL;
        -:10481:
        -:10482:// Starts capturing an output stream (stdout/stderr).
function _ZN7testing8internalL13CaptureStreamEiPKcPPNS0_14CapturedStreamE called 0 returned 0% blocks executed 0%
    #####:10483:static void CaptureStream(int fd, const char* stream_name,
        -:10484:                          CapturedStream** stream) {
    #####:10485:  if (*stream != NULL) {
    %%%%%:10485-block  0
branch  0 never executed
branch  1 never executed
    #####:10486:    GTEST_LOG_(FATAL) << "Only one " << stream_name
    %%%%%:10486-block  0
call    0 never executed
call    1 never executed
    %%%%%:10486-block  1
call    2 never executed
    $$$$$:10486-block  2
call    3 never executed
    $$$$$:10486-block  3
call    4 never executed
    #####:10487:                      << " capturer can exist at a time.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10487-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10487-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:10488:  }
    #####:10489:  *stream = new CapturedStream(fd);
    %%%%%:10489-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:10489-block  1
call    4 never executed
    #####:10490:}
    %%%%%:10490-block  0
        -:10491:
        -:10492:// Stops capturing the output stream and returns the captured string.
function _ZN7testing8internalL17GetCapturedStreamEPPNS0_14CapturedStreamE called 0 returned 0% blocks executed 0%
    #####:10493:static std::string GetCapturedStream(CapturedStream** captured_stream) {
    #####:10494:  const std::string content = (*captured_stream)->GetCapturedString();
    %%%%%:10494-block  0
call    0 never executed
        -:10495:
    #####:10496:  delete *captured_stream;
branch  0 never executed
branch  1 never executed
    %%%%%:10496-block  0
call    2 never executed
call    3 never executed
    #####:10497:  *captured_stream = NULL;
        -:10498:
    #####:10499:  return content;
    %%%%%:10499-block  0
        -:10500:}
        -:10501:
        -:10502:// Starts capturing stdout.
function _ZN7testing8internal13CaptureStdoutEv called 0 returned 0% blocks executed 0%
    #####:10503:void CaptureStdout() {
    #####:10504:  CaptureStream(kStdOutFileno, "stdout", &g_captured_stdout);
    %%%%%:10504-block  0
call    0 never executed
    #####:10505:}
        -:10506:
        -:10507:// Starts capturing stderr.
function _ZN7testing8internal13CaptureStderrEv called 0 returned 0% blocks executed 0%
    #####:10508:void CaptureStderr() {
    #####:10509:  CaptureStream(kStdErrFileno, "stderr", &g_captured_stderr);
    %%%%%:10509-block  0
call    0 never executed
    #####:10510:}
        -:10511:
        -:10512:// Stops capturing stdout and returns the captured string.
function _ZN7testing8internal17GetCapturedStdoutB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:10513:std::string GetCapturedStdout() {
    #####:10514:  return GetCapturedStream(&g_captured_stdout);
    %%%%%:10514-block  0
call    0 never executed
        -:10515:}
        -:10516:
        -:10517:// Stops capturing stderr and returns the captured string.
function _ZN7testing8internal17GetCapturedStderrB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:10518:std::string GetCapturedStderr() {
    #####:10519:  return GetCapturedStream(&g_captured_stderr);
    %%%%%:10519-block  0
call    0 never executed
        -:10520:}
        -:10521:
        -:10522:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -:10523:
        -:10524:
        -:10525:
        -:10526:
        -:10527:
function _ZN7testing8internal11GetFileSizeEP8_IO_FILE called 0 returned 0% blocks executed 0%
    #####:10528:size_t GetFileSize(FILE* file) {
    #####:10529:  fseek(file, 0, SEEK_END);
    %%%%%:10529-block  0
call    0 never executed
    #####:10530:  return static_cast<size_t>(ftell(file));
call    0 never executed
        -:10531:}
        -:10532:
function _ZN7testing8internal14ReadEntireFileB5cxx11EP8_IO_FILE called 0 returned 0% blocks executed 0%
    #####:10533:std::string ReadEntireFile(FILE* file) {
    #####:10534:  const size_t file_size = GetFileSize(file);
    %%%%%:10534-block  0
call    0 never executed
    #####:10535:  char* const buffer = new char[file_size];
call    0 never executed
        -:10536:
    #####:10537:  size_t bytes_last_read = 0;  // # of bytes read in the last fread()
    #####:10538:  size_t bytes_read = 0;       // # of bytes read so far
        -:10539:
    #####:10540:  fseek(file, 0, SEEK_SET);
call    0 never executed
        -:10541:
        -:10542:  // Keeps reading the file until we cannot read further or the
        -:10543:  // pre-determined file size is reached.
    #####:10544:  do {
    %%%%%:10544-block  0
    #####:10545:    bytes_last_read = fread(buffer+bytes_read, 1, file_size-bytes_read, file);
    %%%%%:10545-block  0
call    0 never executed
    #####:10546:    bytes_read += bytes_last_read;
    #####:10547:  } while (bytes_last_read > 0 && bytes_read < file_size);
branch  0 never executed
branch  1 never executed
    %%%%%:10547-block  0
branch  2 never executed
branch  3 never executed
        -:10548:
    #####:10549:  const std::string content(buffer, bytes_read);
    %%%%%:10549-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10550:  delete[] buffer;
branch  0 never executed
branch  1 never executed
    %%%%%:10550-block  0
call    2 never executed
        -:10551:
    #####:10552:  return content;
    %%%%%:10552-block  0
    %%%%%:10552-block  1
        -:10553:}
        -:10554:
        -:10555:#if GTEST_HAS_DEATH_TEST
        -:10556:static const std::vector<std::string>* g_injected_test_argvs = NULL;  // Owned.
        -:10557:
function _ZN7testing8internal18GetInjectableArgvsB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:10558:std::vector<std::string> GetInjectableArgvs() {
    #####:10559:  if (g_injected_test_argvs != NULL) {
    %%%%%:10559-block  0
branch  0 never executed
branch  1 never executed
    #####:10560:    return *g_injected_test_argvs;
    %%%%%:10560-block  0
call    0 never executed
        -:10561:  }
    #####:10562:  return GetArgvs();
    %%%%%:10562-block  0
call    0 never executed
        -:10563:}
        -:10564:
function _ZN7testing8internal18SetInjectableArgvsEPKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE called 0 returned 0% blocks executed 0%
    #####:10565:void SetInjectableArgvs(const std::vector<std::string>* new_argvs) {
    #####:10566:  if (g_injected_test_argvs != new_argvs) delete g_injected_test_argvs;
    %%%%%:10566-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10566-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:10566-block  2
call    4 never executed
call    5 never executed
    #####:10567:  g_injected_test_argvs = new_argvs;
    #####:10568:}
        -:10569:
function _ZN7testing8internal18SetInjectableArgvsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE called 0 returned 0% blocks executed 0%
    #####:10570:void SetInjectableArgvs(const std::vector<std::string>& new_argvs) {
    #####:10571:  SetInjectableArgvs(
call    0 never executed
    %%%%%:10571-block  0
call    1 never executed
call    2 never executed
    $$$$$:10571-block  1
call    3 never executed
    $$$$$:10571-block  2
    #####:10572:      new std::vector<std::string>(new_argvs.begin(), new_argvs.end()));
    %%%%%:10572-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10572-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:10572-block  2
call    8 never executed
    $$$$$:10572-block  3
    #####:10573:}
        -:10574:
        -:10575:#if GTEST_HAS_GLOBAL_STRING
        -:10576:void SetInjectableArgvs(const std::vector< ::string>& new_argvs) {
        -:10577:  SetInjectableArgvs(
        -:10578:      new std::vector<std::string>(new_argvs.begin(), new_argvs.end()));
        -:10579:}
        -:10580:#endif  // GTEST_HAS_GLOBAL_STRING
        -:10581:
function _ZN7testing8internal20ClearInjectableArgvsEv called 0 returned 0% blocks executed 0%
    #####:10582:void ClearInjectableArgvs() {
    #####:10583:  delete g_injected_test_argvs;
    %%%%%:10583-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10583-block  1
call    2 never executed
call    3 never executed
    #####:10584:  g_injected_test_argvs = NULL;
    #####:10585:}
        -:10586:#endif  // GTEST_HAS_DEATH_TEST
        -:10587:
        -:10588:#if GTEST_OS_WINDOWS_MOBILE
        -:10589:namespace posix {
        -:10590:void Abort() {
        -:10591:  DebugBreak();
        -:10592:  TerminateProcess(GetCurrentProcess(), 1);
        -:10593:}
        -:10594:}  // namespace posix
        -:10595:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:10596:
        -:10597:// Returns the name of the environment variable corresponding to the
        -:10598:// given flag.  For example, FlagToEnvVar("foo") will return
        -:10599:// "GTEST_FOO" in the open-source version.
function _ZN7testing8internalL12FlagToEnvVarEPKc called 18 returned 100% blocks executed 71%
       18:10600:static std::string FlagToEnvVar(const char* flag) {
        -:10601:  const std::string full_flag =
       36:10602:      (Message() << GTEST_FLAG_PREFIX_ << flag).GetString();
       18:10602-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:10602-block  1
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0 (throw)
       18:10602-block  2
call    6 returned 18
branch  7 taken 18 (fallthrough)
branch  8 taken 0 (throw)
       18:10602-block  3
call    9 returned 18
branch 10 taken 18 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 18
    $$$$$:10602-block  4
    $$$$$:10602-block  5
call   13 never executed
        -:10603:
       36:10604:  Message env_var;
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:10604-block  0
call    3 returned 18
    $$$$$:10604-block  1
call    4 never executed
      364:10605:  for (size_t i = 0; i != full_flag.length(); i++) {
       18:10605-block  0
      364:10605-block  1
call    0 returned 364
branch  1 taken 346 (fallthrough)
branch  2 taken 18
      346:10606:    env_var << ToUpper(full_flag.c_str()[i]);
      346:10606-block  0
call    0 returned 346
call    1 returned 346
call    2 returned 346
branch  3 taken 346 (fallthrough)
branch  4 taken 0 (throw)
      346:10606-block  1
    $$$$$:10606-block  2
        -:10607:  }
        -:10608:
       36:10609:  return env_var.GetString();
       18:10609-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:10609-block  1
       18:10609-block  2
        -:10610:}
        -:10611:
        -:10612:// Parses 'str' for a 32-bit signed integer.  If successful, writes
        -:10613:// the result to *value and returns true; otherwise leaves *value
        -:10614:// unchanged and returns false.
function _ZN7testing8internal10ParseInt32ERKNS_7MessageEPKcPi called 0 returned 0% blocks executed 0%
    #####:10615:bool ParseInt32(const Message& src_text, const char* str, Int32* value) {
        -:10616:  // Parses the environment variable as a decimal integer.
    #####:10617:  char* end = NULL;
    #####:10618:  const long long_value = strtol(str, &end, 10);  // NOLINT
    %%%%%:10618-block  0
call    0 never executed
        -:10619:
        -:10620:  // Has strtol() consumed all characters in the string?
    #####:10621:  if (*end != '\0') {
branch  0 never executed
branch  1 never executed
        -:10622:    // No - an invalid character was encountered.
    #####:10623:    Message msg;
    %%%%%:10623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:10623-block  1
call    3 never executed
    #####:10624:    msg << "WARNING: " << src_text
    %%%%%:10624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10624-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10625:        << " is expected to be a 32-bit integer, but actually"
    %%%%%:10625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10626:        << " has value \"" << str << "\".\n";
    %%%%%:10626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10626-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10626-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:10627:    printf("%s", msg.GetString().c_str());
    %%%%%:10627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10627-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:10627-block  2
call    7 never executed
    $$$$$:10627-block  3
call    8 never executed
    $$$$$:10627-block  4
    #####:10628:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10629:    return false;
    %%%%%:10629-block  0
call    0 never executed
        -:10630:  }
        -:10631:
        -:10632:  // Is the parsed value in the range of an Int32?
    #####:10633:  const Int32 result = static_cast<Int32>(long_value);
    #####:10634:  if (long_value == LONG_MAX || long_value == LONG_MIN ||
    %%%%%:10634-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10634-block  1
branch  2 never executed
branch  3 never executed
        -:10635:      // The parsed value overflows as a long.  (strtol() returns
        -:10636:      // LONG_MAX or LONG_MIN when the input overflows.)
    #####:10637:      result != long_value
    %%%%%:10637-block  0
branch  0 never executed
branch  1 never executed
        -:10638:      // The parsed value overflows as an Int32.
        -:10639:      ) {
    #####:10640:    Message msg;
    %%%%%:10640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:10640-block  1
call    3 never executed
    #####:10641:    msg << "WARNING: " << src_text
    %%%%%:10641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10641-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10642:        << " is expected to be a 32-bit integer, but actually"
    %%%%%:10642-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10643:        << " has value " << str << ", which overflows.\n";
    %%%%%:10643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10643-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10643-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:10644:    printf("%s", msg.GetString().c_str());
    %%%%%:10644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10644-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:10644-block  2
call    7 never executed
    $$$$$:10644-block  3
call    8 never executed
    $$$$$:10644-block  4
    #####:10645:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10646:    return false;
    %%%%%:10646-block  0
call    0 never executed
        -:10647:  }
        -:10648:
    #####:10649:  *value = result;
    #####:10650:  return true;
    %%%%%:10650-block  0
        -:10651:}
        -:10652:
        -:10653:// Reads and returns the Boolean environment variable corresponding to
        -:10654:// the given flag; if it's not set, returns default_value.
        -:10655://
        -:10656:// The value is considered true iff it's not "0".
function _ZN7testing8internal16BoolFromGTestEnvEPKcb called 9 returned 100% blocks executed 90%
        9:10657:bool BoolFromGTestEnv(const char* flag, bool default_value) {
        -:10658:#if defined(GTEST_GET_BOOL_FROM_ENV_)
        -:10659:  return GTEST_GET_BOOL_FROM_ENV_(flag, default_value);
        -:10660:#else
        9:10661:  const std::string env_var = FlagToEnvVar(flag);
        9:10661-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:10662:  const char* const string_value = posix::GetEnv(env_var.c_str());
        9:10662-block  0
call    0 returned 9
call    1 returned 9
       9*:10663:  return string_value == NULL ?
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:10663-block  0
      18*:10664:      default_value : strcmp(string_value, "0") != 0;
    %%%%%:10664-block  0
        9:10664-block  1
call    0 returned 9
        9:10664-block  2
        -:10665:#endif  // defined(GTEST_GET_BOOL_FROM_ENV_)
        -:10666:}
        -:10667:
        -:10668:// Reads and returns a 32-bit integer stored in the environment
        -:10669:// variable corresponding to the given flag; if it isn't set or
        -:10670:// doesn't represent a valid 32-bit integer, returns default_value.
function _ZN7testing8internal17Int32FromGTestEnvEPKci called 3 returned 100% blocks executed 25%
        3:10671:Int32 Int32FromGTestEnv(const char* flag, Int32 default_value) {
        -:10672:#if defined(GTEST_GET_INT32_FROM_ENV_)
        -:10673:  return GTEST_GET_INT32_FROM_ENV_(flag, default_value);
        -:10674:#else
        6:10675:  const std::string env_var = FlagToEnvVar(flag);
        3:10675-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:10675-block  1
call    3 returned 3
    $$$$$:10675-block  2
call    4 never executed
        3:10676:  const char* const string_value = posix::GetEnv(env_var.c_str());
        3:10676-block  0
call    0 returned 3
call    1 returned 3
        3:10677:  if (string_value == NULL) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:10678:    // The environment variable is not set.
        3:10679:    return default_value;
        3:10679-block  0
        -:10680:  }
        -:10681:
    #####:10682:  Int32 result = default_value;
    #####:10683:  if (!ParseInt32(Message() << "Environment variable " << env_var,
    %%%%%:10683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10683-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10683-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:10683-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:10683-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:10683-block  5
call   15 never executed
    $$$$$:10683-block  6
        -:10684:                  string_value, &result)) {
    #####:10685:    printf("The default value %s is used.\n",
    %%%%%:10685-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10686:           (Message() << default_value).GetString().c_str());
    %%%%%:10686-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:10686-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:10686-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:10686-block  3
call    9 never executed
call   10 never executed
    $$$$$:10686-block  4
call   11 never executed
    $$$$$:10686-block  5
    $$$$$:10686-block  6
call   12 never executed
    $$$$$:10686-block  7
    #####:10687:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10688:    return default_value;
    %%%%%:10688-block  0
        -:10689:  }
        -:10690:
    #####:10691:  return result;
    %%%%%:10691-block  0
        -:10692:#endif  // defined(GTEST_GET_INT32_FROM_ENV_)
        -:10693:}
        -:10694:
        -:10695:// As a special case for the 'output' flag, if GTEST_OUTPUT is not
        -:10696:// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build
        -:10697:// system.  The value of XML_OUTPUT_FILE is a filename without the
        -:10698:// "xml:" prefix of GTEST_OUTPUT.
        -:10699:// Note that this is meant to be called at the call site so it does
        -:10700:// not check that the flag is 'output'
        -:10701:// In essence this checks an env variable called XML_OUTPUT_FILE
        -:10702:// and if it is set we prepend "xml:" to its value, if it not set we return ""
function _ZN7testing8internal25OutputFlagAlsoCheckEnvVarB5cxx11Ev called 1 returned 100% blocks executed 31%
        1:10703:std::string OutputFlagAlsoCheckEnvVar(){
        1:10704:  std::string default_value_for_output_flag = "";
        1:10704-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:10704-block  1
call    4 never executed
        1:10705:  const char* xml_output_file_env = posix::GetEnv("XML_OUTPUT_FILE");
call    0 returned 1
        1:10706:  if (NULL != xml_output_file_env) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:10707:    default_value_for_output_flag = std::string("xml:") + xml_output_file_env;
    %%%%%:10707-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:10707-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:10707-block  2
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:10707-block  3
call   11 never executed
    $$$$$:10707-block  4
    $$$$$:10707-block  5
call   12 never executed
    $$$$$:10707-block  6
        -:10708:  }
        1:10709:  return default_value_for_output_flag;
        1:10709-block  0
        1:10709-block  1
        -:10710:}
        -:10711:
        -:10712:// Reads and returns the string environment variable corresponding to
        -:10713:// the given flag; if it's not set, returns default_value.
function _ZN7testing8internal18StringFromGTestEnvEPKcS2_ called 6 returned 100% blocks executed 100%
        6:10714:const char* StringFromGTestEnv(const char* flag, const char* default_value) {
        -:10715:#if defined(GTEST_GET_STRING_FROM_ENV_)
        -:10716:  return GTEST_GET_STRING_FROM_ENV_(flag, default_value);
        -:10717:#else
        6:10718:  const std::string env_var = FlagToEnvVar(flag);
        6:10718-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:10719:  const char* const value = posix::GetEnv(env_var.c_str());
        6:10719-block  0
call    0 returned 6
call    1 returned 6
       12:10720:  return value == NULL ? default_value : value;
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5:10720-block  0
        1:10720-block  1
        6:10720-block  2
call    2 returned 6
        6:10720-block  3
        -:10721:#endif  // defined(GTEST_GET_STRING_FROM_ENV_)
        -:10722:}
        -:10723:
        -:10724:}  // namespace internal
        -:10725:}  // namespace testing
        -:10726:// Copyright 2007, Google Inc.
        -:10727:// All rights reserved.
        -:10728://
        -:10729:// Redistribution and use in source and binary forms, with or without
        -:10730:// modification, are permitted provided that the following conditions are
        -:10731:// met:
        -:10732://
        -:10733://     * Redistributions of source code must retain the above copyright
        -:10734:// notice, this list of conditions and the following disclaimer.
        -:10735://     * Redistributions in binary form must reproduce the above
        -:10736:// copyright notice, this list of conditions and the following disclaimer
        -:10737:// in the documentation and/or other materials provided with the
        -:10738:// distribution.
        -:10739://     * Neither the name of Google Inc. nor the names of its
        -:10740:// contributors may be used to endorse or promote products derived from
        -:10741:// this software without specific prior written permission.
        -:10742://
        -:10743:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:10744:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:10745:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:10746:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:10747:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:10748:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:10749:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:10750:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:10751:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:10752:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:10753:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:10754:
        -:10755:
        -:10756:// Google Test - The Google C++ Testing and Mocking Framework
        -:10757://
        -:10758:// This file implements a universal value printer that can print a
        -:10759:// value of any type T:
        -:10760://
        -:10761://   void ::testing::internal::UniversalPrinter<T>::Print(value, ostream_ptr);
        -:10762://
        -:10763:// It uses the << operator when possible, and prints the bytes in the
        -:10764:// object otherwise.  A user can override its behavior for a class
        -:10765:// type Foo by defining either operator<<(::std::ostream&, const Foo&)
        -:10766:// or void PrintTo(const Foo&, ::std::ostream*) in the namespace that
        -:10767:// defines Foo.
        -:10768:
        -:10769:#include <stdio.h>
        -:10770:#include <cctype>
        -:10771:#include <cwchar>
        -:10772:#include <ostream>  // NOLINT
        -:10773:#include <string>
        -:10774:
        -:10775:namespace testing {
        -:10776:
        -:10777:namespace {
        -:10778:
        -:10779:using ::std::ostream;
        -:10780:
        -:10781:// Prints a segment of bytes in the given object.
        -:10782:GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:10783:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:10784:GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
function _ZN7testing12_GLOBAL__N_126PrintByteSegmentInObjectToEPKhmmPSo called 0 returned 0% blocks executed 0%
    #####:10785:void PrintByteSegmentInObjectTo(const unsigned char* obj_bytes, size_t start,
        -:10786:                                size_t count, ostream* os) {
    #####:10787:  char text[5] = "";
    #####:10788:  for (size_t i = 0; i != count; i++) {
    %%%%%:10788-block  0
    %%%%%:10788-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:10788-block  2
    #####:10789:    const size_t j = start + i;
    #####:10790:    if (i != 0) {
    %%%%%:10790-block  0
branch  0 never executed
branch  1 never executed
        -:10791:      // Organizes the bytes into groups of 2 for easy parsing by
        -:10792:      // human.
    #####:10793:      if ((j % 2) == 0)
    %%%%%:10793-block  0
branch  0 never executed
branch  1 never executed
    #####:10794:        *os << ' ';
    %%%%%:10794-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10795:      else
    #####:10796:        *os << '-';
    %%%%%:10796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10797:    }
    #####:10798:    GTEST_SNPRINTF_(text, sizeof(text), "%02X", obj_bytes[j]);
    #####:10799:    *os << text;
    %%%%%:10799-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10800:  }
    #####:10801:}
    %%%%%:10801-block  0
        -:10802:
        -:10803:// Prints the bytes in the given value to the given ostream.
function _ZN7testing12_GLOBAL__N_124PrintBytesInObjectToImplEPKhmPSo called 0 returned 0% blocks executed 0%
    #####:10804:void PrintBytesInObjectToImpl(const unsigned char* obj_bytes, size_t count,
        -:10805:                              ostream* os) {
        -:10806:  // Tells the user how big the object is.
    #####:10807:  *os << count << "-byte object <";
    %%%%%:10807-block  0
call    0 never executed
call    1 never executed
        -:10808:
    #####:10809:  const size_t kThreshold = 132;
    #####:10810:  const size_t kChunkSize = 64;
        -:10811:  // If the object size is bigger than kThreshold, we'll have to omit
        -:10812:  // some details by printing only the first and the last kChunkSize
        -:10813:  // bytes.
        -:10814:  // FIXME: let the user control the threshold using a flag.
    #####:10815:  if (count < kThreshold) {
branch  0 never executed
branch  1 never executed
    #####:10816:    PrintByteSegmentInObjectTo(obj_bytes, 0, count, os);
    %%%%%:10816-block  0
call    0 never executed
        -:10817:  } else {
    #####:10818:    PrintByteSegmentInObjectTo(obj_bytes, 0, kChunkSize, os);
    %%%%%:10818-block  0
call    0 never executed
    #####:10819:    *os << " ... ";
call    0 never executed
        -:10820:    // Rounds up to 2-byte boundary.
    #####:10821:    const size_t resume_pos = (count - kChunkSize + 1)/2*2;
    #####:10822:    PrintByteSegmentInObjectTo(obj_bytes, resume_pos, count - resume_pos, os);
call    0 never executed
        -:10823:  }
    #####:10824:  *os << ">";
    %%%%%:10824-block  0
call    0 never executed
    #####:10825:}
        -:10826:
        -:10827:}  // namespace
        -:10828:
        -:10829:namespace internal2 {
        -:10830:
        -:10831:// Delegates to PrintBytesInObjectToImpl() to print the bytes in the
        -:10832:// given object.  The delegation simplifies the implementation, which
        -:10833:// uses the << operator and thus is easier done outside of the
        -:10834:// ::testing::internal namespace, which contains a << operator that
        -:10835:// sometimes conflicts with the one in STL.
function _ZN7testing9internal220PrintBytesInObjectToEPKhmPSo called 0 returned 0% blocks executed 0%
    #####:10836:void PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count,
        -:10837:                          ostream* os) {
    #####:10838:  PrintBytesInObjectToImpl(obj_bytes, count, os);
    %%%%%:10838-block  0
call    0 never executed
    #####:10839:}
        -:10840:
        -:10841:}  // namespace internal2
        -:10842:
        -:10843:namespace internal {
        -:10844:
        -:10845:// Depending on the value of a char (or wchar_t), we print it in one
        -:10846:// of three formats:
        -:10847://   - as is if it's a printable ASCII (e.g. 'a', '2', ' '),
        -:10848://   - as a hexadecimal escape sequence (e.g. '\x7F'), or
        -:10849://   - as a special escape sequence (e.g. '\r', '\n').
        -:10850:enum CharFormat {
        -:10851:  kAsIs,
        -:10852:  kHexEscape,
        -:10853:  kSpecialEscape
        -:10854:};
        -:10855:
        -:10856:// Returns true if c is a printable ASCII character.  We test the
        -:10857:// value of c directly instead of calling isprint(), which is buggy on
        -:10858:// Windows Mobile.
function _ZN7testing8internal16IsPrintableAsciiEw called 42 returned 100% blocks executed 83%
       42:10859:inline bool IsPrintableAscii(wchar_t c) {
      42*:10860:  return 0x20 <= c && c <= 0x7E;
       42:10860-block  0
branch  0 taken 42 (fallthrough)
branch  1 taken 0
       42:10860-block  1
branch  2 taken 42 (fallthrough)
branch  3 taken 0
       42:10860-block  2
    %%%%%:10860-block  3
       42:10860-block  4
        -:10861:}
        -:10862:
        -:10863:// Prints a wide or narrow char c as a character literal without the
        -:10864:// quotes, escaping it when necessary; returns how c was formatted.
        -:10865:// The template argument UnsignedChar is the unsigned version of Char,
        -:10866:// which is the type of c.
        -:10867:template <typename UnsignedChar, typename Char>
      42*:10868:static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {
      42*:10869:  switch (static_cast<wchar_t>(c)) {
    #####:10870:    case L'\0':
    #####:10871:      *os << "\\0";
    #####:10872:      break;
    #####:10873:    case L'\'':
    #####:10874:      *os << "\\'";
    #####:10875:      break;
    #####:10876:    case L'\\':
    #####:10877:      *os << "\\\\";
    #####:10878:      break;
    #####:10879:    case L'\a':
    #####:10880:      *os << "\\a";
    #####:10881:      break;
    #####:10882:    case L'\b':
    #####:10883:      *os << "\\b";
    #####:10884:      break;
    #####:10885:    case L'\f':
    #####:10886:      *os << "\\f";
    #####:10887:      break;
    #####:10888:    case L'\n':
    #####:10889:      *os << "\\n";
    #####:10890:      break;
    #####:10891:    case L'\r':
    #####:10892:      *os << "\\r";
    #####:10893:      break;
    #####:10894:    case L'\t':
    #####:10895:      *os << "\\t";
    #####:10896:      break;
    #####:10897:    case L'\v':
    #####:10898:      *os << "\\v";
    #####:10899:      break;
      42*:10900:    default:
      42*:10901:      if (IsPrintableAscii(c)) {
      42*:10902:        *os << static_cast<char>(c);
      42*:10903:        return kAsIs;
        -:10904:      } else {
    #####:10905:        ostream::fmtflags flags = os->flags();
    #####:10906:        *os << "\\x" << std::hex << std::uppercase
    #####:10907:            << static_cast<int>(static_cast<UnsignedChar>(c));
    #####:10908:        os->flags(flags);
    #####:10909:        return kHexEscape;
        -:10910:      }
        -:10911:  }
    #####:10912:  return kSpecialEscape;
        -:10913:}
------------------
_ZN7testing8internalL20PrintAsCharLiteralToIhaEENS0_10CharFormatET0_PSo:
function _ZN7testing8internalL20PrintAsCharLiteralToIhaEENS0_10CharFormatET0_PSo called 0 returned 0% blocks executed 0%
    #####:10868:static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {
    #####:10869:  switch (static_cast<wchar_t>(c)) {
    %%%%%:10869-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:10870:    case L'\0':
    #####:10871:      *os << "\\0";
    %%%%%:10871-block  0
call    0 never executed
    #####:10872:      break;
    #####:10873:    case L'\'':
    #####:10874:      *os << "\\'";
    %%%%%:10874-block  0
call    0 never executed
    #####:10875:      break;
    #####:10876:    case L'\\':
    #####:10877:      *os << "\\\\";
    %%%%%:10877-block  0
call    0 never executed
    #####:10878:      break;
    #####:10879:    case L'\a':
    #####:10880:      *os << "\\a";
    %%%%%:10880-block  0
call    0 never executed
    #####:10881:      break;
    #####:10882:    case L'\b':
    #####:10883:      *os << "\\b";
    %%%%%:10883-block  0
call    0 never executed
    #####:10884:      break;
    #####:10885:    case L'\f':
    #####:10886:      *os << "\\f";
    %%%%%:10886-block  0
call    0 never executed
    #####:10887:      break;
    #####:10888:    case L'\n':
    #####:10889:      *os << "\\n";
    %%%%%:10889-block  0
call    0 never executed
    #####:10890:      break;
    #####:10891:    case L'\r':
    #####:10892:      *os << "\\r";
    %%%%%:10892-block  0
call    0 never executed
    #####:10893:      break;
    #####:10894:    case L'\t':
    #####:10895:      *os << "\\t";
    %%%%%:10895-block  0
call    0 never executed
    #####:10896:      break;
    #####:10897:    case L'\v':
    #####:10898:      *os << "\\v";
    %%%%%:10898-block  0
call    0 never executed
    #####:10899:      break;
    #####:10900:    default:
    #####:10901:      if (IsPrintableAscii(c)) {
    %%%%%:10901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10902:        *os << static_cast<char>(c);
    %%%%%:10902-block  0
call    0 never executed
    #####:10903:        return kAsIs;
        -:10904:      } else {
    #####:10905:        ostream::fmtflags flags = os->flags();
    %%%%%:10905-block  0
call    0 never executed
    #####:10906:        *os << "\\x" << std::hex << std::uppercase
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10907:            << static_cast<int>(static_cast<UnsignedChar>(c));
call    0 never executed
    #####:10908:        os->flags(flags);
call    0 never executed
    #####:10909:        return kHexEscape;
        -:10910:      }
        -:10911:  }
    #####:10912:  return kSpecialEscape;
    %%%%%:10912-block  0
        -:10913:}
------------------
_ZN7testing8internalL20PrintAsCharLiteralToIhhEENS0_10CharFormatET0_PSo:
function _ZN7testing8internalL20PrintAsCharLiteralToIhhEENS0_10CharFormatET0_PSo called 0 returned 0% blocks executed 0%
    #####:10868:static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {
    #####:10869:  switch (static_cast<wchar_t>(c)) {
    %%%%%:10869-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:10870:    case L'\0':
    #####:10871:      *os << "\\0";
    %%%%%:10871-block  0
call    0 never executed
    #####:10872:      break;
    #####:10873:    case L'\'':
    #####:10874:      *os << "\\'";
    %%%%%:10874-block  0
call    0 never executed
    #####:10875:      break;
    #####:10876:    case L'\\':
    #####:10877:      *os << "\\\\";
    %%%%%:10877-block  0
call    0 never executed
    #####:10878:      break;
    #####:10879:    case L'\a':
    #####:10880:      *os << "\\a";
    %%%%%:10880-block  0
call    0 never executed
    #####:10881:      break;
    #####:10882:    case L'\b':
    #####:10883:      *os << "\\b";
    %%%%%:10883-block  0
call    0 never executed
    #####:10884:      break;
    #####:10885:    case L'\f':
    #####:10886:      *os << "\\f";
    %%%%%:10886-block  0
call    0 never executed
    #####:10887:      break;
    #####:10888:    case L'\n':
    #####:10889:      *os << "\\n";
    %%%%%:10889-block  0
call    0 never executed
    #####:10890:      break;
    #####:10891:    case L'\r':
    #####:10892:      *os << "\\r";
    %%%%%:10892-block  0
call    0 never executed
    #####:10893:      break;
    #####:10894:    case L'\t':
    #####:10895:      *os << "\\t";
    %%%%%:10895-block  0
call    0 never executed
    #####:10896:      break;
    #####:10897:    case L'\v':
    #####:10898:      *os << "\\v";
    %%%%%:10898-block  0
call    0 never executed
    #####:10899:      break;
    #####:10900:    default:
    #####:10901:      if (IsPrintableAscii(c)) {
    %%%%%:10901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10902:        *os << static_cast<char>(c);
    %%%%%:10902-block  0
call    0 never executed
    #####:10903:        return kAsIs;
        -:10904:      } else {
    #####:10905:        ostream::fmtflags flags = os->flags();
    %%%%%:10905-block  0
call    0 never executed
    #####:10906:        *os << "\\x" << std::hex << std::uppercase
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10907:            << static_cast<int>(static_cast<UnsignedChar>(c));
call    0 never executed
    #####:10908:        os->flags(flags);
call    0 never executed
    #####:10909:        return kHexEscape;
        -:10910:      }
        -:10911:  }
    #####:10912:  return kSpecialEscape;
    %%%%%:10912-block  0
        -:10913:}
------------------
_ZN7testing8internalL20PrintAsCharLiteralToIwwEENS0_10CharFormatET0_PSo:
function _ZN7testing8internalL20PrintAsCharLiteralToIwwEENS0_10CharFormatET0_PSo called 42 returned 100% blocks executed 18%
       42:10868:static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {
       42:10869:  switch (static_cast<wchar_t>(c)) {
       42:10869-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 42
    #####:10870:    case L'\0':
    #####:10871:      *os << "\\0";
    %%%%%:10871-block  0
call    0 never executed
    #####:10872:      break;
    #####:10873:    case L'\'':
    #####:10874:      *os << "\\'";
    %%%%%:10874-block  0
call    0 never executed
    #####:10875:      break;
    #####:10876:    case L'\\':
    #####:10877:      *os << "\\\\";
    %%%%%:10877-block  0
call    0 never executed
    #####:10878:      break;
    #####:10879:    case L'\a':
    #####:10880:      *os << "\\a";
    %%%%%:10880-block  0
call    0 never executed
    #####:10881:      break;
    #####:10882:    case L'\b':
    #####:10883:      *os << "\\b";
    %%%%%:10883-block  0
call    0 never executed
    #####:10884:      break;
    #####:10885:    case L'\f':
    #####:10886:      *os << "\\f";
    %%%%%:10886-block  0
call    0 never executed
    #####:10887:      break;
    #####:10888:    case L'\n':
    #####:10889:      *os << "\\n";
    %%%%%:10889-block  0
call    0 never executed
    #####:10890:      break;
    #####:10891:    case L'\r':
    #####:10892:      *os << "\\r";
    %%%%%:10892-block  0
call    0 never executed
    #####:10893:      break;
    #####:10894:    case L'\t':
    #####:10895:      *os << "\\t";
    %%%%%:10895-block  0
call    0 never executed
    #####:10896:      break;
    #####:10897:    case L'\v':
    #####:10898:      *os << "\\v";
    %%%%%:10898-block  0
call    0 never executed
    #####:10899:      break;
       42:10900:    default:
       42:10901:      if (IsPrintableAscii(c)) {
       42:10901-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0
       42:10902:        *os << static_cast<char>(c);
       42:10902-block  0
call    0 returned 42
       42:10903:        return kAsIs;
        -:10904:      } else {
    #####:10905:        ostream::fmtflags flags = os->flags();
    %%%%%:10905-block  0
call    0 never executed
    #####:10906:        *os << "\\x" << std::hex << std::uppercase
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10907:            << static_cast<int>(static_cast<UnsignedChar>(c));
call    0 never executed
    #####:10908:        os->flags(flags);
call    0 never executed
    #####:10909:        return kHexEscape;
        -:10910:      }
        -:10911:  }
    #####:10912:  return kSpecialEscape;
    %%%%%:10912-block  0
        -:10913:}
------------------
        -:10914:
        -:10915:// Prints a wchar_t c as if it's part of a string literal, escaping it when
        -:10916:// necessary; returns how c was formatted.
function _ZN7testing8internalL22PrintAsStringLiteralToEwPSo called 42 returned 100% blocks executed 50%
       42:10917:static CharFormat PrintAsStringLiteralTo(wchar_t c, ostream* os) {
       42:10918:  switch (c) {
       42:10918-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 42
    #####:10919:    case L'\'':
    #####:10920:      *os << "'";
    %%%%%:10920-block  0
call    0 never executed
    #####:10921:      return kAsIs;
    #####:10922:    case L'"':
    #####:10923:      *os << "\\\"";
    %%%%%:10923-block  0
call    0 never executed
    #####:10924:      return kSpecialEscape;
       42:10925:    default:
       42:10926:      return PrintAsCharLiteralTo<wchar_t>(c, os);
       42:10926-block  0
call    0 returned 42
        -:10927:  }
        -:10928:}
        -:10929:
        -:10930:// Prints a char c as if it's part of a string literal, escaping it when
        -:10931:// necessary; returns how c was formatted.
function _ZN7testing8internalL22PrintAsStringLiteralToEcPSo called 42 returned 100% blocks executed 100%
       42:10932:static CharFormat PrintAsStringLiteralTo(char c, ostream* os) {
       84:10933:  return PrintAsStringLiteralTo(
       42:10934:      static_cast<wchar_t>(static_cast<unsigned char>(c)), os);
       42:10934-block  0
call    0 returned 42
        -:10935:}
        -:10936:
        -:10937:// Prints a wide or narrow character c and its code.  '\0' is printed
        -:10938:// as "'\\0'", other unprintable characters are also properly escaped
        -:10939:// using the standard C++ escape sequence.  The template argument
        -:10940:// UnsignedChar is the unsigned version of Char, which is the type of c.
        -:10941:template <typename UnsignedChar, typename Char>
    #####:10942:void PrintCharAndCodeTo(Char c, ostream* os) {
        -:10943:  // First, print c as a literal in the most readable form we can find.
    #####:10944:  *os << ((sizeof(c) > 1) ? "L'" : "'");
    #####:10945:  const CharFormat format = PrintAsCharLiteralTo<UnsignedChar>(c, os);
    #####:10946:  *os << "'";
        -:10947:
        -:10948:  // To aid user debugging, we also print c's code in decimal, unless
        -:10949:  // it's 0 (in which case c was printed as '\\0', making the code
        -:10950:  // obvious).
    #####:10951:  if (c == 0)
    #####:10952:    return;
    #####:10953:  *os << " (" << static_cast<int>(c);
        -:10954:
        -:10955:  // For more convenience, we print c's code again in hexadecimal,
        -:10956:  // unless c was already printed in the form '\x##' or the code is in
        -:10957:  // [1, 9].
    #####:10958:  if (format == kHexEscape || (1 <= c && c <= 9)) {
        -:10959:    // Do nothing.
        -:10960:  } else {
    #####:10961:    *os << ", 0x" << String::FormatHexInt(static_cast<UnsignedChar>(c));
        -:10962:  }
    #####:10963:  *os << ")";
        -:10964:}
------------------
_ZN7testing8internal18PrintCharAndCodeToIwwEEvT0_PSo:
function _ZN7testing8internal18PrintCharAndCodeToIwwEEvT0_PSo called 0 returned 0% blocks executed 0%
    #####:10942:void PrintCharAndCodeTo(Char c, ostream* os) {
        -:10943:  // First, print c as a literal in the most readable form we can find.
    #####:10944:  *os << ((sizeof(c) > 1) ? "L'" : "'");
    %%%%%:10944-block  0
call    0 never executed
    #####:10945:  const CharFormat format = PrintAsCharLiteralTo<UnsignedChar>(c, os);
call    0 never executed
    #####:10946:  *os << "'";
call    0 never executed
        -:10947:
        -:10948:  // To aid user debugging, we also print c's code in decimal, unless
        -:10949:  // it's 0 (in which case c was printed as '\\0', making the code
        -:10950:  // obvious).
    #####:10951:  if (c == 0)
branch  0 never executed
branch  1 never executed
    #####:10952:    return;
    %%%%%:10952-block  0
    #####:10953:  *os << " (" << static_cast<int>(c);
    %%%%%:10953-block  0
call    0 never executed
call    1 never executed
        -:10954:
        -:10955:  // For more convenience, we print c's code again in hexadecimal,
        -:10956:  // unless c was already printed in the form '\x##' or the code is in
        -:10957:  // [1, 9].
    #####:10958:  if (format == kHexEscape || (1 <= c && c <= 9)) {
branch  0 never executed
branch  1 never executed
    %%%%%:10958-block  0
branch  2 never executed
branch  3 never executed
    %%%%%:10958-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:10958-block  2
        -:10959:    // Do nothing.
        -:10960:  } else {
    #####:10961:    *os << ", 0x" << String::FormatHexInt(static_cast<UnsignedChar>(c));
    %%%%%:10961-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10961-block  1
call    5 never executed
    $$$$$:10961-block  2
call    6 never executed
        -:10962:  }
    #####:10963:  *os << ")";
    %%%%%:10963-block  0
call    0 never executed
        -:10964:}
------------------
_ZN7testing8internal18PrintCharAndCodeToIhaEEvT0_PSo:
function _ZN7testing8internal18PrintCharAndCodeToIhaEEvT0_PSo called 0 returned 0% blocks executed 0%
    #####:10942:void PrintCharAndCodeTo(Char c, ostream* os) {
        -:10943:  // First, print c as a literal in the most readable form we can find.
    #####:10944:  *os << ((sizeof(c) > 1) ? "L'" : "'");
    %%%%%:10944-block  0
call    0 never executed
    #####:10945:  const CharFormat format = PrintAsCharLiteralTo<UnsignedChar>(c, os);
call    0 never executed
    #####:10946:  *os << "'";
call    0 never executed
        -:10947:
        -:10948:  // To aid user debugging, we also print c's code in decimal, unless
        -:10949:  // it's 0 (in which case c was printed as '\\0', making the code
        -:10950:  // obvious).
    #####:10951:  if (c == 0)
branch  0 never executed
branch  1 never executed
    #####:10952:    return;
    %%%%%:10952-block  0
    #####:10953:  *os << " (" << static_cast<int>(c);
    %%%%%:10953-block  0
call    0 never executed
call    1 never executed
        -:10954:
        -:10955:  // For more convenience, we print c's code again in hexadecimal,
        -:10956:  // unless c was already printed in the form '\x##' or the code is in
        -:10957:  // [1, 9].
    #####:10958:  if (format == kHexEscape || (1 <= c && c <= 9)) {
branch  0 never executed
branch  1 never executed
    %%%%%:10958-block  0
branch  2 never executed
branch  3 never executed
    %%%%%:10958-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:10958-block  2
        -:10959:    // Do nothing.
        -:10960:  } else {
    #####:10961:    *os << ", 0x" << String::FormatHexInt(static_cast<UnsignedChar>(c));
    %%%%%:10961-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10961-block  1
call    5 never executed
    $$$$$:10961-block  2
call    6 never executed
        -:10962:  }
    #####:10963:  *os << ")";
    %%%%%:10963-block  0
call    0 never executed
        -:10964:}
------------------
_ZN7testing8internal18PrintCharAndCodeToIhhEEvT0_PSo:
function _ZN7testing8internal18PrintCharAndCodeToIhhEEvT0_PSo called 0 returned 0% blocks executed 0%
    #####:10942:void PrintCharAndCodeTo(Char c, ostream* os) {
        -:10943:  // First, print c as a literal in the most readable form we can find.
    #####:10944:  *os << ((sizeof(c) > 1) ? "L'" : "'");
    %%%%%:10944-block  0
call    0 never executed
    #####:10945:  const CharFormat format = PrintAsCharLiteralTo<UnsignedChar>(c, os);
call    0 never executed
    #####:10946:  *os << "'";
call    0 never executed
        -:10947:
        -:10948:  // To aid user debugging, we also print c's code in decimal, unless
        -:10949:  // it's 0 (in which case c was printed as '\\0', making the code
        -:10950:  // obvious).
    #####:10951:  if (c == 0)
branch  0 never executed
branch  1 never executed
    #####:10952:    return;
    %%%%%:10952-block  0
    #####:10953:  *os << " (" << static_cast<int>(c);
    %%%%%:10953-block  0
call    0 never executed
call    1 never executed
        -:10954:
        -:10955:  // For more convenience, we print c's code again in hexadecimal,
        -:10956:  // unless c was already printed in the form '\x##' or the code is in
        -:10957:  // [1, 9].
    #####:10958:  if (format == kHexEscape || (1 <= c && c <= 9)) {
branch  0 never executed
branch  1 never executed
    %%%%%:10958-block  0
branch  2 never executed
branch  3 never executed
    %%%%%:10958-block  1
branch  4 never executed
branch  5 never executed
    %%%%%:10958-block  2
        -:10959:    // Do nothing.
        -:10960:  } else {
    #####:10961:    *os << ", 0x" << String::FormatHexInt(static_cast<UnsignedChar>(c));
    %%%%%:10961-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10961-block  1
call    5 never executed
    $$$$$:10961-block  2
call    6 never executed
        -:10962:  }
    #####:10963:  *os << ")";
    %%%%%:10963-block  0
call    0 never executed
        -:10964:}
------------------
        -:10965:
function _ZN7testing8internal7PrintToEhPSo called 0 returned 0% blocks executed 0%
    #####:10966:void PrintTo(unsigned char c, ::std::ostream* os) {
    #####:10967:  PrintCharAndCodeTo<unsigned char>(c, os);
    %%%%%:10967-block  0
call    0 never executed
    #####:10968:}
function _ZN7testing8internal7PrintToEaPSo called 0 returned 0% blocks executed 0%
    #####:10969:void PrintTo(signed char c, ::std::ostream* os) {
    #####:10970:  PrintCharAndCodeTo<unsigned char>(c, os);
    %%%%%:10970-block  0
call    0 never executed
    #####:10971:}
        -:10972:
        -:10973:// Prints a wchar_t as a symbol if it is printable or as its internal
        -:10974:// code otherwise and also as its code.  L'\0' is printed as "L'\\0'".
function _ZN7testing8internal7PrintToEwPSo called 0 returned 0% blocks executed 0%
    #####:10975:void PrintTo(wchar_t wc, ostream* os) {
    #####:10976:  PrintCharAndCodeTo<wchar_t>(wc, os);
    %%%%%:10976-block  0
call    0 never executed
    #####:10977:}
        -:10978:
        -:10979:// Prints the given array of characters to the ostream.  CharType must be either
        -:10980:// char or wchar_t.
        -:10981:// The array starts at begin, the length is len, it may include '\0' characters
        -:10982:// and may not be NUL-terminated.
        -:10983:template <typename CharType>
        -:10984:GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:10985:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:10986:GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
      12*:10987:static CharFormat PrintCharsAsStringTo(
        -:10988:    const CharType* begin, size_t len, ostream* os) {
      12*:10989:  const char* const kQuoteBegin = sizeof(CharType) == 1 ? "\"" : "L\"";
      12*:10990:  *os << kQuoteBegin;
      12*:10991:  bool is_previous_hex = false;
      12*:10992:  CharFormat print_format = kAsIs;
      54*:10993:  for (size_t index = 0; index < len; ++index) {
      42*:10994:    const CharType cur = begin[index];
      42*:10995:    if (is_previous_hex && IsXDigit(cur)) {
        -:10996:      // Previous character is of '\x..' form and this character can be
        -:10997:      // interpreted as another hexadecimal digit in its number. Break string to
        -:10998:      // disambiguate.
    #####:10999:      *os << "\" " << kQuoteBegin;
        -:11000:    }
      42*:11001:    is_previous_hex = PrintAsStringLiteralTo(cur, os) == kHexEscape;
        -:11002:    // Remember if any characters required hex escaping.
      42*:11003:    if (is_previous_hex) {
    #####:11004:      print_format = kHexEscape;
        -:11005:    }
        -:11006:  }
      12*:11007:  *os << "\"";
      12*:11008:  return print_format;
        -:11009:}
------------------
_ZN7testing8internalL20PrintCharsAsStringToIwEENS0_10CharFormatEPKT_mPSo:
function _ZN7testing8internalL20PrintCharsAsStringToIwEENS0_10CharFormatEPKT_mPSo called 0 returned 0% blocks executed 0%
    #####:10987:static CharFormat PrintCharsAsStringTo(
        -:10988:    const CharType* begin, size_t len, ostream* os) {
    #####:10989:  const char* const kQuoteBegin = sizeof(CharType) == 1 ? "\"" : "L\"";
    #####:10990:  *os << kQuoteBegin;
    %%%%%:10990-block  0
call    0 never executed
    #####:10991:  bool is_previous_hex = false;
    #####:10992:  CharFormat print_format = kAsIs;
    #####:10993:  for (size_t index = 0; index < len; ++index) {
    %%%%%:10993-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10993-block  1
    #####:10994:    const CharType cur = begin[index];
    #####:10995:    if (is_previous_hex && IsXDigit(cur)) {
    %%%%%:10995-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:10995-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10995-block  2
    %%%%%:10995-block  3
    %%%%%:10995-block  4
branch  5 never executed
branch  6 never executed
        -:10996:      // Previous character is of '\x..' form and this character can be
        -:10997:      // interpreted as another hexadecimal digit in its number. Break string to
        -:10998:      // disambiguate.
    #####:10999:      *os << "\" " << kQuoteBegin;
    %%%%%:10999-block  0
call    0 never executed
call    1 never executed
        -:11000:    }
    #####:11001:    is_previous_hex = PrintAsStringLiteralTo(cur, os) == kHexEscape;
    %%%%%:11001-block  0
call    0 never executed
        -:11002:    // Remember if any characters required hex escaping.
    #####:11003:    if (is_previous_hex) {
branch  0 never executed
branch  1 never executed
    #####:11004:      print_format = kHexEscape;
    %%%%%:11004-block  0
        -:11005:    }
        -:11006:  }
    #####:11007:  *os << "\"";
    %%%%%:11007-block  0
call    0 never executed
    #####:11008:  return print_format;
        -:11009:}
------------------
_ZN7testing8internalL20PrintCharsAsStringToIcEENS0_10CharFormatEPKT_mPSo:
function _ZN7testing8internalL20PrintCharsAsStringToIcEENS0_10CharFormatEPKT_mPSo called 12 returned 100% blocks executed 67%
       12:10987:static CharFormat PrintCharsAsStringTo(
        -:10988:    const CharType* begin, size_t len, ostream* os) {
       12:10989:  const char* const kQuoteBegin = sizeof(CharType) == 1 ? "\"" : "L\"";
       12:10990:  *os << kQuoteBegin;
       12:10990-block  0
call    0 returned 12
       12:10991:  bool is_previous_hex = false;
       12:10992:  CharFormat print_format = kAsIs;
       54:10993:  for (size_t index = 0; index < len; ++index) {
       54:10993-block  0
branch  0 taken 42 (fallthrough)
branch  1 taken 12
       42:10993-block  1
       42:10994:    const CharType cur = begin[index];
      42*:10995:    if (is_previous_hex && IsXDigit(cur)) {
       42:10995-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 42
    %%%%%:10995-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:10995-block  2
       42:10995-block  3
       42:10995-block  4
branch  5 taken 0 (fallthrough)
branch  6 taken 42
        -:10996:      // Previous character is of '\x..' form and this character can be
        -:10997:      // interpreted as another hexadecimal digit in its number. Break string to
        -:10998:      // disambiguate.
    #####:10999:      *os << "\" " << kQuoteBegin;
    %%%%%:10999-block  0
call    0 never executed
call    1 never executed
        -:11000:    }
       42:11001:    is_previous_hex = PrintAsStringLiteralTo(cur, os) == kHexEscape;
       42:11001-block  0
call    0 returned 42
        -:11002:    // Remember if any characters required hex escaping.
       42:11003:    if (is_previous_hex) {
branch  0 taken 0 (fallthrough)
branch  1 taken 42
    #####:11004:      print_format = kHexEscape;
    %%%%%:11004-block  0
        -:11005:    }
        -:11006:  }
       12:11007:  *os << "\"";
       12:11007-block  0
call    0 returned 12
       12:11008:  return print_format;
        -:11009:}
------------------
        -:11010:
        -:11011:// Prints a (const) char/wchar_t array of 'len' elements, starting at address
        -:11012:// 'begin'.  CharType must be either char or wchar_t.
        -:11013:template <typename CharType>
        -:11014:GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:11015:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:11016:GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
    #####:11017:static void UniversalPrintCharArray(
        -:11018:    const CharType* begin, size_t len, ostream* os) {
        -:11019:  // The code
        -:11020:  //   const char kFoo[] = "foo";
        -:11021:  // generates an array of 4, not 3, elements, with the last one being '\0'.
        -:11022:  //
        -:11023:  // Therefore when printing a char array, we don't print the last element if
        -:11024:  // it's '\0', such that the output matches the string literal as it's
        -:11025:  // written in the source code.
    #####:11026:  if (len > 0 && begin[len - 1] == '\0') {
    #####:11027:    PrintCharsAsStringTo(begin, len - 1, os);
    #####:11028:    return;
        -:11029:  }
        -:11030:
        -:11031:  // If, however, the last element in the array is not '\0', e.g.
        -:11032:  //    const char kFoo[] = { 'f', 'o', 'o' };
        -:11033:  // we must print the entire array.  We also print a message to indicate
        -:11034:  // that the array is not NUL-terminated.
    #####:11035:  PrintCharsAsStringTo(begin, len, os);
    #####:11036:  *os << " (no terminating NUL)";
        -:11037:}
------------------
_ZN7testing8internalL23UniversalPrintCharArrayIwEEvPKT_mPSo:
function _ZN7testing8internalL23UniversalPrintCharArrayIwEEvPKT_mPSo called 0 returned 0% blocks executed 0%
    #####:11017:static void UniversalPrintCharArray(
        -:11018:    const CharType* begin, size_t len, ostream* os) {
        -:11019:  // The code
        -:11020:  //   const char kFoo[] = "foo";
        -:11021:  // generates an array of 4, not 3, elements, with the last one being '\0'.
        -:11022:  //
        -:11023:  // Therefore when printing a char array, we don't print the last element if
        -:11024:  // it's '\0', such that the output matches the string literal as it's
        -:11025:  // written in the source code.
    #####:11026:  if (len > 0 && begin[len - 1] == '\0') {
    %%%%%:11026-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11026-block  1
branch  2 never executed
branch  3 never executed
    #####:11027:    PrintCharsAsStringTo(begin, len - 1, os);
    %%%%%:11027-block  0
call    0 never executed
    #####:11028:    return;
        -:11029:  }
        -:11030:
        -:11031:  // If, however, the last element in the array is not '\0', e.g.
        -:11032:  //    const char kFoo[] = { 'f', 'o', 'o' };
        -:11033:  // we must print the entire array.  We also print a message to indicate
        -:11034:  // that the array is not NUL-terminated.
    #####:11035:  PrintCharsAsStringTo(begin, len, os);
    %%%%%:11035-block  0
call    0 never executed
    #####:11036:  *os << " (no terminating NUL)";
call    0 never executed
        -:11037:}
------------------
_ZN7testing8internalL23UniversalPrintCharArrayIcEEvPKT_mPSo:
function _ZN7testing8internalL23UniversalPrintCharArrayIcEEvPKT_mPSo called 0 returned 0% blocks executed 0%
    #####:11017:static void UniversalPrintCharArray(
        -:11018:    const CharType* begin, size_t len, ostream* os) {
        -:11019:  // The code
        -:11020:  //   const char kFoo[] = "foo";
        -:11021:  // generates an array of 4, not 3, elements, with the last one being '\0'.
        -:11022:  //
        -:11023:  // Therefore when printing a char array, we don't print the last element if
        -:11024:  // it's '\0', such that the output matches the string literal as it's
        -:11025:  // written in the source code.
    #####:11026:  if (len > 0 && begin[len - 1] == '\0') {
    %%%%%:11026-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11026-block  1
branch  2 never executed
branch  3 never executed
    #####:11027:    PrintCharsAsStringTo(begin, len - 1, os);
    %%%%%:11027-block  0
call    0 never executed
    #####:11028:    return;
        -:11029:  }
        -:11030:
        -:11031:  // If, however, the last element in the array is not '\0', e.g.
        -:11032:  //    const char kFoo[] = { 'f', 'o', 'o' };
        -:11033:  // we must print the entire array.  We also print a message to indicate
        -:11034:  // that the array is not NUL-terminated.
    #####:11035:  PrintCharsAsStringTo(begin, len, os);
    %%%%%:11035-block  0
call    0 never executed
    #####:11036:  *os << " (no terminating NUL)";
call    0 never executed
        -:11037:}
------------------
        -:11038:
        -:11039:// Prints a (const) char array of 'len' elements, starting at address 'begin'.
function _ZN7testing8internal19UniversalPrintArrayEPKcmPSo called 0 returned 0% blocks executed 0%
    #####:11040:void UniversalPrintArray(const char* begin, size_t len, ostream* os) {
    #####:11041:  UniversalPrintCharArray(begin, len, os);
    %%%%%:11041-block  0
call    0 never executed
    #####:11042:}
        -:11043:
        -:11044:// Prints a (const) wchar_t array of 'len' elements, starting at address
        -:11045:// 'begin'.
function _ZN7testing8internal19UniversalPrintArrayEPKwmPSo called 0 returned 0% blocks executed 0%
    #####:11046:void UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {
    #####:11047:  UniversalPrintCharArray(begin, len, os);
    %%%%%:11047-block  0
call    0 never executed
    #####:11048:}
        -:11049:
        -:11050:// Prints the given C string to the ostream.
function _ZN7testing8internal7PrintToEPKcPSo called 0 returned 0% blocks executed 0%
    #####:11051:void PrintTo(const char* s, ostream* os) {
    #####:11052:  if (s == NULL) {
    %%%%%:11052-block  0
branch  0 never executed
branch  1 never executed
    #####:11053:    *os << "NULL";
    %%%%%:11053-block  0
call    0 never executed
        -:11054:  } else {
    #####:11055:    *os << ImplicitCast_<const void*>(s) << " pointing to ";
    %%%%%:11055-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:11056:    PrintCharsAsStringTo(s, strlen(s), os);
call    0 never executed
        -:11057:  }
    #####:11058:}
        -:11059:
        -:11060:// MSVC compiler can be configured to define whar_t as a typedef
        -:11061:// of unsigned short. Defining an overload for const wchar_t* in that case
        -:11062:// would cause pointers to unsigned shorts be printed as wide strings,
        -:11063:// possibly accessing more memory than intended and causing invalid
        -:11064:// memory accesses. MSVC defines _NATIVE_WCHAR_T_DEFINED symbol when
        -:11065:// wchar_t is implemented as a native type.
        -:11066:#if !defined(_MSC_VER) || defined(_NATIVE_WCHAR_T_DEFINED)
        -:11067:// Prints the given wide C string to the ostream.
function _ZN7testing8internal7PrintToEPKwPSo called 0 returned 0% blocks executed 0%
    #####:11068:void PrintTo(const wchar_t* s, ostream* os) {
    #####:11069:  if (s == NULL) {
    %%%%%:11069-block  0
branch  0 never executed
branch  1 never executed
    #####:11070:    *os << "NULL";
    %%%%%:11070-block  0
call    0 never executed
        -:11071:  } else {
    #####:11072:    *os << ImplicitCast_<const void*>(s) << " pointing to ";
    %%%%%:11072-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:11073:    PrintCharsAsStringTo(s, std::wcslen(s), os);
call    0 never executed
        -:11074:  }
    #####:11075:}
        -:11076:#endif  // wchar_t is native
        -:11077:
        -:11078:namespace {
        -:11079:
function _ZN7testing8internal12_GLOBAL__N_131ContainsUnprintableControlCodesEPKcm called 0 returned 0% blocks executed 0%
    #####:11080:bool ContainsUnprintableControlCodes(const char* str, size_t length) {
    #####:11081:  const unsigned char *s = reinterpret_cast<const unsigned char *>(str);
        -:11082:
    #####:11083:  for (size_t i = 0; i < length; i++) {
    %%%%%:11083-block  0
    %%%%%:11083-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:11083-block  2
    #####:11084:    unsigned char ch = *s++;
    #####:11085:    if (std::iscntrl(ch)) {
    %%%%%:11085-block  0
branch  0 never executed
branch  1 never executed
    #####:11086:        switch (ch) {
    %%%%%:11086-block  0
branch  0 never executed
branch  1 never executed
    #####:11087:        case '\t':
        -:11088:        case '\n':
        -:11089:        case '\r':
    #####:11090:          break;
    %%%%%:11090-block  0
    #####:11091:        default:
    #####:11092:          return true;
    %%%%%:11092-block  0
        -:11093:        }
        -:11094:      }
        -:11095:  }
    #####:11096:  return false;
    %%%%%:11096-block  0
        -:11097:}
        -:11098:
function _ZN7testing8internal12_GLOBAL__N_115IsUTF8TrailByteEh called 0 returned 0% blocks executed 0%
    #####:11099:bool IsUTF8TrailByte(unsigned char t) { return 0x80 <= t && t<= 0xbf; }
    %%%%%:11099-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11099-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:11099-block  2
    %%%%%:11099-block  3
    %%%%%:11099-block  4
        -:11100:
function _ZN7testing8internal12_GLOBAL__N_111IsValidUTF8EPKcm called 0 returned 0% blocks executed 0%
    #####:11101:bool IsValidUTF8(const char* str, size_t length) {
    #####:11102:  const unsigned char *s = reinterpret_cast<const unsigned char *>(str);
        -:11103:
    #####:11104:  for (size_t i = 0; i < length;) {
    %%%%%:11104-block  0
    %%%%%:11104-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:11104-block  2
    #####:11105:    unsigned char lead = s[i++];
        -:11106:
    #####:11107:    if (lead <= 0x7f) {
    %%%%%:11107-block  0
branch  0 never executed
branch  1 never executed
    #####:11108:      continue;  // single-byte character (ASCII) 0..7F
    %%%%%:11108-block  0
        -:11109:    }
    #####:11110:    if (lead < 0xc2) {
    %%%%%:11110-block  0
branch  0 never executed
branch  1 never executed
    #####:11111:      return false;  // trail byte or non-shortest form
    %%%%%:11111-block  0
    #####:11112:    } else if (lead <= 0xdf && (i + 1) <= length && IsUTF8TrailByte(s[i])) {
    %%%%%:11112-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11112-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:11112-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11112-block  3
    %%%%%:11112-block  4
    %%%%%:11112-block  5
branch  7 never executed
branch  8 never executed
    #####:11113:      ++i;  // 2-byte character
    %%%%%:11113-block  0
    #####:11114:    } else if (0xe0 <= lead && lead <= 0xef && (i + 2) <= length &&
    %%%%%:11114-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11114-block  1
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:11115:               IsUTF8TrailByte(s[i]) &&
    %%%%%:11115-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11116:               IsUTF8TrailByte(s[i + 1]) &&
    %%%%%:11116-block  0
call    0 never executed
    %%%%%:11116-block  1
branch  1 never executed
branch  2 never executed
        -:11117:               // check for non-shortest form and surrogate
    #####:11118:               (lead != 0xe0 || s[i] >= 0xa0) &&
    %%%%%:11118-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11118-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:11118-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:11118-block  3
    %%%%%:11118-block  4
    %%%%%:11118-block  5
branch  6 never executed
branch  7 never executed
    #####:11119:               (lead != 0xed || s[i] < 0xa0)) {
    %%%%%:11119-block  0
branch  0 never executed
branch  1 never executed
    #####:11120:      i += 2;  // 3-byte character
    %%%%%:11120-block  0
    #####:11121:    } else if (0xf0 <= lead && lead <= 0xf4 && (i + 3) <= length &&
    %%%%%:11121-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11121-block  1
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:11122:               IsUTF8TrailByte(s[i]) &&
    %%%%%:11122-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11123:               IsUTF8TrailByte(s[i + 1]) &&
    %%%%%:11123-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11124:               IsUTF8TrailByte(s[i + 2]) &&
    %%%%%:11124-block  0
call    0 never executed
    %%%%%:11124-block  1
branch  1 never executed
branch  2 never executed
        -:11125:               // check for non-shortest form
    #####:11126:               (lead != 0xf0 || s[i] >= 0x90) &&
    %%%%%:11126-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11126-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:11126-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:11126-block  3
    %%%%%:11126-block  4
    %%%%%:11126-block  5
branch  6 never executed
branch  7 never executed
    #####:11127:               (lead != 0xf4 || s[i] < 0x90)) {
    %%%%%:11127-block  0
branch  0 never executed
branch  1 never executed
    #####:11128:      i += 3;  // 4-byte character
    %%%%%:11128-block  0
        -:11129:    } else {
    #####:11130:      return false;
    %%%%%:11130-block  0
        -:11131:    }
        -:11132:  }
    #####:11133:  return true;
    %%%%%:11133-block  0
        -:11134:}
        -:11135:
function _ZN7testing8internal12_GLOBAL__N_122ConditionalPrintAsTextEPKcmPSo called 0 returned 0% blocks executed 0%
    #####:11136:void ConditionalPrintAsText(const char* str, size_t length, ostream* os) {
    #####:11137:  if (!ContainsUnprintableControlCodes(str, length) &&
    %%%%%:11137-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11137-block  1
    %%%%%:11137-block  2
    %%%%%:11137-block  3
branch  5 never executed
branch  6 never executed
    #####:11138:      IsValidUTF8(str, length)) {
    %%%%%:11138-block  0
call    0 never executed
    #####:11139:    *os << "\n    As Text: \"" << str << "\"";
    %%%%%:11139-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:11140:  }
    #####:11141:}
        -:11142:
        -:11143:}  // anonymous namespace
        -:11144:
        -:11145:// Prints a ::string object.
        -:11146:#if GTEST_HAS_GLOBAL_STRING
        -:11147:void PrintStringTo(const ::string& s, ostream* os) {
        -:11148:  if (PrintCharsAsStringTo(s.data(), s.size(), os) == kHexEscape) {
        -:11149:    if (GTEST_FLAG(print_utf8)) {
        -:11150:      ConditionalPrintAsText(s.data(), s.size(), os);
        -:11151:    }
        -:11152:  }
        -:11153:}
        -:11154:#endif  // GTEST_HAS_GLOBAL_STRING
        -:11155:
function _ZN7testing8internal13PrintStringToERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSo called 12 returned 100% blocks executed 56%
       12:11156:void PrintStringTo(const ::std::string& s, ostream* os) {
       12:11157:  if (PrintCharsAsStringTo(s.data(), s.size(), os) == kHexEscape) {
       12:11157-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
branch  3 taken 0 (fallthrough)
branch  4 taken 12
    #####:11158:    if (GTEST_FLAG(print_utf8)) {
    %%%%%:11158-block  0
branch  0 never executed
branch  1 never executed
    #####:11159:      ConditionalPrintAsText(s.data(), s.size(), os);
    %%%%%:11159-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:11160:    }
        -:11161:  }
       12:11162:}
        -:11163:
        -:11164:// Prints a ::wstring object.
        -:11165:#if GTEST_HAS_GLOBAL_WSTRING
        -:11166:void PrintWideStringTo(const ::wstring& s, ostream* os) {
        -:11167:  PrintCharsAsStringTo(s.data(), s.size(), os);
        -:11168:}
        -:11169:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:11170:
        -:11171:#if GTEST_HAS_STD_WSTRING
function _ZN7testing8internal17PrintWideStringToERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEPSo called 0 returned 0% blocks executed 0%
    #####:11172:void PrintWideStringTo(const ::std::wstring& s, ostream* os) {
    #####:11173:  PrintCharsAsStringTo(s.data(), s.size(), os);
    %%%%%:11173-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:11174:}
        -:11175:#endif  // GTEST_HAS_STD_WSTRING
        -:11176:
        -:11177:}  // namespace internal
        -:11178:
        -:11179:}  // namespace testing
        -:11180:// Copyright 2008, Google Inc.
        -:11181:// All rights reserved.
        -:11182://
        -:11183:// Redistribution and use in source and binary forms, with or without
        -:11184:// modification, are permitted provided that the following conditions are
        -:11185:// met:
        -:11186://
        -:11187://     * Redistributions of source code must retain the above copyright
        -:11188:// notice, this list of conditions and the following disclaimer.
        -:11189://     * Redistributions in binary form must reproduce the above
        -:11190:// copyright notice, this list of conditions and the following disclaimer
        -:11191:// in the documentation and/or other materials provided with the
        -:11192:// distribution.
        -:11193://     * Neither the name of Google Inc. nor the names of its
        -:11194:// contributors may be used to endorse or promote products derived from
        -:11195:// this software without specific prior written permission.
        -:11196://
        -:11197:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:11198:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:11199:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:11200:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:11201:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:11202:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:11203:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:11204:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:11205:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:11206:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:11207:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:11208:
        -:11209://
        -:11210:// The Google C++ Testing and Mocking Framework (Google Test)
        -:11211:
        -:11212:
        -:11213:namespace testing {
        -:11214:
        -:11215:using internal::GetUnitTestImpl;
        -:11216:
        -:11217:// Gets the summary of the failure message by omitting the stack trace
        -:11218:// in it.
function _ZN7testing14TestPartResult14ExtractSummaryB5cxx11EPKc called 1 returned 100% blocks executed 50%
        1:11219:std::string TestPartResult::ExtractSummary(const char* message) {
        1:11220:  const char* const stack_trace = strstr(message, internal::kStackTraceMarker);
        -:11221:  return stack_trace == NULL ? message :
       2*:11222:      std::string(message, stack_trace);
        1:11222-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:11222-block  1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:11222-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:11222-block  3
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:11222-block  4
call   12 never executed
        1:11222-block  5
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:11222-block  6
call   15 returned 1
        1:11222-block  7
        1:11222-block  8
    $$$$$:11222-block  9
branch 16 never executed
branch 17 never executed
    $$$$$:11222-block 10
call   18 never executed
    $$$$$:11222-block 11
    $$$$$:11222-block 12
branch 19 never executed
branch 20 never executed
    $$$$$:11222-block 13
call   21 never executed
        -:11223:}
        -:11224:
        -:11225:// Prints a TestPartResult object.
function _ZN7testinglsERSoRKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:11226:std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {
        -:11227:  return os
    #####:11228:      << result.file_name() << ":" << result.line_number() << ": "
    %%%%%:11228-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:11229:      << (result.type() == TestPartResult::kSuccess ? "Success" :
    #####:11230:          result.type() == TestPartResult::kFatalFailure ? "Fatal failure" :
    %%%%%:11230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11230-block  1
    %%%%%:11230-block  2
        -:11231:          "Non-fatal failure") << ":\n"
    #####:11232:      << result.message() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11232-block  0
    %%%%%:11232-block  1
    %%%%%:11232-block  2
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:11233:}
        -:11234:
        -:11235:// Appends a TestPartResult to the array.
function _ZN7testing19TestPartResultArray6AppendERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:11236:void TestPartResultArray::Append(const TestPartResult& result) {
    #####:11237:  array_.push_back(result);
    %%%%%:11237-block  0
call    0 never executed
    #####:11238:}
        -:11239:
        -:11240:// Returns the TestPartResult at the given index (0-based).
function _ZNK7testing19TestPartResultArray17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####:11241:const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {
    #####:11242:  if (index < 0 || index >= size()) {
    %%%%%:11242-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:11242-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:11242-block  2
    %%%%%:11242-block  3
    %%%%%:11242-block  4
branch  5 never executed
branch  6 never executed
    #####:11243:    printf("\nInvalid index (%d) into TestPartResultArray.\n", index);
    %%%%%:11243-block  0
call    0 never executed
    #####:11244:    internal::posix::Abort();
call    0 never executed
        -:11245:  }
        -:11246:
    #####:11247:  return array_[index];
    %%%%%:11247-block  0
call    0 never executed
        -:11248:}
        -:11249:
        -:11250:// Returns the number of TestPartResult objects in the array.
function _ZNK7testing19TestPartResultArray4sizeEv called 0 returned 0% blocks executed 0%
    #####:11251:int TestPartResultArray::size() const {
    #####:11252:  return static_cast<int>(array_.size());
    %%%%%:11252-block  0
call    0 never executed
        -:11253:}
        -:11254:
        -:11255:namespace internal {
        -:11256:
function _ZN7testing8internal24HasNewFatalFailureHelperC2Ev called 0 returned 0% blocks executed 0%
    #####:11257:HasNewFatalFailureHelper::HasNewFatalFailureHelper()
        -:11258:    : has_new_fatal_failure_(false),
        -:11259:      original_reporter_(GetUnitTestImpl()->
    #####:11260:                         GetTestPartResultReporterForCurrentThread()) {
    %%%%%:11260-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11260-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:11260-block  2
call    7 never executed
    #####:11261:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(this);
    %%%%%:11261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11261-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:11262:}
    %%%%%:11262-block  0
        -:11263:
    #####:11264:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
    #####:11265:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:11266:      original_reporter_);
    #####:11267:}
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD0Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD0Ev called 0 returned 0% blocks executed 0%
    #####:11264:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
        -:11265:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:11266:      original_reporter_);
    #####:11267:}
    %%%%%:11267-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD2Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:11264:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
call    0 never executed
    #####:11265:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
    %%%%%:11265-block  0
call    0 never executed
call    1 never executed
        -:11266:      original_reporter_);
    #####:11267:}
------------------
        -:11268:
function _ZN7testing8internal24HasNewFatalFailureHelper20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:11269:void HasNewFatalFailureHelper::ReportTestPartResult(
        -:11270:    const TestPartResult& result) {
    #####:11271:  if (result.fatally_failed())
    %%%%%:11271-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11272:    has_new_fatal_failure_ = true;
    %%%%%:11272-block  0
    #####:11273:  original_reporter_->ReportTestPartResult(result);
    %%%%%:11273-block  0
call    0 never executed
    #####:11274:}
        -:11275:
        -:11276:}  // namespace internal
        -:11277:
        -:11278:}  // namespace testing
        -:11279:// Copyright 2008 Google Inc.
        -:11280:// All Rights Reserved.
        -:11281://
        -:11282:// Redistribution and use in source and binary forms, with or without
        -:11283:// modification, are permitted provided that the following conditions are
        -:11284:// met:
        -:11285://
        -:11286://     * Redistributions of source code must retain the above copyright
        -:11287:// notice, this list of conditions and the following disclaimer.
        -:11288://     * Redistributions in binary form must reproduce the above
        -:11289:// copyright notice, this list of conditions and the following disclaimer
        -:11290:// in the documentation and/or other materials provided with the
        -:11291:// distribution.
        -:11292://     * Neither the name of Google Inc. nor the names of its
        -:11293:// contributors may be used to endorse or promote products derived from
        -:11294:// this software without specific prior written permission.
        -:11295://
        -:11296:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:11297:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:11298:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:11299:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:11300:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:11301:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:11302:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:11303:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:11304:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:11305:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:11306:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:11307:
        -:11308:
        -:11309:
        -:11310:
        -:11311:namespace testing {
        -:11312:namespace internal {
        -:11313:
        -:11314:#if GTEST_HAS_TYPED_TEST_P
        -:11315:
        -:11316:// Skips to the first non-space char in str. Returns an empty string if str
        -:11317:// contains only whitespace characters.
function _ZN7testing8internalL10SkipSpacesEPKc called 0 returned 0% blocks executed 0%
    #####:11318:static const char* SkipSpaces(const char* str) {
    #####:11319:  while (IsSpace(*str))
    %%%%%:11319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11320:    str++;
    %%%%%:11320-block  0
    #####:11321:  return str;
    %%%%%:11321-block  0
        -:11322:}
        -:11323:
function _ZN7testing8internalL18SplitIntoTestNamesEPKc called 0 returned 0% blocks executed 0%
    #####:11324:static std::vector<std::string> SplitIntoTestNames(const char* src) {
    #####:11325:  std::vector<std::string> name_vec;
    %%%%%:11325-block  0
call    0 never executed
    #####:11326:  src = SkipSpaces(src);
call    0 never executed
    #####:11327:  for (; src != NULL; src = SkipComma(src)) {
    %%%%%:11327-block  0
branch  0 never executed
branch  1 never executed
    #####:11328:    name_vec.push_back(StripTrailingSpaces(GetPrefixUntilComma(src)));
    %%%%%:11328-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11328-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11328-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:11328-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:11328-block  4
call   12 never executed
    $$$$$:11328-block  5
    $$$$$:11328-block  6
call   13 never executed
    $$$$$:11328-block  7
        -:11329:  }
    #####:11330:  return name_vec;
    %%%%%:11330-block  0
    %%%%%:11330-block  1
        -:11331:}
        -:11332:
        -:11333:// Verifies that registered_tests match the test names in
        -:11334:// registered_tests_; returns registered_tests if successful, or
        -:11335:// aborts the program otherwise.
function _ZN7testing8internal19TypedTestCasePState25VerifyRegisteredTestNamesEPKciS3_ called 0 returned 0% blocks executed 0%
    #####:11336:const char* TypedTestCasePState::VerifyRegisteredTestNames(
        -:11337:    const char* file, int line, const char* registered_tests) {
        -:11338:  typedef RegisteredTestsMap::const_iterator RegisteredTestIter;
    #####:11339:  registered_ = true;
        -:11340:
    #####:11341:  std::vector<std::string> name_vec = SplitIntoTestNames(registered_tests);
    %%%%%:11341-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:11341-block  1
call    4 never executed
        -:11342:
    #####:11343:  Message errors;
    %%%%%:11343-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:11343-block  1
call    4 never executed
        -:11344:
    #####:11345:  std::set<std::string> tests;
    %%%%%:11345-block  0
call    0 never executed
call    1 never executed
    $$$$$:11345-block  1
call    2 never executed
    #####:11346:  for (std::vector<std::string>::const_iterator name_it = name_vec.begin();
call    0 never executed
call    1 never executed
    #####:11347:       name_it != name_vec.end(); ++name_it) {
    %%%%%:11347-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11347-block  1
call    4 never executed
    #####:11348:    const std::string& name = *name_it;
    %%%%%:11348-block  0
call    0 never executed
    #####:11349:    if (tests.count(name) != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11349-block  0
branch  3 never executed
branch  4 never executed
    #####:11350:      errors << "Test " << name << " is listed more than once.\n";
    %%%%%:11350-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11350-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:11350-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:11351:      continue;
    %%%%%:11351-block  0
        -:11352:    }
        -:11353:
    #####:11354:    bool found = false;
    #####:11355:    for (RegisteredTestIter it = registered_tests_.begin();
    %%%%%:11355-block  0
call    0 never executed
call    1 never executed
    #####:11356:         it != registered_tests_.end();
    %%%%%:11356-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:11357:         ++it) {
    %%%%%:11357-block  0
call    0 never executed
    #####:11358:      if (name == it->first) {
    %%%%%:11358-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11359:        found = true;
    #####:11360:        break;
    %%%%%:11360-block  0
        -:11361:      }
        -:11362:    }
        -:11363:
    #####:11364:    if (found) {
    %%%%%:11364-block  0
branch  0 never executed
branch  1 never executed
    #####:11365:      tests.insert(name);
    %%%%%:11365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11366:    } else {
    #####:11367:      errors << "No test named " << name
    %%%%%:11367-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11367-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:11368:             << " can be found in this test case.\n";
    %%%%%:11368-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11369:    }
        -:11370:  }
        -:11371:
    #####:11372:  for (RegisteredTestIter it = registered_tests_.begin();
    %%%%%:11372-block  0
call    0 never executed
call    1 never executed
    #####:11373:       it != registered_tests_.end();
    %%%%%:11373-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:11374:       ++it) {
    %%%%%:11374-block  0
call    0 never executed
    #####:11375:    if (tests.count(it->first) == 0) {
    %%%%%:11375-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11375-block  1
branch  4 never executed
branch  5 never executed
    #####:11376:      errors << "You forgot to list test " << it->first << ".\n";
    %%%%%:11376-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11376-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:11376-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:11377:    }
        -:11378:  }
        -:11379:
    #####:11380:  const std::string& errors_str = errors.GetString();
    %%%%%:11380-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:11380-block  1
call    3 never executed
    #####:11381:  if (errors_str != "") {
    %%%%%:11381-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:11381-block  1
branch  3 never executed
branch  4 never executed
    #####:11382:    fprintf(stderr, "%s %s", FormatFileLocation(file, line).c_str(),
    %%%%%:11382-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:11382-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:11382-block  2
call    8 never executed
    $$$$$:11382-block  3
call    9 never executed
    $$$$$:11382-block  4
        -:11383:            errors_str.c_str());
    #####:11384:    fflush(stderr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11385:    posix::Abort();
    %%%%%:11385-block  0
call    0 never executed
        -:11386:  }
        -:11387:
    #####:11388:  return registered_tests;
    %%%%%:11388-block  0
call    0 never executed
    %%%%%:11388-block  1
        -:11389:}
        -:11390:
        -:11391:#endif  // GTEST_HAS_TYPED_TEST_P
        -:11392:
        -:11393:}  // namespace internal
        -:11394:}  // namespace testing
